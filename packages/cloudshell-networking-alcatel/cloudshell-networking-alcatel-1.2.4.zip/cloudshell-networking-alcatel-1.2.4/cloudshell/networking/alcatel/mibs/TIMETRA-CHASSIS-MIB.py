#
# PySNMP MIB module TIMETRA-CHASSIS-MIB (http://pysnmp.sf.net)
# ASN.1 source file://C:\MIBS\text_mibs\aos\TIMETRA-CHASSIS-MIB
# Produced by pysmi-0.0.6 at Wed May 31 13:16:58 2017
# On host ? platform ? version ? by user ?
# Using Python version 2.7.9 (default, Dec 10 2014, 12:24:55) [MSC v.1500 32 bit (Intel)]
#
( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
( SnmpAdminString, ) = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
( NotificationGroup, ModuleCompliance, ObjectGroup, ) = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
( Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, IpAddress, TimeTicks, Counter64, Unsigned32, ModuleIdentity, Gauge32, iso, ObjectIdentity, Bits, Counter32, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "IpAddress", "TimeTicks", "Counter64", "Unsigned32", "ModuleIdentity", "Gauge32", "iso", "ObjectIdentity", "Bits", "Counter32")
( TimeInterval, MacAddress, TextualConvention, DateAndTime, TruthValue, TimeStamp, RowStatus, DisplayString, RowPointer, ) = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "MacAddress", "TextualConvention", "DateAndTime", "TruthValue", "TimeStamp", "RowStatus", "DisplayString", "RowPointer")
( timetraSRMIBModules, tmnxSRObjs, tmnxSRNotifyPrefix, tmnxSRConfs, ) = mibBuilder.importSymbols("TIMETRA-GLOBAL-MIB", "timetraSRMIBModules", "tmnxSRObjs", "tmnxSRNotifyPrefix", "tmnxSRConfs")
( THsmdaPIRMRateOverride, TmnxAdminState, TPlcrBurstSizeBytesOverride, TmnxIngPolicerStatMode, TmnxActionType, TmnxIngPolicerStatModeOverride, THsmdaWeightOverride, TmnxOperState, TPerPacketOffsetOvr, THPolCIRRateOverride, THPolPIRRateOverride, TNamedItemOrEmpty, TmnxIpSecIsaOperFlags, TmnxEnabledDisabled, TIngPolicerId, TmnxPortID, TNamedItem, TItemDescription, ) = mibBuilder.importSymbols("TIMETRA-TC-MIB", "THsmdaPIRMRateOverride", "TmnxAdminState", "TPlcrBurstSizeBytesOverride", "TmnxIngPolicerStatMode", "TmnxActionType", "TmnxIngPolicerStatModeOverride", "THsmdaWeightOverride", "TmnxOperState", "TPerPacketOffsetOvr", "THPolCIRRateOverride", "THPolPIRRateOverride", "TNamedItemOrEmpty", "TmnxIpSecIsaOperFlags", "TmnxEnabledDisabled", "TIngPolicerId", "TmnxPortID", "TNamedItem", "TItemDescription")
tmnxChassisMIBModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 6527, 1, 1, 3, 2)).setRevisions(("1911-02-01 00:00", "1909-02-28 00:00", "1908-07-01 00:00", "1908-01-01 00:00", "1907-01-01 00:00", "1906-03-16 00:00", "1905-08-31 00:00", "1905-01-24 00:00", "1904-01-15 00:00", "1903-08-15 00:00", "1903-01-20 00:00", "1900-08-14 00:00",))
tmnxHwObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2))
tmnxChassisObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1))
tmnxSlotObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 2))
tmnxCardObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3))
tmnxChassisNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6))
tmnxChassisAdminObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8))
tmnxHwNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2))
tmnxChassisNotifyPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1))
tmnxChassisNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0))
tmnxHwConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2))
tmnxChassisConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1))
class TmnxAlarmState(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2,)
    namedValues = NamedValues(("unknown", 0), ("alarmActive", 1), ("alarmCleared", 2),)

class TmnxChassisIndex(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,32)

class TmnxChassisIndexOrZero(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,32)

class TmnxHwIndex(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,2147483647)

class TmnxHwIndexOrZero(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,2147483647)

class TmnxHwClass(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 30,)
    namedValues = NamedValues(("other", 1), ("unknown", 2), ("chassis", 3), ("container", 4), ("powerSupply", 5), ("fan", 6), ("sensor", 7), ("ioModule", 8), ("cpmModule", 9), ("fabricModule", 10), ("mdaModule", 11), ("flashDiskModule", 12), ("port", 13), ("mcm", 14), ("ccm", 15), ("alarmInputModule", 16), ("vwmShelfModule", 30),)

class TmnxCardType(Unsigned32, TextualConvention):
    pass

class TmnxCardSuppType(Bits, TextualConvention):
    namedValues = NamedValues(("invalid-card-type", 0), ("unassigned", 1), ("supp-card-type-2", 2), ("supp-card-type-3", 3), ("supp-card-type-4", 4), ("supp-card-type-5", 5), ("supp-card-type-6", 6), ("supp-card-type-7", 7), ("supp-card-type-8", 8), ("supp-card-type-9", 9), ("supp-card-type-10", 10), ("supp-card-type-11", 11), ("supp-card-type-12", 12), ("supp-card-type-13", 13), ("supp-card-type-14", 14), ("supp-card-type-15", 15), ("supp-card-type-16", 16), ("supp-card-type-17", 17), ("supp-card-type-18", 18), ("supp-card-type-19", 19), ("supp-card-type-20", 20), ("supp-card-type-21", 21), ("supp-card-type-22", 22), ("supp-card-type-23", 23), ("supp-card-type-24", 24), ("supp-card-type-25", 25), ("supp-card-type-26", 26), ("supp-card-type-27", 27), ("supp-card-type-28", 28), ("supp-card-type-29", 29), ("supp-card-type-30", 30), ("supp-card-type-31", 31), ("supp-card-type-32", 32), ("supp-card-type-33", 33), ("supp-card-type-34", 34), ("supp-card-type-35", 35), ("supp-card-type-36", 36), ("supp-card-type-37", 37), ("supp-card-type-38", 38), ("supp-card-type-39", 39), ("supp-card-type-40", 40), ("supp-card-type-41", 41), ("supp-card-type-42", 42), ("supp-card-type-43", 43), ("supp-card-type-44", 44), ("supp-card-type-45", 45), ("supp-card-type-46", 46), ("supp-card-type-47", 47), ("supp-card-type-48", 48), ("supp-card-type-49", 49), ("supp-card-type-50", 50), ("supp-card-type-51", 51), ("supp-card-type-52", 52), ("supp-card-type-53", 53), ("supp-card-type-54", 54), ("supp-card-type-55", 55), ("supp-card-type-56", 56), ("supp-card-type-57", 57), ("supp-card-type-58", 58), ("supp-card-type-59", 59), ("supp-card-type-60", 60), ("supp-card-type-61", 61), ("supp-card-type-62", 62), ("supp-card-type-63", 63),)

class TmnxFabricType(Unsigned32, TextualConvention):
    pass

class TmnxFabricSuppType(Bits, TextualConvention):
    namedValues = NamedValues(("invalidCardType", 0), ("unassigned", 1), ("suppCardType2", 2), ("suppCardType3", 3), ("suppCardType4", 4), ("suppCardType5", 5), ("suppCardType6", 6), ("suppCardType7", 7), ("suppCardType8", 8), ("suppCardType9", 9), ("suppCardType10", 10), ("suppCardType11", 11), ("suppCardType12", 12), ("suppCardType13", 13), ("suppCardType14", 14), ("suppCardType15", 15), ("suppCardType16", 16), ("suppCardType17", 17), ("suppCardType18", 18), ("suppCardType19", 19), ("suppCardType20", 20), ("suppCardType21", 21), ("suppCardType22", 22), ("suppCardType23", 23), ("suppCardType24", 24), ("suppCardType25", 25), ("suppCardType26", 26), ("suppCardType27", 27), ("suppCardType28", 28), ("suppCardType29", 29), ("suppCardType30", 30), ("suppCardType31", 31), ("suppCardType32", 32), ("suppCardType33", 33), ("suppCardType34", 34), ("suppCardType35", 35), ("suppCardType36", 36), ("suppCardType37", 37), ("suppCardType38", 38), ("suppCardType39", 39), ("suppCardType40", 40), ("suppCardType41", 41), ("suppCardType42", 42), ("suppCardType43", 43), ("suppCardType44", 44), ("suppCardType45", 45), ("suppCardType46", 46), ("suppCardType47", 47), ("suppCardType48", 48), ("suppCardType49", 49), ("suppCardType50", 50), ("suppCardType51", 51), ("suppCardType52", 52), ("suppCardType53", 53), ("suppCardType54", 54), ("suppCardType55", 55), ("suppCardType56", 56), ("suppCardType57", 57), ("suppCardType58", 58), ("suppCardType59", 59), ("suppCardType60", 60), ("suppCardType61", 61), ("suppCardType62", 62), ("suppCardType63", 63),)

class TmnxCardRebootType(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3,)
    namedValues = NamedValues(("cardReset", 1), ("notApplicable", 2), ("cardPowerCycle", 3),)

class TmnxChassisType(Unsigned32, TextualConvention):
    pass

class TmnxDeviceState(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4, 5,)
    namedValues = NamedValues(("deviceStateUnknown", 1), ("deviceNotEquipped", 2), ("deviceStateOk", 3), ("deviceStateFailed", 4), ("deviceStateOutOfService", 5),)

class TmnxLEDState(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8,)
    namedValues = NamedValues(("ledOff", 1), ("ledRed", 2), ("ledAmber", 3), ("ledYellow", 4), ("ledGreen", 5), ("ledAmberBlink", 6), ("ledYellowBlink", 7), ("ledGreenBlink", 8),)

class TmnxMdaType(Unsigned32, TextualConvention):
    pass

class TmnxMDASuppType(Bits, TextualConvention):
    namedValues = NamedValues(("invalid-MDA-type", 0), ("unassigned", 1), ("supp-MDA-type-2", 2), ("supp-MDA-type-3", 3), ("supp-MDA-type-4", 4), ("supp-MDA-type-5", 5), ("supp-MDA-type-6", 6), ("supp-MDA-type-7", 7), ("supp-MDA-type-8", 8), ("supp-MDA-type-9", 9), ("supp-MDA-type-10", 10), ("supp-MDA-type-11", 11), ("supp-MDA-type-12", 12), ("supp-MDA-type-13", 13), ("supp-MDA-type-14", 14), ("supp-MDA-type-15", 15), ("supp-MDA-type-16", 16), ("supp-MDA-type-17", 17), ("supp-MDA-type-18", 18), ("supp-MDA-type-19", 19), ("supp-MDA-type-20", 20), ("supp-MDA-type-21", 21), ("supp-MDA-type-22", 22), ("supp-MDA-type-23", 23), ("supp-MDA-type-24", 24), ("supp-MDA-type-25", 25), ("supp-MDA-type-26", 26), ("supp-MDA-type-27", 27), ("supp-MDA-type-28", 28), ("supp-MDA-type-29", 29), ("supp-MDA-type-30", 30), ("supp-MDA-type-31", 31), ("supp-MDA-type-32", 32), ("supp-MDA-type-33", 33), ("supp-MDA-type-34", 34), ("supp-MDA-type-35", 35), ("supp-MDA-type-36", 36), ("supp-MDA-type-37", 37), ("supp-MDA-type-38", 38), ("supp-MDA-type-39", 39), ("supp-MDA-type-40", 40), ("supp-MDA-type-41", 41), ("supp-MDA-type-42", 42), ("supp-MDA-type-43", 43), ("supp-MDA-type-44", 44), ("supp-MDA-type-45", 45), ("supp-MDA-type-46", 46), ("supp-MDA-type-47", 47), ("supp-MDA-type-48", 48), ("supp-MDA-type-49", 49), ("supp-MDA-type-50", 50), ("supp-MDA-type-51", 51), ("supp-MDA-type-52", 52), ("supp-MDA-type-53", 53), ("supp-MDA-type-54", 54), ("supp-MDA-type-55", 55), ("supp-MDA-type-56", 56), ("supp-MDA-type-57", 57), ("supp-MDA-type-58", 58), ("supp-MDA-type-59", 59), ("supp-MDA-type-60", 60), ("supp-MDA-type-61", 61), ("supp-MDA-type-62", 62), ("supp-MDA-type-63", 63), ("supp-MDA-type-64", 64), ("supp-MDA-type-65", 65), ("supp-MDA-type-66", 66), ("supp-MDA-type-67", 67), ("supp-MDA-type-68", 68), ("supp-MDA-type-69", 69), ("supp-MDA-type-70", 70), ("supp-MDA-type-71", 71), ("supp-MDA-type-72", 72), ("supp-MDA-type-73", 73), ("supp-MDA-type-74", 74), ("supp-MDA-type-75", 75), ("supp-MDA-type-76", 76), ("supp-MDA-type-77", 77), ("supp-MDA-type-78", 78), ("supp-MDA-type-79", 79), ("supp-MDA-type-80", 80), ("supp-MDA-type-81", 81), ("supp-MDA-type-82", 82), ("supp-MDA-type-83", 83), ("supp-MDA-type-84", 84), ("supp-MDA-type-85", 85), ("supp-MDA-type-86", 86), ("supp-MDA-type-87", 87), ("supp-MDA-type-88", 88), ("supp-MDA-type-89", 89), ("supp-MDA-type-90", 90), ("supp-MDA-type-91", 91), ("supp-MDA-type-92", 92), ("supp-MDA-type-93", 93), ("supp-MDA-type-94", 94), ("supp-MDA-type-95", 95), ("supp-MDA-type-96", 96), ("supp-MDA-type-97", 97), ("supp-MDA-type-98", 98), ("supp-MDA-type-99", 99), ("supp-MDA-type-100", 100), ("supp-MDA-type-101", 101), ("supp-MDA-type-102", 102), ("supp-MDA-type-103", 103), ("supp-MDA-type-104", 104), ("supp-MDA-type-105", 105), ("supp-MDA-type-106", 106), ("supp-MDA-type-107", 107), ("supp-MDA-type-108", 108), ("supp-MDA-type-109", 109), ("supp-MDA-type-110", 110), ("supp-MDA-type-111", 111),)

class TmnxMDAChanType(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18,)
    namedValues = NamedValues(("unknown", 0), ("sonetSts768", 1), ("sonetSts192", 2), ("sonetSts48", 3), ("sonetSts12", 4), ("sonetSts3", 5), ("sonetSts1", 6), ("sdhTug3", 7), ("sonetVtg", 8), ("sonetVt15", 9), ("sonetVt2", 10), ("sonetVt3", 11), ("sonetVt6", 12), ("pdhTu3", 13), ("pdhDs3", 14), ("pdhE3", 15), ("pdhDs1", 16), ("pdhE1", 17), ("pdhDs0Grp", 18),)

class TmnxMdaAtmMode(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2,)
    namedValues = NamedValues(("notApplicable", 0), ("max8kVc", 1), ("max16kVc", 2),)

class TmnxCcmType(Unsigned32, TextualConvention):
    pass

class TmnxMcmType(Unsigned32, TextualConvention):
    pass

class TmnxSlotNum(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,128)

class TmnxSlotNumOrZero(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,128)

class TmnxPortAdminStatus(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4,)
    namedValues = NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3), ("diagnose", 4),)

class TmnxChassisMode(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2, 3, 4,)
    namedValues = NamedValues(("modeA", 1), ("modeB", 2), ("modeC", 3), ("modeD", 4),)

class TmnxSETSRefSource(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3, 4, 5, 6,)
    namedValues = NamedValues(("otherCPM", 0), ("reference1", 1), ("reference2", 2), ("bits1", 3), ("bits2", 4), ("ptp", 5), ("noReference", 6),)

class TmnxSETSRefQualified(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("qualified", 1), ("not-qualified", 2),)

class TmnxSETSRefAlarm(Bits, TextualConvention):
    namedValues = NamedValues(("los", 0), ("oof", 1), ("oopir", 2),)

class TmnxBITSIfType(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3, 4,)
    namedValues = NamedValues(("none", 0), ("t1-esf", 1), ("t1-sf", 2), ("e1-pcm30crc", 3), ("e1-pcm31crc", 4),)

class TmnxSSMQualityLevel(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,)
    namedValues = NamedValues(("unknown", 0), ("prs", 1), ("stu", 2), ("st2", 3), ("tnc", 4), ("st3e", 5), ("st3", 6), ("smc", 7), ("st4", 8), ("dus", 9), ("prc", 10), ("ssua", 11), ("ssub", 12), ("sec", 13), ("dnu", 14), ("inv", 15), ("pno", 16), ("eec1", 17), ("eec2", 18), ("failed", 19),)

class TmnxRefInState(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,)
    namedValues = NamedValues(("disabled", 0), ("unqualified", 1), ("standby", 2), ("up", 3), ("previousFailure", 4), ("lowQuality", 5), ("lof", 6), ("ais", 7), ("ghost", 8), ("validating", 9), ("reserved-10", 10), ("reserved-11", 11), ("reserved-12", 12), ("fer", 13), ("reserved-14", 14), ("reserved-15", 15), ("reserved-16", 16), ("ptpAdminDisabled", 17), ("ptpOperDown", 18), ("ptpNoParentClock", 19),)

class TmnxBITSOutSource(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("lineRef", 1), ("internalClock", 2),)

class TmnxCcagId(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(1,8),)
class TmnxCcagRate(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+ConstraintsUnion(ValueRangeConstraint(-1,-1),ValueRangeConstraint(0,100000000),)
class TmnxCcagRateOption(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(1, 2,)
    namedValues = NamedValues(("aggregate", 1), ("cca", 2),)

class TmnxChassisPemType(Integer32, TextualConvention):
    subtypeSpec = Integer32.subtypeSpec+SingleValueConstraint(0, 1, 2, 3, 4,)
    namedValues = NamedValues(("not-applicable", 0), ("unknown", 1), ("pem", 2), ("pem-3", 3), ("peq", 4),)

class TmnxCardSlotBitMap(Bits, TextualConvention):
    namedValues = NamedValues(("slot1", 0), ("slot2", 1), ("slot3", 2), ("slot4", 3), ("slot5", 4), ("slot6", 5), ("slot7", 6), ("slot8", 7), ("slot9", 8), ("slot10", 9), ("slot11", 10), ("slot12", 11), ("slot13", 12), ("slot14", 13), ("slot15", 14), ("slot16", 15),)

class TmnxTunnelGroupId(Unsigned32, TextualConvention):
    subtypeSpec = Unsigned32.subtypeSpec+ValueRangeConstraint(1,16)

class TmnxTunnelGroupIdOrZero(Unsigned32, TextualConvention):
    subtypeSpec = Unsigned32.subtypeSpec+ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(1,16),)
tmnxChassisTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1,32))).setMaxAccess("readonly")
tmnxChassisLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 2), TimeStamp()).setMaxAccess("readonly")
tmnxChassisTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3), )
tmnxChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"))
tmnxChassisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 1), TmnxChassisIndex())
tmnxChassisRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
tmnxChassisName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 3), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
tmnxChassisType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 4), TmnxChassisType()).setMaxAccess("readonly")
tmnxChassisLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 5), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
tmnxChassisCoordinates = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 6), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
tmnxChassisNumSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
tmnxChassisNumPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
tmnxChassisNumPwrSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 9), Unsigned32()).setMaxAccess("readonly")
tmnxChassisNumFanTrays = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 10), Unsigned32()).setMaxAccess("readonly")
tmnxChassisNumFans = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 11), Unsigned32()).setMaxAccess("readonly")
tmnxChassisCriticalLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 12), TmnxLEDState()).setMaxAccess("readonly")
tmnxChassisMajorLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 13), TmnxLEDState()).setMaxAccess("readonly")
tmnxChassisMinorLEDState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 14), TmnxLEDState()).setMaxAccess("readonly")
tmnxChassisBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 15), MacAddress()).setMaxAccess("readonly")
tmnxChassisCLLICode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 16), DisplayString()).setMaxAccess("readcreate")
tmnxChassisReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 17), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
tmnxChassisUpgrade = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 18), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
tmnxChassisAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 19), TmnxChassisMode().clone('modeA')).setMaxAccess("readcreate")
tmnxChassisOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 20), TmnxChassisMode()).setMaxAccess("readonly")
tmnxChassisModeForce = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 21), TmnxActionType().clone('notApplicable')).setMaxAccess("readcreate")
tmnxChassisUpdateWaitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(15,600)).clone(15)).setUnits('seconds').setMaxAccess("readcreate")
tmnxChassisUpdateTimeLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 23), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
tmnxChassisOverTempState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("stateOk", 1), ("stateOverTemp", 2),))).setMaxAccess("readonly")
tmnxChassisMixedModeIomAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 25), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
tmnxChassisMixedModeIomUpgrList = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 26), Bits().clone(namedValues=NamedValues(("iomSlot1", 0), ("iomSlot2", 1), ("iomSlot3", 2), ("iomSlot4", 3), ("iomSlot5", 4), ("iomSlot6", 5), ("iomSlot7", 6), ("iomSlot8", 7), ("iomSlot9", 8), ("iomSlot10", 9),))).setMaxAccess("readcreate")
tmnxChassisRedForcedSingleSfm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 3, 1, 27), TruthValue().clone('false')).setMaxAccess("readcreate")
tmnxChassisFanTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4), )
tmnxChassisFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisFanIndex"))
tmnxChassisFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,31)))
tmnxChassisFanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
tmnxChassisFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4,)).clone(namedValues=NamedValues(("notApplicable", 0), ("unknown", 1), ("halfSpeed", 2), ("fullSpeed", 3), ("lowSpeed", 4),))).setMaxAccess("readonly")
tmnxChassisFanRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("unknown", 0), ("fan1", 1), ("hfFan2", 2),))).setMaxAccess("readonly")
tmnxChassisPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5), )
tmnxChassisPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyId"))
tmnxChassisPowerSupplyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,31)))
tmnxChassisPowerSupplyACStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
tmnxChassisPowerSupplyDCStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 3), TmnxDeviceState()).setMaxAccess("readonly")
tmnxChassisPowerSupplyTempStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 4), TmnxDeviceState()).setMaxAccess("readonly")
tmnxChassisPowerSupplyTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 5), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
tmnxChassisPowerSupply1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 6), TmnxDeviceState()).setMaxAccess("readonly")
tmnxChassisPowerSupply2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 7), TmnxDeviceState()).setMaxAccess("readonly")
tmnxChassisPowerSupplyAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4,)).clone(namedValues=NamedValues(("none", 0), ("dc", 1), ("acSingle", 2), ("acMultiple", 3), ("default", 4),)).clone('default')).setMaxAccess("readcreate")
tmnxChassisPowerSupplyInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 9), TmnxDeviceState()).setMaxAccess("readonly")
tmnxChassisPowerSupplyOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 10), TmnxDeviceState()).setMaxAccess("readonly")
tmnxChassisPowerSupplyPemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 5, 1, 11), TmnxChassisPemType()).setMaxAccess("readonly")
tmnxChassisTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6), )
tmnxChassisTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisTypeIndex"))
tmnxChassisTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 1), TmnxChassisType())
tmnxChassisTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
tmnxChassisTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 3), TItemDescription()).setMaxAccess("readonly")
tmnxChassisTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 6, 1, 4), TruthValue()).setMaxAccess("readonly")
tmnxHwLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 7), TimeStamp()).setMaxAccess("readonly")
tmnxHwTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8), )
tmnxHwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxHwIndex"))
tmnxHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 1), TmnxHwIndex())
tmnxHwID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 2), RowPointer()).setMaxAccess("readonly")
tmnxHwMfgString = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,253))).setMaxAccess("readonly")
tmnxHwMfgBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
tmnxHwSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
tmnxHwManufactureDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(8,8)).setFixedLength(8)).setMaxAccess("readonly")
tmnxHwClass = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 7), TmnxHwClass()).setMaxAccess("readonly")
tmnxHwName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 8), TNamedItemOrEmpty()).setMaxAccess("readonly")
tmnxHwAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 9), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
tmnxHwAssetID = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 10), SnmpAdminString().clone(hexValue="")).setMaxAccess("readwrite")
tmnxHwCLEI = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(10,10)).setFixedLength(10)).setMaxAccess("readonly")
tmnxHwIsFRU = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 12), TruthValue()).setMaxAccess("readonly")
tmnxHwContainedIn = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,2147483647))).setMaxAccess("readonly")
tmnxHwParentRelPos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1,2147483647))).setMaxAccess("readonly")
tmnxHwAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("noop", 1), ("inService", 2), ("outOfService", 3), ("diagnose", 4), ("operateSwitch", 5),)).clone('noop')).setMaxAccess("readwrite")
tmnxHwOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,)).clone(namedValues=NamedValues(("unknown", 1), ("inService", 2), ("outOfService", 3), ("diagnosing", 4), ("failed", 5), ("booting", 6), ("empty", 7), ("provisioned", 8), ("unprovisioned", 9), ("upgrade", 10), ("downgrade", 11), ("inServiceUpgrade", 12), ("inServiceDowngrade", 13), ("resetPending", 14), ("softReset", 15),))).setMaxAccess("readonly")
tmnxHwTempSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 17), TruthValue()).setMaxAccess("readonly")
tmnxHwTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 18), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
tmnxHwTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 19), Integer32()).setUnits('degrees celsius').setMaxAccess("readonly")
tmnxHwBootCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 20), DisplayString()).setMaxAccess("readonly")
tmnxHwSoftwareCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 21), DisplayString()).setMaxAccess("readonly")
tmnxHwSwLastBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 22), DateAndTime()).setMaxAccess("readonly")
tmnxHwSwState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 23), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7,)).clone(namedValues=NamedValues(("unknown", 0), ("hwFailure", 1), ("swFailure", 2), ("hwInitting", 3), ("swDownloading", 4), ("swInitting", 5), ("swInitted", 6), ("swRunning", 7),))).setMaxAccess("readonly")
tmnxHwAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 24), TmnxAlarmState()).setMaxAccess("readonly")
tmnxHwLastAlarmEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 25), RowPointer()).setMaxAccess("readonly")
tmnxHwClearAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 26), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
tmnxHwSwImageSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("secondary", 2), ("tertiary", 3),))).setMaxAccess("readonly")
tmnxHwMfgDeviations = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 28), SnmpAdminString()).setMaxAccess("readonly")
tmnxHwBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 29), MacAddress()).setMaxAccess("readonly")
tmnxHwFailureReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 30), DisplayString()).setMaxAccess("readonly")
tmnxHwEquippedPlatform = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 31), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("pfUnknown", 0), ("pf7750", 1), ("pf7450", 2), ("pf7710", 3),))).setMaxAccess("readonly")
tmnxHwMfgAssemblyNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,32))).setMaxAccess("readonly")
tmnxHwFirmwareCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 8, 1, 33), DisplayString()).setMaxAccess("readonly")
tmnxHwContainsTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9), )
tmnxHwContainsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxHwIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"))
tmnxHwContainedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 9, 1, 1), TmnxHwIndex()).setMaxAccess("readonly")
tmnxCcmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10), )
tmnxCcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcmIndex"))
tmnxCcmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,8)))
tmnxCcmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
tmnxCcmHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 3), TmnxHwIndex()).setMaxAccess("readonly")
tmnxCcmEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 10, 1, 4), TmnxCcmType()).setMaxAccess("readonly")
tmnxCcmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11), )
tmnxCcmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcmTypeIndex"))
tmnxCcmTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 1), TmnxCcmType())
tmnxCcmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
tmnxCcmTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 3), TItemDescription()).setMaxAccess("readonly")
tmnxCcmTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 11, 1, 4), TruthValue()).setMaxAccess("readonly")
tmnxFanTrayComponentTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12), )
tmnxFanTrayComponentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxChassisFanIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFanTrayCompIndex"))
tmnxFanTrayCompIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12, 1, 1), Unsigned32())
tmnxFanTrayCompSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 12, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0,100))).setUnits('percent').setMaxAccess("readonly")
tmnxHwResourceTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13), )
tmnxHwResourceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxHwIndex"))
tmnxHwResourceCurrentVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
tmnxHwResourcePeakVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 2), Integer32()).setMaxAccess("readonly")
tmnxHwResourcePeakVoltageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 3), TimeStamp()).setMaxAccess("readonly")
tmnxHwResourceMinVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 4), Integer32()).setMaxAccess("readonly")
tmnxHwResourceMinVoltageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 5), TimeStamp()).setMaxAccess("readonly")
tmnxHwResourceCurrentWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
tmnxHwResourcePeakWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
tmnxHwResourcePeakWattageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 8), TimeStamp()).setMaxAccess("readonly")
tmnxHwResourceMinWattage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
tmnxHwResourceMinWattageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 10), TimeStamp()).setMaxAccess("readonly")
tmnxHwResourceCurrentAmperage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 11), Integer32()).setMaxAccess("readonly")
tmnxHwResourcePeakAmperage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 12), Integer32()).setMaxAccess("readonly")
tmnxHwResourcePeakAmperageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 13), TimeStamp()).setMaxAccess("readonly")
tmnxHwResourceMinAmperage = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 14), Integer32()).setMaxAccess("readonly")
tmnxHwResourceMinAmperageTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 1, 13, 1, 15), TimeStamp()).setMaxAccess("readonly")
tmnxCardLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 1), TimeStamp()).setMaxAccess("readonly")
tmnxCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2), )
tmnxCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"))
tmnxCardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 1), TmnxSlotNum())
tmnxCardSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 2), TmnxCardSuppType()).setMaxAccess("readonly")
tmnxCardAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 3), TmnxCardType()).setMaxAccess("readwrite")
tmnxCardAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 4), TmnxCardType().clone(1)).setMaxAccess("readwrite")
tmnxCardEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 5), TmnxCardType()).setMaxAccess("readonly")
tmnxCardHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 6), TmnxHwIndex()).setMaxAccess("readonly")
tmnxCardClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 10), TItemDescription()).setMaxAccess("readonly")
tmnxCardNumMdaSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readonly")
tmnxCardNumMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
tmnxCardReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 13), TmnxCardRebootType().clone('notApplicable')).setMaxAccess("readwrite")
tmnxCardMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 14), Unsigned32()).setUnits('Mega-bytes').setMaxAccess("readonly")
tmnxCardNamedPoolAdminMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 15), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
tmnxCardNamedPoolOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 16), TmnxAdminState().clone('outOfService')).setMaxAccess("readonly")
tmnxCardSoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 17), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
tmnxCardLastBootupReason = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,)).clone(namedValues=NamedValues(("hardReboot", 0), ("softReset", 1), ("powerCycle", 2), ("clearCard", 3), ("activitySwitch", 4), ("configChange", 5), ("runtimeFail", 6), ("bootFail", 7), ("unexpected", 8), ("issuTimeout", 9), ("reinserted", 10), ("issuHardReboot", 11), ("ccmFail", 12),))).setMaxAccess("readonly")
tmnxCardCmplx1IngrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 19), Counter32()).setMaxAccess("readonly")
tmnxCardCmplx1IngrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 20), TimeStamp()).setMaxAccess("readonly")
tmnxCardCmplx1EgrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 21), Counter32()).setMaxAccess("readonly")
tmnxCardCmplx1EgrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 22), TimeStamp()).setMaxAccess("readonly")
tmnxCardCmplx2IngrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 23), Counter32()).setMaxAccess("readonly")
tmnxCardCmplx2IngrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 24), TimeStamp()).setMaxAccess("readonly")
tmnxCardCmplx2EgrFcsOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
tmnxCardCmplx2EgrFcsOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 26), TimeStamp()).setMaxAccess("readonly")
tmnxCardCmplx1MemParityOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 27), Counter32()).setMaxAccess("readonly")
tmnxCardCmplx1MemParityOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 28), TimeStamp()).setMaxAccess("readonly")
tmnxCardCmplx2MemParityOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
tmnxCardCmplx2MemParityOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 30), TimeStamp()).setMaxAccess("readonly")
tmnxCardCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 31), Bits().clone(namedValues=NamedValues(("sr", 0),))).setMaxAccess("readwrite")
tmnxCardCmplx1CAMErrorOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 32), Counter32()).setMaxAccess("readonly")
tmnxCardCmplx1CAMErrorOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 33), TimeStamp()).setMaxAccess("readonly")
tmnxCardCmplx2CAMErrorOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 34), Counter32()).setMaxAccess("readonly")
tmnxCardCmplx2CAMErrorOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 35), TimeStamp()).setMaxAccess("readonly")
tmnxCardFailOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 36), Bits().clone(namedValues=NamedValues(("memoryEventGroupA", 0),))).setMaxAccess("readwrite")
tmnxCardCmplx1EgrFcsSrcSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 37), TmnxCardSlotBitMap()).setMaxAccess("readonly")
tmnxCardCmplx2EgrFcsSrcSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 38), TmnxCardSlotBitMap()).setMaxAccess("readonly")
tmnxCardHardResetUnsupMdas = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 2, 1, 39), TruthValue().clone('false')).setMaxAccess("readwrite")
tmnxCpmCardLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 3), TimeStamp()).setMaxAccess("readonly")
tmnxCpmCardTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4), )
tmnxCpmCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardNum"))
tmnxCpmCardSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 1), TmnxSlotNum())
tmnxCpmCardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 2), Unsigned32())
tmnxCpmCardSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 3), TmnxCardSuppType()).setMaxAccess("readonly")
tmnxCpmCardAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 4), TmnxCardType()).setMaxAccess("readwrite")
tmnxCpmCardAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 5), TmnxCardType().clone(1)).setMaxAccess("readwrite")
tmnxCpmCardEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 6), TmnxCardType()).setMaxAccess("readonly")
tmnxCpmCardHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 7), TmnxHwIndex()).setMaxAccess("readonly")
tmnxCpmCardBootOptionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 8), TItemDescription()).setMaxAccess("readonly")
tmnxCpmCardBootOptionLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 9), DateAndTime()).setMaxAccess("readonly")
tmnxCpmCardConfigBootedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 10), TItemDescription()).setMaxAccess("readonly")
tmnxCpmCardIndexBootedVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 11), TItemDescription()).setMaxAccess("readonly")
tmnxCpmCardConfigLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 12), DateAndTime()).setMaxAccess("readonly")
tmnxCpmCardConfigLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 13), DateAndTime()).setMaxAccess("readonly")
tmnxCpmCardRedundant = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("singleton", 1), ("redundantActive", 2), ("redundantStandby", 3), ("redundantSplit", 4), ("redundantDisabled", 5), ("redundantSyncing", 6),))).setMaxAccess("readonly")
tmnxCpmCardClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 15), TItemDescription()).setMaxAccess("readonly")
tmnxCpmCardNumCpus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 16), Unsigned32()).setMaxAccess("readonly")
tmnxCpmCardCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 1), ("mips", 2), ("pentium-pc", 3),))).setMaxAccess("readonly")
tmnxCpmCardMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 18), Unsigned32()).setUnits('Mega-bytes').setMaxAccess("readonly")
tmnxCpmCardSwitchToRedundantCard = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
tmnxCpmCardReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 20), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
tmnxCpmCardRereadBootOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 21), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
tmnxCpmCardConfigFileLastBooted = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 22), DisplayString()).setMaxAccess("readonly")
tmnxCpmCardConfigFileLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 23), DisplayString()).setMaxAccess("readonly")
tmnxCpmCardConfigFileLastBootedHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,512))).setMaxAccess("readonly")
tmnxCpmCardIndexFileLastBootedHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0,512))).setMaxAccess("readonly")
tmnxCpmCardBootOptionSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 26), DisplayString()).setMaxAccess("readonly")
tmnxCpmCardConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("secondary", 2), ("tertiary", 3),))).setMaxAccess("readonly")
tmnxCpmCardBootOptionLastSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 28), DateAndTime()).setMaxAccess("readonly")
tmnxCpmCardMasterSlaveRefState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("primaryRef", 1), ("secondaryRef", 2), ("notInitialized", 3),))).setMaxAccess("readonly")
tmnxCpmCardConfigUserLastModified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 31), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0,64))).setMaxAccess("readonly")
tmnxCpmCardCmplxCAMErrOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 32), Counter32()).setMaxAccess("readonly")
tmnxCpmCardCmplxCAMErrOccurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 33), TimeStamp()).setMaxAccess("readonly")
tmnxCpmCardOscillatorType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 4, 1, 34), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("none", 1), ("tcxo", 2), ("ocxo", 3),))).setMaxAccess("readonly")
tmnxFabricLastChange = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 5), TimeStamp()).setMaxAccess("readonly")
tmnxFabricTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6), )
tmnxFabricEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFabricSlotNum"))
tmnxFabricSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,16)))
tmnxFabricAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 2), TmnxFabricType().clone(2)).setMaxAccess("readwrite")
tmnxFabricEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 3), TmnxFabricType()).setMaxAccess("readonly")
tmnxFabricHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 4), TmnxHwIndex()).setMaxAccess("readonly")
tmnxFabricSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 5), TmnxFabricSuppType()).setMaxAccess("readonly")
tmnxFabricReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 6, 1, 6), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
tmnxCpmFlashTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7), )
tmnxCpmFlashEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmFlashId"))
tmnxCpmFlashId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,32)))
tmnxCpmFlashOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 2), TmnxDeviceState()).setMaxAccess("readonly")
tmnxCpmFlashSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 3), TItemDescription()).setMaxAccess("readonly")
tmnxCpmFlashFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 4), TItemDescription()).setMaxAccess("readonly")
tmnxCpmFlashModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 5), TItemDescription()).setMaxAccess("readonly")
tmnxCpmFlashCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 6), Unsigned32()).setUnits('sectors').setMaxAccess("readonly")
tmnxCpmFlashUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 7), Unsigned32()).setUnits('sectors').setMaxAccess("readonly")
tmnxCpmFlashHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 7, 1, 8), TmnxHwIndex()).setMaxAccess("readonly")
tmnxMDATable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8), )
tmnxMDAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
tmnxMDASlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,16)))
tmnxMDASupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 2), TmnxMDASuppType()).setMaxAccess("readonly")
tmnxMDAAllowedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 3), TmnxMdaType()).setMaxAccess("readwrite")
tmnxMDAAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 4), TmnxMdaType().clone(1)).setMaxAccess("readwrite")
tmnxMDAEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 5), TmnxMdaType()).setMaxAccess("readonly")
tmnxMDAHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 6), TmnxHwIndex()).setMaxAccess("readonly")
tmnxMDAMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,127))).setMaxAccess("readonly")
tmnxMDAEquippedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 8), Unsigned32()).setMaxAccess("readonly")
tmnxMDATxTimingSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 10), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5,)).clone(namedValues=NamedValues(("cpm-card-A", 1), ("cpm-card-B", 2), ("local", 3), ("holdover", 4), ("not-applicable", 5),))).setMaxAccess("readonly")
tmnxMDASyncIfTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 11), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("qualified", 1), ("not-qualified", 2), ("not-applicable", 3),))).setMaxAccess("readonly")
tmnxMDANetworkIngQueues = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 12), TNamedItem().clone('default')).setMaxAccess("readwrite")
tmnxMDACapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 13), Bits().clone(namedValues=NamedValues(("isEthernet", 0), ("isSonet", 1), ("isTDM", 2), ("supportsPPP", 3), ("supportsFR", 4), ("supportsATM", 5), ("supportscHDLC", 6), ("isCMA", 7), ("supportsCEM", 8),))).setMaxAccess("readonly")
tmnxMDAMinChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 14), TmnxMDAChanType()).setMaxAccess("readonly")
tmnxMDAMaxChannelization = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 15), TmnxMDAChanType()).setMaxAccess("readonly")
tmnxMDAMaxChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 16), Unsigned32()).setMaxAccess("readonly")
tmnxMDAChannelsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 17), Unsigned32()).setMaxAccess("readonly")
tmnxMDACcagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 18), TmnxCcagId()).setMaxAccess("readwrite")
tmnxMDAReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 19), TmnxActionType().clone('notApplicable')).setMaxAccess("readwrite")
tmnxMDAHiBwMcastSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 20), TruthValue().clone('false')).setMaxAccess("readwrite")
tmnxMDAHiBwMcastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 21), TruthValue().clone('true')).setMaxAccess("readwrite")
tmnxMDAHiBwMcastTapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 22), Gauge32()).setMaxAccess("readonly")
tmnxMDAHiBwMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,32))).setMaxAccess("readwrite")
tmnxMDAClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 24), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("notApplicable", 0), ("adaptive", 1), ("differential", 2),)).clone('notApplicable')).setMaxAccess("readwrite")
tmnxMDADiffTimestampFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 25), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(19440,19440),ValueRangeConstraint(77760,77760),ValueRangeConstraint(103680,103680),))).setUnits('kilohertz').setMaxAccess("readwrite")
tmnxMDAIngHsmdaSchedPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 26), TNamedItemOrEmpty()).setMaxAccess("readwrite")
tmnxMDAMcPathMgmtBwPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 27), TNamedItem().clone('default')).setMaxAccess("readwrite")
tmnxMDAMcPathMgmtPriPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 28), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(1,2000),))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
tmnxMDAMcPathMgmtSecPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 29), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(1,2000),))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
tmnxMDAMcPathMgmtAncPathLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 30), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0,0),ValueRangeConstraint(1,5000),))).setUnits('mega-bits-per-second').setMaxAccess("readwrite")
tmnxMDAMcPathMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 31), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
tmnxMDAIngNamedPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 32), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
tmnxMDAEgrNamedPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 33), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readwrite")
tmnxMDAIngHsmdaPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 34), TNamedItemOrEmpty()).setMaxAccess("readwrite")
tmnxMDAEgrHsmdaPoolPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 35), TNamedItemOrEmpty()).setMaxAccess("readwrite")
tmnxMDAMcPathMgmtPriInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 36), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
tmnxMDAMcPathMgmtSecInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 37), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
tmnxMDAMcPathMgmtAncInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 38), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
tmnxMDAMcPathMgmtBlkHoleInUseBw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 39), Gauge32()).setUnits('Kbps').setMaxAccess("readonly")
tmnxMDASynchronousEthernet = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 40), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2,)).clone(namedValues=NamedValues(("not-applicable", 0), ("enabled", 1), ("disabled", 2),)).clone('disabled')).setMaxAccess("readwrite")
tmnxMDAXplErrorTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 41), TimeStamp()).setMaxAccess("readonly")
tmnxMDAXplFailedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 42), Gauge32()).setMaxAccess("readonly")
tmnxMDAAtmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 43), TmnxMdaAtmMode()).setMaxAccess("readwrite")
tmnxMDAEgrHsmdaThrshLoBrstMult = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1,-1),ValueRangeConstraint(1,65536),)).clone(-1)).setUnits('bytes per megabit of rate').setMaxAccess("readwrite")
tmnxMDAEgrHsmdaThrshHiBrstInc = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1,-1),ValueRangeConstraint(0,65536),)).clone(-1)).setUnits('bytes').setMaxAccess("readwrite")
tmnxMDAIsaTunnelGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 46), TmnxTunnelGroupIdOrZero()).setMaxAccess("readwrite")
tmnxMDAIsaTunnelGroupInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 8, 1, 47), TruthValue()).setMaxAccess("readonly")
tmnxCardTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9), )
tmnxCardTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCardTypeIndex"))
tmnxCardTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 1), TmnxCardType())
tmnxCardTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
tmnxCardTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 3), TItemDescription()).setMaxAccess("readonly")
tmnxCardTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 9, 1, 4), TruthValue()).setMaxAccess("readonly")
tmnxMdaTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10), )
tmnxMdaTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxMdaTypeIndex"))
tmnxMdaTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 1), TmnxMdaType())
tmnxMdaTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
tmnxMdaTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 3), TItemDescription()).setMaxAccess("readonly")
tmnxMdaTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 10, 1, 4), TruthValue()).setMaxAccess("readonly")
tmnxSyncIfTimingTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11), )
tmnxSyncIfTimingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1), )
tmnxCpmCardEntry.registerAugmentions(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingEntry"))
tmnxSyncIfTimingEntry.setIndexNames(*tmnxCpmCardEntry.getIndexNames())
tmnxSyncIfTimingRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 1), TruthValue()).setMaxAccess("readonly")
tmnxSyncIfTimingRefOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 2), TmnxSETSRefSource()).setMaxAccess("readonly")
tmnxSyncIfTimingRefOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 3), TmnxSETSRefSource()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 4), TmnxPortID()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 5), TmnxPortAdminStatus()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 6), TruthValue()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 7), TmnxSETSRefQualified()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 8), TmnxSETSRefAlarm()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 9), TmnxPortID()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 10), TmnxPortAdminStatus()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 11), TruthValue()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 12), TmnxSETSRefQualified()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 13), TmnxSETSRefAlarm()).setMaxAccess("readonly")
tmnxSyncIfTimingFreqOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 14), Integer32()).setUnits('parts-per-million').setMaxAccess("readonly")
tmnxSyncIfTimingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("not-present", 1), ("master-freerun", 2), ("master-holdover", 3), ("master-locked", 4), ("slave", 5), ("acquiring", 6),))).setMaxAccess("readonly")
tmnxSyncIfTimingRefOrder3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 16), TmnxSETSRefSource()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 17), TmnxBITSIfType()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 18), TmnxPortAdminStatus()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 19), TruthValue()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSQualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 20), TmnxSETSRefQualified()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 21), TmnxSETSRefAlarm()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 22), TmnxHwIndexOrZero()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 23), TmnxBITSIfType()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 24), TmnxHwIndexOrZero()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 25), TmnxBITSIfType()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSOutAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 26), TmnxPortAdminStatus()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSOutLineLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 27), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("lengthNotApplicable", 0), ("length0To110", 1), ("length110To220", 2), ("length220To330", 3), ("length330To440", 4), ("length440To550", 5), ("length550To660", 6),))).setMaxAccess("readonly")
tmnxSyncIfTimingRef1CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 28), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1RxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 29), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 30), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2RxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 31), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 32), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSRxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 33), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingBITS2InUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 34), TruthValue()).setMaxAccess("readonly")
tmnxSyncIfTimingBITS2Qualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 35), TmnxSETSRefQualified()).setMaxAccess("readonly")
tmnxSyncIfTimingBITS2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 36), TmnxSETSRefAlarm()).setMaxAccess("readonly")
tmnxSyncIfTimingBITS2RxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 37), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 38), TmnxRefInState()).setMaxAccess("readonly")
tmnxSyncIfTimingRef2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 39), TmnxRefInState()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 40), TmnxRefInState()).setMaxAccess("readonly")
tmnxSyncIfTimingBITS2State = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 41), TmnxRefInState()).setMaxAccess("readonly")
tmnxSyncIfTimingRef1NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4,8)).clone(8)).setMaxAccess("readonly")
tmnxSyncIfTimingRef2NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4,8)).clone(8)).setMaxAccess("readonly")
tmnxSyncIfTimingBITSNationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4,8)).clone(8)).setMaxAccess("readonly")
tmnxSyncIfTimingQLSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 45), TmnxEnabledDisabled()).setMaxAccess("readonly")
tmnxSyncIfTimingOtherCPMInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 46), TruthValue().clone('false')).setMaxAccess("readonly")
tmnxSyncIfTimingOtherCPMQual = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 47), TmnxSETSRefQualified().clone('not-qualified')).setMaxAccess("readonly")
tmnxSyncIfTimingOtherCPMAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 48), TmnxSETSRefAlarm()).setMaxAccess("readonly")
tmnxSyncIfTimingOtherCPMState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 49), TmnxRefInState().clone('disabled')).setMaxAccess("readonly")
tmnxSyncIfTimingBITSOutRefSel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 50), TmnxSETSRefSource().clone('noReference')).setMaxAccess("readonly")
tmnxSyncIfTimingBITSTxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 51), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingBITS2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 52), TmnxPortAdminStatus()).setMaxAccess("readonly")
tmnxSyncIfTimingSystemQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 53), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingRefOrder4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 54), TmnxSETSRefSource()).setMaxAccess("readonly")
tmnxSyncIfTimingPTPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 55), TmnxPortAdminStatus()).setMaxAccess("readonly")
tmnxSyncIfTimingPTPInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 56), TruthValue()).setMaxAccess("readonly")
tmnxSyncIfTimingPTPQualified = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 57), TmnxSETSRefQualified()).setMaxAccess("readonly")
tmnxSyncIfTimingPTPAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 58), TmnxSETSRefAlarm()).setMaxAccess("readonly")
tmnxSyncIfTimingPTPCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 59), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingPTPRxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 60), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxSyncIfTimingPTPState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 61), TmnxRefInState()).setMaxAccess("readonly")
tmnxSyncIfTimingBITSOutSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 62), TmnxBITSOutSource()).setMaxAccess("readonly")
tmnxSyncIfTimingRefOrder5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 70), TmnxSETSRefSource()).setMaxAccess("readonly")
tmnxSyncIfTimingBITS2InAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 71), TmnxPortAdminStatus()).setMaxAccess("readonly")
tmnxSyncIfTimingBITS2OutAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 72), TmnxPortAdminStatus()).setMaxAccess("readonly")
tmnxSyncIfTimingBITS2TxQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 11, 1, 73), TmnxSSMQualityLevel()).setMaxAccess("readonly")
tmnxChassisAdminCtrlObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1))
tmnxChassisAdminValueObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2))
tSyncIfTimingAdmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1), )
tSyncIfTimingAdmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCpmCardNum"))
tSyncIfTimingAdmRevert = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readcreate")
tSyncIfTimingAdmRefOrder1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 2), TmnxSETSRefSource().clone('bits1')).setMaxAccess("readcreate")
tSyncIfTimingAdmRefOrder2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 3), TmnxSETSRefSource().clone('reference1')).setMaxAccess("readcreate")
tSyncIfTimingAdmRef1SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 4), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
tSyncIfTimingAdmRef1AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 5), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
tSyncIfTimingAdmRef2SrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 6), TmnxPortID().clone(503316480)).setMaxAccess("readcreate")
tSyncIfTimingAdmRef2AdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 7), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
tSyncIfTimingAdmChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
tSyncIfTimingAdmRefOrder3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 9), TmnxSETSRefSource().clone('reference2')).setMaxAccess("readcreate")
tSyncIfTimingAdmBITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 10), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
tSyncIfTimingAdmBITSAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 11), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
tSyncIfTimingAdmRef1SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 12), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
tSyncIfTimingAdmRef1BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 13), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
tSyncIfTimingAdmRef2SrcHw = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 14), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
tSyncIfTimingAdmRef2BITSIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 15), TmnxBITSIfType().clone('t1-esf')).setMaxAccess("readcreate")
tSyncIfTimingAdmBITSOutAdmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 16), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
tSyncIfTimingAdmBITSOutLineLen = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3, 4, 5, 6,)).clone(namedValues=NamedValues(("lengthNotApplicable", 0), ("length0To110", 1), ("length110To220", 2), ("length220To330", 3), ("length330To440", 4), ("length440To550", 5), ("length550To660", 6),)).clone('lengthNotApplicable')).setMaxAccess("readcreate")
tSyncIfTimingAdmRef1CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 18), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
tSyncIfTimingAdmRef2CfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 19), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
tSyncIfTimingAdmBITSCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 20), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
tSyncIfTimingAdmRef1NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4,8)).clone(8)).setMaxAccess("readcreate")
tSyncIfTimingAdmRef2NationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4,8)).clone(8)).setMaxAccess("readcreate")
tSyncIfTimingAdmBITSNationalUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4,8)).clone(8)).setMaxAccess("readcreate")
tSyncIfTimingAdmQLSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 24), TmnxEnabledDisabled().clone('disabled')).setMaxAccess("readcreate")
tSyncIfTimingAdmRefOrder4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 25), TmnxSETSRefSource().clone('ptp')).setMaxAccess("readcreate")
tSyncIfTimingAdmPTPAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 26), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
tSyncIfTimingAdmPTPCfgQltyLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 27), TmnxSSMQualityLevel().clone('unknown')).setMaxAccess("readcreate")
tSyncIfTimingAdmBITSOutSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 28), TmnxBITSOutSource().clone('internalClock')).setMaxAccess("readcreate")
tSyncIfTimingAdmRefOrder5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 50), TmnxSETSRefSource().clone('bits2')).setMaxAccess("readcreate")
tSyncIfTimingAdmBITS2InAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 51), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
tSyncIfTimingAdmBITS2OutAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 2, 1, 1, 52), TmnxPortAdminStatus().clone('outOfService')).setMaxAccess("readcreate")
tmnxChassisAdminOwner = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
tmnxChassisAdminControlApply = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("none", 1), ("initialize", 2), ("commit", 3),))).setMaxAccess("readwrite")
tmnxChassisAdminLastSetTimer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 3), TimeInterval()).setUnits('centiseconds').setMaxAccess("readonly")
tmnxChassisAdminLastSetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 8, 1, 4), TimeInterval().clone(180000)).setUnits('centiseconds').setMaxAccess("readwrite")
tmnxCcagTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12), )
tmnxCcagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcagId"))
tmnxCcagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 1), TmnxCcagId())
tmnxCcagRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
tmnxCcagLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 3), TimeStamp()).setMaxAccess("readonly")
tmnxCcagDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 4), DisplayString().clone(hexValue="")).setMaxAccess("readcreate")
tmnxCcagAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 5), TmnxAdminState().clone('inService')).setMaxAccess("readcreate")
tmnxCcagOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 6), TmnxOperState()).setMaxAccess("readonly")
tmnxCcagCcaRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 7), TmnxCcagRate().clone(-1)).setUnits('kilobits per second').setMaxAccess("readcreate")
tmnxCcagAccessAdaptQos = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 12, 1, 8), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("link", 1), ("distribute", 2),)).clone('distribute')).setMaxAccess("readcreate")
tmnxCcagPathTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13), )
tmnxCcagPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcagId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcagPathId"))
tmnxCcagPathId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("alpha", 1), ("beta", 2),)))
tmnxCcagPathLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 2), TimeStamp()).setMaxAccess("readonly")
tmnxCcagPathRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 3), TmnxCcagRate().clone(-1)).setUnits('kilobits per second').setMaxAccess("readcreate")
tmnxCcagPathRateOption = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 4), TmnxCcagRateOption().clone('aggregate')).setMaxAccess("readcreate")
tmnxCcagPathWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 13, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,100)).clone(50)).setMaxAccess("readcreate")
tmnxCcagPathCcTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14), )
tmnxCcagPathCcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxCcagId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcagPathId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcType"))
tmnxCcagPathCcType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("sapsap", 1), ("sapnet", 2), ("netsap", 3),)))
tmnxCcagPathCcLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 2), TimeStamp()).setMaxAccess("readonly")
tmnxCcagPathCcEgrPoolResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1,-1),ValueRangeConstraint(0,100),)).clone(-1)).setMaxAccess("readcreate")
tmnxCcagPathCcEgrPoolSlpPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 4), TNamedItem().clone('default')).setMaxAccess("readcreate")
tmnxCcagPathCcIngPoolResvCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1,-1),ValueRangeConstraint(0,100),)).clone(-1)).setMaxAccess("readcreate")
tmnxCcagPathCcIngPoolSlpPlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 6), TNamedItem().clone('default')).setMaxAccess("readcreate")
tmnxCcagPathCcAcctPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,99))).setMaxAccess("readcreate")
tmnxCcagPathCcCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
tmnxCcagPathCcQueuePlcy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 9), TNamedItem().clone('default')).setMaxAccess("readcreate")
tmnxCcagPathCcMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 10), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
tmnxCcagPathCcMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 11), Unsigned32()).setMaxAccess("readcreate")
tmnxCcagPathCcUserAssignedMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 12), TruthValue().clone('false')).setMaxAccess("readonly")
tmnxCcagPathCcHwMac = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 14, 1, 13), MacAddress()).setMaxAccess("readonly")
tmnxMcmTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15), )
tmnxMcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMcmSlotNum"))
tmnxMcmSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,16)))
tmnxMcmSupportedTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 2), TmnxMcmType()).setMaxAccess("readonly")
tmnxMcmAssignedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 3), TmnxMcmType().clone(1)).setMaxAccess("readwrite")
tmnxMcmEquippedType = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 4), TmnxMcmType()).setMaxAccess("readonly")
tmnxMcmHwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 15, 1, 5), TmnxHwIndex()).setMaxAccess("readonly")
tmnxMcmTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16), )
tmnxMcmTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxMcmTypeIndex"))
tmnxMcmTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 1), TmnxMcmType())
tmnxMcmTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
tmnxMcmTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 3), TItemDescription()).setMaxAccess("readonly")
tmnxMcmTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 16, 1, 4), TruthValue()).setMaxAccess("readonly")
tmnxIPsecIsaGrpTableLastChanged = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 17), TimeStamp()).setMaxAccess("readonly")
tmnxIPsecIsaGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18), )
tmnxIPsecIsaGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpId"))
tmnxIPsecIsaGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 1), TmnxTunnelGroupId())
tmnxIPsecIsaGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 2), RowStatus()).setMaxAccess("readcreate")
tmnxIPsecIsaGrpLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 3), TimeStamp()).setMaxAccess("readonly")
tmnxIPsecIsaGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 4), TItemDescription()).setMaxAccess("readcreate")
tmnxIPsecIsaGrpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 5), TmnxAdminState().clone('outOfService')).setMaxAccess("readcreate")
tmnxIPsecIsaGrpOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 6), TmnxOperState()).setMaxAccess("readonly")
tmnxIPsecIsaGrpIsaChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 7), TmnxChassisIndex().clone(1)).setMaxAccess("readcreate")
tmnxIPsecIsaGrpPrimaryIsa = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 8), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
tmnxIPsecIsaGrpBackupIsa = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 9), TmnxHwIndexOrZero()).setMaxAccess("readcreate")
tmnxIPsecIsaGrpActiveIsa = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 10), TmnxHwIndexOrZero()).setMaxAccess("readonly")
tmnxIPsecIsaGrpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 11), Unsigned32()).setMaxAccess("readonly")
tmnxIPsecIsaGrpMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 12), Unsigned32()).setMaxAccess("readonly")
tmnxIPsecIsaGrpTunnelReassembly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,5000))).setUnits('milli-seconds').setMaxAccess("readcreate")
tmnxIPsecIsaGrpOperFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 14), TmnxIpSecIsaOperFlags()).setMaxAccess("readonly")
tmnxIPsecIsaGrpMultiActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
tmnxIPsecIsaGrpActiveMda = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,16)).clone(1)).setMaxAccess("readcreate")
tmnxIPsecIsaGrpIpTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 17), Unsigned32()).setMaxAccess("readonly")
tmnxIPsecIsaGrpIpMaxTunnels = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 18, 1, 18), Unsigned32()).setMaxAccess("readonly")
tmnxHsmdaMdaSchOvrTblLastChangd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 19), TimeStamp()).setMaxAccess("readonly")
tmnxHsmdaMdaSchOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20), )
tmnxHsmdaMdaSchOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxMDASlotNum"))
tmnxHsmdaMdaSchOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 1), RowStatus()).setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 2), TimeStamp()).setMaxAccess("readonly")
tmnxHsmdaMdaSchOvrMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 3), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrGrp1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 4), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrGrp2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 5), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass1Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 6), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass1WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 7), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass2Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 8), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass2WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 9), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass3Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 10), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass3WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 11), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass4Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 12), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass4WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 13), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass5Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 14), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass5WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 15), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass6Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 16), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass6WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 17), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass7Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 18), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass7WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 19), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass8Rate = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 20), THsmdaPIRMRateOverride().clone(-2)).setUnits('Mbps').setMaxAccess("readcreate")
tmnxHsmdaMdaSchOvrClass8WtInGrp = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 20, 1, 21), THsmdaWeightOverride().clone(-2)).setMaxAccess("readcreate")
tmnxFPTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21), )
tmnxFPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"))
tmnxFPNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 1), Unsigned32())
tmnxFPMcPathMgmtBwPlcyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 2), TNamedItem().clone('default')).setMaxAccess("readwrite")
tmnxFPMcPathMgmtAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 3), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
tmnxFPLastChanged = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 4), TimeStamp()).setMaxAccess("readonly")
tmnxFPHiBwMcastSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
tmnxFPHiBwMcastAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
tmnxFPHiBwMcastTapCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 7), Gauge32()).setMaxAccess("readonly")
tmnxFPHiBwMcastGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,32))).setMaxAccess("readwrite")
tmnxFPWredBufAllocMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,9999)).clone(2500)).setUnits('Hundredths of a percent').setMaxAccess("readwrite")
tmnxFPWredBufAllocMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,9999)).clone(2500)).setUnits('Hundredths of a percent').setMaxAccess("readwrite")
tmnxFPWredResvCbsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,9999)).clone(2500)).setUnits('Hundredths of a percent').setMaxAccess("readwrite")
tmnxFPWredResvCbsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,9999)).clone(2500)).setUnits('Hundredths of a percent').setMaxAccess("readwrite")
tmnxFPWredSlopePolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 13), TNamedItemOrEmpty().clone('default')).setMaxAccess("readwrite")
tmnxFPWredAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 14), TmnxAdminState().clone('outOfService')).setMaxAccess("readwrite")
tmnxFPHiBwMcastDefaultPathsOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 21, 1, 15), TruthValue().clone('false')).setMaxAccess("readwrite")
tmnxFPAccIngQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 22), TimeStamp()).setMaxAccess("readonly")
tmnxFPAccIngQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23), )
tmnxFPAccIngQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"))
tmnxFPAccIngQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 1), TNamedItem())
tmnxFPAccIngQGrpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,65535)))
tmnxFPAccIngQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 3), RowStatus()).setMaxAccess("readcreate")
tmnxFPAccIngQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 4), TimeStamp()).setMaxAccess("readonly")
tmnxFPAccIngQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,99))).setMaxAccess("readcreate")
tmnxFPAccIngQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
tmnxFPAccIngQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 7), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
tmnxFPAccIngQGrpPolicerPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 23, 1, 8), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
tmnxFPNetIngQGrpTableLastChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 24), TimeStamp()).setMaxAccess("readonly")
tmnxFPNetIngQGrpTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25), )
tmnxFPNetIngQGrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"))
tmnxFPNetIngQGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 1), TNamedItem())
tmnxFPNetIngQGrpInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,65535)))
tmnxFPNetIngQGrpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 3), RowStatus()).setMaxAccess("readcreate")
tmnxFPNetIngQGrpLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 4), TimeStamp()).setMaxAccess("readonly")
tmnxFPNetIngQGrpAcctgPolId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0,99))).setMaxAccess("readcreate")
tmnxFPNetIngQGrpCollectStats = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
tmnxFPNetIngQGrpDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 7), TItemDescription().clone(hexValue="")).setMaxAccess("readcreate")
tmnxFPNetIngQGrpPolicerPol = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 25, 1, 8), TNamedItemOrEmpty().clone(hexValue="")).setMaxAccess("readcreate")
tmnxFPNetIngQGrpPStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27), )
tmnxFPNetIngQGrpPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpPStatPolicerId"))
tmnxFPNetIngQGrpPStatPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 1), TIngPolicerId())
tmnxFPNetIngQGrpPStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 2), TmnxIngPolicerStatMode()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 3), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 4), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 5), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 6), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 7), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 8), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 9), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 10), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 11), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 12), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 13), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 14), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 15), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 16), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 17), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 18), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 19), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 20), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 21), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 22), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStOffLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 23), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 24), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 25), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStDrpLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 26), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 27), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdInProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 28), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdInProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 29), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 30), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdOutProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 31), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdOutProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 32), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 33), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdInProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 34), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdInProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 35), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 36), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdOutProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 37), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStFwdOutProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 38), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStUncolPktsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 39), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStUncolPktsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 40), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStUncolPktsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 41), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStUncolOctsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 42), Counter64()).setMaxAccess("readonly")
tmnxFPNetIngQgPStUncolOctsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 43), Counter32()).setMaxAccess("readonly")
tmnxFPNetIngQgPStUncolOctsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 27, 1, 44), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQGrpPStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28), )
tmnxFPAccIngQGrpPStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpPStatPolicerId"))
tmnxFPAccIngQGrpPStatPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 1), TIngPolicerId())
tmnxFPAccIngQGrpPStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 2), TmnxIngPolicerStatMode()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 3), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 4), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 5), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpHPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 6), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpHPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 7), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpHPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 8), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 9), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 10), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 11), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpLPrioPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 12), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpLPrioPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 13), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpLPrioPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 14), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 15), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 16), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 17), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpHPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 18), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpHPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 19), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpHPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 20), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 21), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 22), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStOffLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 23), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpLPrioOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 24), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpLPrioOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 25), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStDrpLPrioOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 26), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdInProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 27), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdInProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 28), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdInProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 29), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdOutProfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 30), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdOutProfPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 31), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdOutProfPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 32), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdInProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 33), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdInProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 34), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdInProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 35), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdOutProfOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 36), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdOutProfOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 37), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStFwdOutProfOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 38), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStUncolPktsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 39), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStUncolPktsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 40), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStUncolPktsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 41), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStUncolOctsOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 42), Counter64()).setMaxAccess("readonly")
tmnxFPAccIngQgPStUncolOctsOffL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 43), Counter32()).setMaxAccess("readonly")
tmnxFPAccIngQgPStUncolOctsOffH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 28, 1, 44), Counter32()).setMaxAccess("readonly")
tFPAccIngQGrpPlcrOvrTblLstChgd = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 29), TimeStamp()).setMaxAccess("readonly")
tFPAccIngQGrpPlcrOvrTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30), )
tFPAccIngQGrpPlcrOvrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrPolicerId"))
tFPAccIngQGrpPlcrOvrPolicerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 1), TIngPolicerId())
tFPAccIngQGrpPlcrOvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 2), RowStatus()).setMaxAccess("readcreate")
tFPAccIngQGrpPlcrOvrLastChgd = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 3), TimeStamp()).setMaxAccess("readonly")
tFPAccIngQGrpPlcrOvrAdminPIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 4), THPolPIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
tFPAccIngQGrpPlcrOvrAdminCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 5), THPolCIRRateOverride().clone(-2)).setUnits('kbps').setMaxAccess("readcreate")
tFPAccIngQGrpPlcrOvrStatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 6), TmnxIngPolicerStatModeOverride().clone('noOverride')).setMaxAccess("readcreate")
tFPAccIngQGrpPlcrOvrMBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 7), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
tFPAccIngQGrpPlcrOvrCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 8), TPlcrBurstSizeBytesOverride().clone(-2)).setUnits('bytes').setMaxAccess("readcreate")
tFPAccIngQGrpPlcrOvrPktOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 30, 1, 9), TPerPacketOffsetOvr().clone(-128)).setUnits('bytes').setMaxAccess("readcreate")
tFPAccIngQGrpArbitStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31), )
tFPAccIngQGrpArbitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatName"))
tFPAccIngQGrpArbitStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 1), TNamedItem())
tFPAccIngQGrpArbitStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 2), Counter64()).setMaxAccess("readonly")
tFPAccIngQGrpArbitStatFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 3), Counter32()).setMaxAccess("readonly")
tFPAccIngQGrpArbitStatFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 4), Counter32()).setMaxAccess("readonly")
tFPAccIngQGrpArbitStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 5), Counter64()).setMaxAccess("readonly")
tFPAccIngQGrpArbitStatFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 6), Counter32()).setMaxAccess("readonly")
tFPAccIngQGrpArbitStatFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 31, 1, 7), Counter32()).setMaxAccess("readonly")
tFPNetIngQGrpArbitStatTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32), )
tFPNetIngQGrpArbitStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxChassisIndex"), (0, "TIMETRA-CHASSIS-MIB", "tmnxCardSlotNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNum"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpName"), (0, "TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpInstanceId"), (0, "TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatName"))
tFPNetIngQGrpArbitStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 1), TNamedItem())
tFPNetIngQGrpArbitStatFwdPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 2), Counter64()).setMaxAccess("readonly")
tFPNetIngQGrpArbitStatFwdPktsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 3), Counter32()).setMaxAccess("readonly")
tFPNetIngQGrpArbitStatFwdPktsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 4), Counter32()).setMaxAccess("readonly")
tFPNetIngQGrpArbitStatFwdOcts = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 5), Counter64()).setMaxAccess("readonly")
tFPNetIngQGrpArbitStatFwdOctsL = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 6), Counter32()).setMaxAccess("readonly")
tFPNetIngQGrpArbitStatFwdOctsH = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 32, 1, 7), Counter32()).setMaxAccess("readonly")
tmnxVirtualSchedulerAdjTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33), )
tmnxVirtualSchedulerAdjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1), )
tmnxCardEntry.registerAugmentions(("TIMETRA-CHASSIS-MIB", "tmnxVirtualSchedulerAdjEntry"))
tmnxVirtualSchedulerAdjEntry.setIndexNames(*tmnxCardEntry.getIndexNames())
tmnxCardRateCalcFastQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
tmnxCardRateCalcSlowQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
tmnxCardSchedRun = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
tmnxCardTaskScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1,100000)).clone(10000)).setUnits('thousandths of a percent').setMaxAccess("readwrite")
tmnxCardSlowQueueThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0,1000000)).clone(1000)).setUnits('kbps').setMaxAccess("readwrite")
tmnxFabricTypeTable = MibTable((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26), )
tmnxFabricTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1), ).setIndexNames((0, "TIMETRA-CHASSIS-MIB", "tmnxFabricTypeIndex"))
tmnxFabricTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 1), TmnxFabricType())
tmnxFabricTypeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 2), TNamedItemOrEmpty()).setMaxAccess("readonly")
tmnxFabricTypeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 3), TItemDescription()).setMaxAccess("readonly")
tmnxFabricTypeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 3, 26, 1, 4), TruthValue()).setMaxAccess("readonly")
tmnxEqNotificationRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 1), RowPointer()).setMaxAccess("accessiblefornotify")
tmnxEqTypeNotificationRow = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 2), RowPointer()).setMaxAccess("accessiblefornotify")
tmnxChassisNotifyChassisId = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 3), TmnxChassisIndex()).setMaxAccess("accessiblefornotify")
tmnxChassisNotifyHwIndex = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 4), TmnxHwIndex()).setMaxAccess("accessiblefornotify")
tmnxRedSecondaryCPMStatus = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 5), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("online", 1), ("offline", 2), ("fail", 3),))).setMaxAccess("accessiblefornotify")
tmnxChassisNotifyOID = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 6), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
tmnxSyncIfTimingNotifyAlarm = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 7), Integer32().subtype(subtypeSpec=SingleValueConstraint(0, 1, 2, 3,)).clone(namedValues=NamedValues(("notUsed", 0), ("los", 1), ("oof", 2), ("oopir", 3),))).setMaxAccess("accessiblefornotify")
tmnxChassisNotifyMismatchedVer = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 8), DisplayString()).setMaxAccess("accessiblefornotify")
tmnxChassisNotifySoftwareLocation = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 9), DisplayString()).setMaxAccess("accessiblefornotify")
tmnxChassisNotifyCardFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 10), DisplayString()).setMaxAccess("accessiblefornotify")
tmnxChassisNotifyCardName = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1,32))).setMaxAccess("accessiblefornotify")
tmnxChassisNotifyCardSyncFile = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 12), DisplayString()).setMaxAccess("accessiblefornotify")
tmnxCardComplexNumber = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
tmnxCardFwdDirection = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 14), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2,)).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2),))).setMaxAccess("accessiblefornotify")
tmnxCardSoftResetState = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 15), Integer32().subtype(subtypeSpec=SingleValueConstraint(1, 2, 3,)).clone(namedValues=NamedValues(("initiated", 1), ("aborted", 2), ("complete", 3),))).setMaxAccess("accessiblefornotify")
tmnxMdaNotifyType = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 16), TmnxMdaType()).setMaxAccess("accessiblefornotify")
tmnxCardSrcSlotBitmap = MibScalar((1, 3, 6, 1, 4, 1, 6527, 3, 1, 2, 2, 6, 17), TmnxCardSlotBitMap()).setMaxAccess("accessiblefornotify")
tmnxHwConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 1)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEnvTempTooHigh = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 2)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"),))
tmnxEqPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 3)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"),))
tmnxEqPowerSupplyInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 4)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEqPowerSupplyRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 5)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEqFanFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 6)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"),))
tmnxEqCardFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 7)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardFailureReason"),))
tmnxEqCardInserted = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 8)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"),))
tmnxEqCardRemoved = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 9)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"),))
tmnxEqWrongCard = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 10)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEqCpuFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 11)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEqMemoryFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 12)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEqBackdoorBusFailure = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 13)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"),))
tmnxPeSoftwareError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 14)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxPeSoftwareAbnormalHalt = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 15)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxPeSoftwareVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 16)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"),))
tmnxPeOutOfMemory = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 17)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxPeConfigurationError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 18)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxPeStorageProblem = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 19)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxPeCpuCyclesExceeded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 20)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxRedPrimaryCPMFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 21)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxRedSecondaryCPMStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 22)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatus"),))
tmnxRedRestoreSuccess = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 23)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxRedRestoreFail = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 24)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxChassisNotificationClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 25)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyOID"),))
tmnxEqSyncIfTimingHoldover = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 26)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEqSyncIfTimingHoldoverClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 27)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEqSyncIfTimingRef1Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 28)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxEqSyncIfTimingRef1AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 29)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxEqSyncIfTimingRef2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 30)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxEqSyncIfTimingRef2AlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 31)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxEqFlashDataLoss = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 32)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"),))
tmnxEqFlashDiskFull = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 33)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"),))
tmnxPeSoftwareLoadFailed = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 34)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifySoftwareLocation"),))
tmnxPeBootloaderVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 35)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"),))
tmnxPeBootromVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 36)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"),))
tmnxPeFPGAVersionMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 37)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"),))
tmnxEqSyncIfTimingBITSAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 38)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxEqSyncIfTimingBITSAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 39)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxEqCardFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 40)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxChassisUpgradeInProgress = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 41)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxChassisUpgradeComplete = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 42)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxChassisHiBwMcastAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 43)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEqMdaCfgNotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 44)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"),))
tmnxCpmCardSyncFileNotPresent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 45)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSyncFile"),))
tmnxEqMdaXplError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 46)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAXplFailedCount"),))
tmnxEqCardPChipError = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 47)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFwdDirection"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSrcSlotBitmap"),))
tmnxEqCardSoftResetAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 48)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSoftResetState"),))
tmnxEqMdaSyncENotCompatible = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 49)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"),))
tmnxIPsecIsaGrpActiveIsaChgd = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 50)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpPrimaryIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpBackupIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsa"),))
tmnxEqCardPChipMemoryEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 51)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"),))
tmnxIPsecIsaGrpUnableToSwitch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 52)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsa"),))
tmnxIPsecIsaGrpTnlLowWMark = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 53)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"),))
tmnxIPsecIsaGrpTnlHighWMark = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 54)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"),))
tmnxIPsecIsaGrpTnlMax = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 55)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"),))
tmnxEqSyncIfTimingRef1Quality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 56)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1RxQltyLevel"),))
tmnxEqSyncIfTimingRef2Quality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 57)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2RxQltyLevel"),))
tmnxEqSyncIfTimingBITSQuality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 58)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSRxQltyLevel"),))
tmnxEqSyncIfTimingBITS2Quality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 59)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2RxQltyLevel"),))
tmnxEqSyncIfTimingRefSwitch = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 60)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPInUse"),))
tmnxEqSyncIfTimingBITS2Alarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 61)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxEqSyncIfTimingBITS2AlarmClr = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 62)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxEqSyncIfTimingBITSOutRefChg = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 63)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutRefSel"),))
tmnxEqCardPChipCamEvent = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 64)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"),))
tmnxEqSyncIfTimingSystemQuality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 65)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingSystemQltyLevel"),))
tmnxEqHwEnhancedCapability = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 66)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"),))
tmnxEqSyncIfTimingPTPQuality = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 67)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPRxQltyLevel"),))
tmnxEqSyncIfTimingPTPAlarm = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 68)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxEqSyncIfTimingPTPAlarmClear = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 69)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"),))
tmnxPeFirmwareVersionWarning = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 70)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFirmwareCodeVersion"),))
tmnxMDAIsaTunnelGroupChange = NotificationType((1, 3, 6, 1, 4, 1, 6527, 3, 1, 3, 2, 1, 0, 71)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroup"),))
tmnxChassisCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1))
tmnxChassisGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2))
tmnxChassisV4v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 4)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"),))
tmnxChassisV5v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 6)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"),))
tmnxChassis7750V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 7)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v0Group"),))
tmnxChassis7450V6v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 8)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v0Group"),))
tmnxChassis7750V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 9)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"),))
tmnxChassis7450V6v1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 10)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"),))
tmnxChassis7750V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 11)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"),))
tmnxChassis7450V7v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 12)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"),))
tmnxChassis7x50V8v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 13)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"),))
tmnxChassisV9v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 14)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHsmdaV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"),))
tmnxChassisV10v0Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 15)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxAtmGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV9v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIpsecV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPQGrpV10v0R4Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaV10v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaHsmdaPoolV10v0Group"),))
tmnxChassisComp7710 = MibIdentifier((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5))
tmnxChassisComp7710V3v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 1)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"),))
tmnxChassisComp7710V5v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 2)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"),))
tmnxChassisComp7710V6v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 3)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV4v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v0Group"),))
tmnxChassisComp7710V6v1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 4)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"),))
tmnxChassisComp7710V7v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 5)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"),))
tmnxChassisComp7710V8v0 = ModuleCompliance((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 1, 5, 6)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710HwV3v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx77x0CESMDAV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnx7710SETSRefSrcHwV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV6v0NamedPoolPlcyGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaXplV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUserModV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV5v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardPchipV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCamErrorV6v1Group"), ("TIMETRA-CHASSIS-MIB", "tmnxCardV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecNotifV7v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncV6v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifV8v0Group"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHwV6v1Group"),))
tmnxChassisNotifyObjsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 4)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxEqNotificationRow"), ("TIMETRA-CHASSIS-MIB", "tmnxEqTypeNotificationRow"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyChassisId"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyOID"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingNotifyAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyMismatchedVer"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifySoftwareLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardFailureReason"),))
tmnxChassisNotifyObsoleteGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 7)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxHwConfigChange"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCpuFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMemoryFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqBackdoorBusFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareError"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareAbnormalHalt"), ("TIMETRA-CHASSIS-MIB", "tmnxPeOutOfMemory"), ("TIMETRA-CHASSIS-MIB", "tmnxPeConfigurationError"), ("TIMETRA-CHASSIS-MIB", "tmnxPeStorageProblem"), ("TIMETRA-CHASSIS-MIB", "tmnxPeCpuCyclesExceeded"), ("TIMETRA-CHASSIS-MIB", "tmnxRedSecondaryCPMStatusChange"), ("TIMETRA-CHASSIS-MIB", "tmnxRedRestoreSuccess"), ("TIMETRA-CHASSIS-MIB", "tmnxRedRestoreFail"),))
tmnxChassisV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 9)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisTotalNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCoordinates"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPwrSupplies"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFanTrays"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFans"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCriticalLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMajorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMinorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCLLICode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgrade"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisOperMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisModeForce"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateWaitTime"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateTimeLeft"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgString"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgBoardNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwManufactureDate"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlias"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAssetID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwCLEI"), ("TIMETRA-CHASSIS-MIB", "tmnxHwIsFRU"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIn"), ("TIMETRA-CHASSIS-MIB", "tmnxHwParentRelPos"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempSensor"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBootCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwLastBoot"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlarmState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastAlarmEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClearAlarms"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwImageSource"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgDeviations"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFailureReason"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"),))
tmnxMDAV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 10)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"),))
tmnxChassisObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 11)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxHwSwState"), ("TIMETRA-CHASSIS-MIB", "tmnxCardAllowedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardAllowedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAllowedTypes"),))
tmnxCardV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 12)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxCardAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCardEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCardHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCardClockSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCardNumMdaSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxCardNumMdas"), ("TIMETRA-CHASSIS-MIB", "tmnxCardReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCardMemorySize"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionLastModified"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigBootedVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardIndexBootedVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigLastModified"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigLastSaved"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRedundant"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardClockSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardNumCpus"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCpuType"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardMemorySize"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSwitchToRedundantCard"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardRereadBootOptions"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastBooted"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastSaved"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigFileLastBootedHeader"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardIndexFileLastBootedHeader"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigSource"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardBootOptionLastSaved"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashFirmwareRevision"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashModelNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashCapacity"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashUsed"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmFlashHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRevert"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder1"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder2"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1SrcPort"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1Qualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2SrcPort"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2Qualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingFreqOffset"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder3"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSIfType"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSQualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRevert"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder1"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder2"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1SrcPort"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2SrcPort"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmChanged"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder3"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSIfType"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminOwner"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminControlApply"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminLastSetTimer"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminLastSetTimeout"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2InAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2OutAdminStatus"),))
tmnxMDAV4v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 13)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastGroup"),))
tmnxChassisNotificationV4v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 14)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"),))
tmnx7710HwV3v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 15)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisOverTempState"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardMasterSlaveRefState"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcmTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMcmTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyInputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyOutputStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"),))
tmnxChassisV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 16)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisTotalNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisLocation"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCoordinates"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumPwrSupplies"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFanTrays"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNumFans"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCriticalLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMajorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMinorLEDState"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisCLLICode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgrade"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisOperMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisModeForce"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateTimeLeft"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisFanSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyACStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyDCStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply1Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupply2Status"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastChange"), ("TIMETRA-CHASSIS-MIB", "tmnxHwID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgString"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgBoardNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSerialNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxHwManufactureDate"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClass"), ("TIMETRA-CHASSIS-MIB", "tmnxHwName"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlias"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAssetID"), ("TIMETRA-CHASSIS-MIB", "tmnxHwCLEI"), ("TIMETRA-CHASSIS-MIB", "tmnxHwIsFRU"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIn"), ("TIMETRA-CHASSIS-MIB", "tmnxHwParentRelPos"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempSensor"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTemperature"), ("TIMETRA-CHASSIS-MIB", "tmnxHwTempThreshold"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBootCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSoftwareCodeVersion"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwLastBoot"), ("TIMETRA-CHASSIS-MIB", "tmnxHwAlarmState"), ("TIMETRA-CHASSIS-MIB", "tmnxHwLastAlarmEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxHwClearAlarms"), ("TIMETRA-CHASSIS-MIB", "tmnxHwSwImageSource"), ("TIMETRA-CHASSIS-MIB", "tmnxHwMfgDeviations"), ("TIMETRA-CHASSIS-MIB", "tmnxHwBaseMacAddress"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFailureReason"), ("TIMETRA-CHASSIS-MIB", "tmnxHwContainedIndex"),))
tmnxChassisV5v0ObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 17)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisUpdateWaitTime"),))
tmnx77x0CESMDAV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 18)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAClockMode"), ("TIMETRA-CHASSIS-MIB", "tmnxMDADiffTimestampFreq"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngNamedPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrNamedPoolPolicy"),))
tmnxIPsecIsaGrpV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 19)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTableLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpOperState"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIsaChassis"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpPrimaryIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpBackupIsa"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsa"),))
tmnxChassisNotificationV3v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 20)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"),))
tmnxChassisNotificationV6v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 21)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSyncFileNotPresent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"),))
tmnx7710SETSRefSrcHwV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 22)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1SrcHw"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1BITSIfType"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2SrcHw"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2BITSIfType"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1SrcHw"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1BITSIfType"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2SrcHw"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2BITSIfType"),))
tmnxChassisHsmdaV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 23)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaSchedPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrTblLastChangd"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrMaxRate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaPoolPolicy"),))
tmnxMDAMcPathMgmtV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 24)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBwPlcyName"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncPathLimit"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtPriInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtSecInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtAncInUseBw"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMcPathMgmtBlkHoleInUseBw"),))
tmnxCardV6v0NamedPoolPlcyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 25)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardNamedPoolAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxCardNamedPoolOperMode"),))
tmnxChassisNotifyObjsV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 26)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardName"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotifyCardSyncFile"),))
tmnxChassisV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 27)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisPowerSupplyPemType"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSoftReset"), ("TIMETRA-CHASSIS-MIB", "tmnxCardLastBootupReason"),))
tmnxFPMcPathMgmtV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 28)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtBwPlcyName"), ("TIMETRA-CHASSIS-MIB", "tmnxFPMcPathMgmtAdminState"), ("TIMETRA-CHASSIS-MIB", "tmnxFPLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxFPHiBwMcastDefaultPathsOnly"),))
tmnxMDAV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 29)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDASupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAAssignedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedType"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHwIndex"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEquippedPorts"), ("TIMETRA-CHASSIS-MIB", "tmnxMDATxTimingSelected"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASyncIfTimingStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDANetworkIngQueues"), ("TIMETRA-CHASSIS-MIB", "tmnxMDACapabilities"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMinChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannelization"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAMaxChannels"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAChannelsInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxMdaTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastSource"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastTapCount"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAHiBwMcastGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxMDASynchronousEthernet"),))
tmnxMDACcagV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 30)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDACcagId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagOperStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagCcaRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagAccessAdaptQos"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRate"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathRateOption"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathWeight"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcEgrPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolResvCbs"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcIngPoolSlpPlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcAcctPolicyId"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcQueuePlcy"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcMtu"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcHwMac"), ("TIMETRA-CHASSIS-MIB", "tmnxCcagPathCcUserAssignedMac"),))
tmnxMdaXplV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 31)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAXplErrorTime"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAXplFailedCount"),))
tmnxChassisNotifyObjsV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 32)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardComplexNumber"), ("TIMETRA-CHASSIS-MIB", "tmnxCardFwdDirection"),))
tmnxChassisNotificationV5v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 33)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"),))
tmnxChassisNotificationV6v1Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 34)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSyncFileNotPresent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardSoftResetAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipCamEvent"),))
tmnxChassisNotifyObjsV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 35)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardSoftResetState"),))
tmnxChassisNotificationV7v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 36)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxEnvTempTooHigh"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqPowerSupplyRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFanFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFailure"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardInserted"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardRemoved"), ("TIMETRA-CHASSIS-MIB", "tmnxEqWrongCard"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxRedPrimaryCPMFail"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisNotificationClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldover"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingHoldoverClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2AlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDataLoss"), ("TIMETRA-CHASSIS-MIB", "tmnxEqFlashDiskFull"), ("TIMETRA-CHASSIS-MIB", "tmnxPeSoftwareLoadFailed"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootloaderVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeBootromVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxPeFPGAVersionMismatch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSAlarmClear"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardFirmwareUpgraded"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeInProgress"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisUpgradeComplete"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisHiBwMcastAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaCfgNotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardSyncFileNotPresent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaXplError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipError"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardSoftResetAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqMdaSyncENotCompatible"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveIsaChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipMemoryEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpUnableToSwitch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqCardPChipCamEvent"), ("TIMETRA-CHASSIS-MIB", "tmnxEqHwEnhancedCapability"),))
tmnxChassisUserModV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 37)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardConfigUserLastModified"),))
tmnxCardPchipV5v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 38)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1IngrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1IngrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2IngrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2IngrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1MemParityOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1MemParityOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2MemParityOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2MemParityOccurTime"),))
tmnxFPWredV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 39)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxFPWredBufAllocMin"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredBufAllocMax"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredResvCbsMin"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredResvCbsMax"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredSlopePolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxFPWredAdminState"),))
tmnxChassisV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 40)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisFanRevision"),))
tmnxIPsecV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 41)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMaxTunnels"),))
tmnxIPsecNotifV7v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 42)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTnlLowWMark"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTnlHighWMark"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTnlMax"),))
tmnxSyncV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 43)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1State"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2State"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSState"),))
tmnxSyncIfTimingV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 44)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutAdmStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutLineLen"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1RxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2RxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSRxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2InUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2Qualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2RxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2State"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef1NationalUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRef2NationalUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSNationalUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingQLSelection"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMQual"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingOtherCPMState"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutRefSel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSTxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITS2AdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingSystemQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutAdmStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutLineLen"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2CfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef1NationalUse"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRef2NationalUse"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSNationalUse"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmQLSelection"),))
tmnxSyncIfTimingNotifV8v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 45)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef1Quality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRef2Quality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSQuality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITS2Quality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingRefSwitch"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITS2Alarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITS2AlarmClr"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingBITSOutRefChg"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingSystemQuality"),))
tmnxChassisV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 46)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxHwEquippedPlatform"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisRedForcedSingleSfm"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCapability"),))
tmnxChassisMixedModeIomV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 47)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomAdminMode"), ("TIMETRA-CHASSIS-MIB", "tmnxChassisMixedModeIomUpgrList"),))
tmnxCardCamErrorV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 48)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1CAMErrorOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1CAMErrorOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2CAMErrorOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2CAMErrorOccurTime"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxCAMErrOccur"), ("TIMETRA-CHASSIS-MIB", "tmnxCpmCardCmplxCAMErrOccurTime"),))
tmnxChassisV6v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 49)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardLastBootupReason"),))
tmnxCardV7v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 50)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardFailOnError"),))
tmnxAtmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 51)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAAtmMode"),))
tmnxChassisHwV6v1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 52)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxHwMfgAssemblyNumber"),))
tmnxChassisHwV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 53)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCpmCardOscillatorType"), ("TIMETRA-CHASSIS-MIB", "tmnxHwFirmwareCodeVersion"),))
tmnxSyncIfTimingV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 54)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder4"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPInUse"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPQualified"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPRxQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingPTPState"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingBITSOutSource"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder4"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmPTPAdminStatus"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmPTPCfgQltyLevel"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmBITSOutSource"), ("TIMETRA-CHASSIS-MIB", "tmnxSyncIfTimingRefOrder5"), ("TIMETRA-CHASSIS-MIB", "tSyncIfTimingAdmRefOrder5"),))
tmnxSyncIfTimingNotifyV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 55)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingPTPQuality"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingPTPAlarm"), ("TIMETRA-CHASSIS-MIB", "tmnxEqSyncIfTimingPTPAlarmClear"),))
tmnxChassisNotifyObjsV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 56)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMdaNotifyType"),))
tmnxMDAV9v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 57)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaThrshLoBrstMult"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaThrshHiBrstInc"),))
tmnxCardPchipV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 58)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx1EgrFcsSrcSlots"), ("TIMETRA-CHASSIS-MIB", "tmnxCardCmplx2EgrFcsSrcSlots"),))
tmnxChassisNotifyObjsV8v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 59)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardSrcSlotBitmap"),))
tmnxFPQGrpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 60)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpAcctgPolId"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpDescr"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpPolicerPol"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpTableLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpAcctgPolId"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpCollectStats"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpDescr"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpPolicerPol"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpTableLastChgd"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQGrpPStatMode"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStOffLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStDrpLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdInProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStFwdOutProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolPktsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolPktsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolPktsOffH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolOctsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolOctsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPNetIngQgPStUncolOctsOffH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQGrpPStatMode"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpHPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStOffLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStDrpLPrioOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfPkts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfPktsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfPktsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdInProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfOcts"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfOctsL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStFwdOutProfOctsH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolPktsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolPktsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolPktsOffH"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolOctsOff"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolOctsOffL"), ("TIMETRA-CHASSIS-MIB", "tmnxFPAccIngQgPStUncolOctsOffH"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdPkts"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdPktsL"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdPktsH"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdOcts"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdOctsL"), ("TIMETRA-CHASSIS-MIB", "tFPNetIngQGrpArbitStatFwdOctsH"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdPkts"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdPktsL"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdPktsH"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdOcts"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdOctsL"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpArbitStatFwdOctsH"),))
tmnxCardV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 61)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxCardHardResetUnsupMdas"), ("TIMETRA-CHASSIS-MIB", "tmnxCardRateCalcFastQueue"), ("TIMETRA-CHASSIS-MIB", "tmnxCardRateCalcSlowQueue"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSchedRun"), ("TIMETRA-CHASSIS-MIB", "tmnxCardTaskScheduling"), ("TIMETRA-CHASSIS-MIB", "tmnxCardSlowQueueThresh"),))
tmnxIpsecV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 62)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpTunnelReassembly"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpOperFlags"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIpTunnels"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpIpMaxTunnels"),))
tmnxChassisV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 63)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxFanTrayCompSpeed"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricSupportedTypes"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricReboot"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricTypeName"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricTypeDescription"), ("TIMETRA-CHASSIS-MIB", "tmnxFabricTypeStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceCurrentVoltage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakVoltage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakVoltageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinVoltage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinVoltageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceCurrentWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakWattageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinWattage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinWattageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceCurrentAmperage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakAmperage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourcePeakAmperageTime"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinAmperage"), ("TIMETRA-CHASSIS-MIB", "tmnxHwResourceMinAmperageTime"),))
tmnxChassisNotificationV9v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 64)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxPeFirmwareVersionWarning"),))
tmnxFPQGrpV10v0R4Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 65)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrTblLstChgd"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrLastChgd"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrAdminPIR"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrAdminCIR"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrStatMode"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrMBS"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrCBS"), ("TIMETRA-CHASSIS-MIB", "tFPAccIngQGrpPlcrOvrPktOffset"),))
tmnxMdaV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 66)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroup"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpMultiActive"), ("TIMETRA-CHASSIS-MIB", "tmnxIPsecIsaGrpActiveMda"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupInUse"),))
tmnxMdaObsoletedV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 67)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaSchedPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxMDAIngHsmdaPoolPolicy"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrTblLastChangd"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrRowStatus"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrLastChanged"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrMaxRate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrGrp2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass1WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass2WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass3WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass4WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass5WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass6WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass7WtInGrp"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8Rate"), ("TIMETRA-CHASSIS-MIB", "tmnxHsmdaMdaSchOvrClass8WtInGrp"),))
tmnxChassisNotifyV10v0Group = NotificationGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 69)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAIsaTunnelGroupChange"),))
tmnxMdaHsmdaPoolV10v0Group = ObjectGroup((1, 3, 6, 1, 4, 1, 6527, 3, 1, 1, 2, 1, 2, 70)).setObjects(*(("TIMETRA-CHASSIS-MIB", "tmnxMDAEgrHsmdaPoolPolicy"),))
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxFPNetIngQgPStFwdOutProfOctsL=tmnxFPNetIngQgPStFwdOutProfOctsL, tmnxRedPrimaryCPMFail=tmnxRedPrimaryCPMFail, tmnxPeSoftwareVersionMismatch=tmnxPeSoftwareVersionMismatch, tmnxChassisRowStatus=tmnxChassisRowStatus, tmnxFPAccIngQgPStUncolPktsOff=tmnxFPAccIngQgPStUncolPktsOff, tmnxEqSyncIfTimingBITSAlarm=tmnxEqSyncIfTimingBITSAlarm, tmnxSyncIfTimingBITSOutLineLen=tmnxSyncIfTimingBITSOutLineLen, tmnxFPNetIngQGrpPStatEntry=tmnxFPNetIngQGrpPStatEntry, tmnxChassisNotifyObsoleteGroup=tmnxChassisNotifyObsoleteGroup, tmnxFPAccIngQGrpInstanceId=tmnxFPAccIngQGrpInstanceId, tmnxFPNetIngQgPStDrpLPrioOctsH=tmnxFPNetIngQgPStDrpLPrioOctsH, tmnxSyncIfTimingRef2State=tmnxSyncIfTimingRef2State, tmnxFPNetIngQgPStDrpHPrioPktsH=tmnxFPNetIngQgPStDrpHPrioPktsH, tmnxChassisPowerSupplyEntry=tmnxChassisPowerSupplyEntry, tmnxHwSwLastBoot=tmnxHwSwLastBoot, tmnxCardCmplx2IngrFcsOccur=tmnxCardCmplx2IngrFcsOccur, tmnxFanTrayComponentTable=tmnxFanTrayComponentTable, tmnxPeSoftwareAbnormalHalt=tmnxPeSoftwareAbnormalHalt, TmnxSlotNum=TmnxSlotNum, tmnxCpmFlashCapacity=tmnxCpmFlashCapacity, tFPAccIngQGrpPlcrOvrEntry=tFPAccIngQGrpPlcrOvrEntry, tmnxChassisNotifyObjsV9v0Group=tmnxChassisNotifyObjsV9v0Group, tmnxEqSyncIfTimingPTPQuality=tmnxEqSyncIfTimingPTPQuality, tmnxSyncIfTimingBITSRxQltyLevel=tmnxSyncIfTimingBITSRxQltyLevel, TmnxFabricType=TmnxFabricType, tmnxSyncIfTimingRef1Alarm=tmnxSyncIfTimingRef1Alarm, tmnxFPAccIngQGrpTable=tmnxFPAccIngQGrpTable, tmnxEqSyncIfTimingRef1Alarm=tmnxEqSyncIfTimingRef1Alarm, tSyncIfTimingAdmBITSIfType=tSyncIfTimingAdmBITSIfType, tmnxMdaTypeStatus=tmnxMdaTypeStatus, tmnxFabricTypeDescription=tmnxFabricTypeDescription, tmnxHwID=tmnxHwID, tmnxCcagPathCcQueuePlcy=tmnxCcagPathCcQueuePlcy, tSyncIfTimingAdmBITS2OutAdminStatus=tSyncIfTimingAdmBITS2OutAdminStatus, tmnxFPNetIngQgPStOffLPrioOctsH=tmnxFPNetIngQgPStOffLPrioOctsH, TmnxSETSRefAlarm=TmnxSETSRefAlarm, tmnxChassisUpgradeInProgress=tmnxChassisUpgradeInProgress, tFPNetIngQGrpArbitStatFwdOcts=tFPNetIngQGrpArbitStatFwdOcts, tmnxCardCmplx1EgrFcsOccurTime=tmnxCardCmplx1EgrFcsOccurTime, tmnxFabricHwIndex=tmnxFabricHwIndex, tmnxChassis7450V6v1Compliance=tmnxChassis7450V6v1Compliance, tmnxChassisNotificationV3v0Group=tmnxChassisNotificationV3v0Group, tmnxFPAccIngQgPStUncolOctsOffH=tmnxFPAccIngQgPStUncolOctsOffH, tmnxChassisPowerSupplyDCStatus=tmnxChassisPowerSupplyDCStatus, tmnxEqPowerSupplyInserted=tmnxEqPowerSupplyInserted, tmnxPeSoftwareError=tmnxPeSoftwareError, tmnxMDAXplErrorTime=tmnxMDAXplErrorTime, tmnxSyncIfTimingBITS2State=tmnxSyncIfTimingBITS2State, tmnxPeCpuCyclesExceeded=tmnxPeCpuCyclesExceeded, tmnxChassisV10v0Compliance=tmnxChassisV10v0Compliance, tmnxChassisPowerSupplyOutputStatus=tmnxChassisPowerSupplyOutputStatus, tmnxHsmdaMdaSchOvrClass6WtInGrp=tmnxHsmdaMdaSchOvrClass6WtInGrp, tmnxFPNetIngQgPStUncolOctsOff=tmnxFPNetIngQgPStUncolOctsOff, tmnxFPNetIngQgPStFwdInProfOctsL=tmnxFPNetIngQgPStFwdInProfOctsL, tmnxHwResourceTable=tmnxHwResourceTable, tmnxFPAccIngQgPStFwdInProfOctsH=tmnxFPAccIngQgPStFwdInProfOctsH, tmnxFPNetIngQgPStOffLPrioOctsL=tmnxFPNetIngQgPStOffLPrioOctsL, tmnxMDAClockMode=tmnxMDAClockMode, tmnxFPNetIngQGrpName=tmnxFPNetIngQGrpName, tmnxHsmdaMdaSchOvrClass7Rate=tmnxHsmdaMdaSchOvrClass7Rate, tmnxFPNetIngQgPStDrpHPrioOcts=tmnxFPNetIngQgPStDrpHPrioOcts, tmnxChassisV10v0Group=tmnxChassisV10v0Group, tmnxMdaNotifyType=tmnxMdaNotifyType, tmnxFPAccIngQgPStOffLPrioPkts=tmnxFPAccIngQgPStOffLPrioPkts, tmnxHsmdaMdaSchOvrClass8Rate=tmnxHsmdaMdaSchOvrClass8Rate, tmnxFabricTable=tmnxFabricTable, tmnxEqCardFailure=tmnxEqCardFailure, tmnxCardFwdDirection=tmnxCardFwdDirection, tmnxFPAccIngQgPStFwdOutProfOctsL=tmnxFPAccIngQgPStFwdOutProfOctsL, tmnxCcagOperStatus=tmnxCcagOperStatus, tmnxChassisMixedModeIomUpgrList=tmnxChassisMixedModeIomUpgrList, tmnxFPNetIngQgPStDrpHPrioOctsL=tmnxFPNetIngQgPStDrpHPrioOctsL, tFPAccIngQGrpArbitStatTable=tFPAccIngQGrpArbitStatTable, tFPNetIngQGrpArbitStatFwdPktsL=tFPNetIngQGrpArbitStatFwdPktsL, tmnxChassisNotifyV10v0Group=tmnxChassisNotifyV10v0Group, tmnxFPNetIngQgPStOffLPrioPktsL=tmnxFPNetIngQgPStOffLPrioPktsL, tmnxCardTypeIndex=tmnxCardTypeIndex, tmnxSyncIfTimingPTPState=tmnxSyncIfTimingPTPState, tmnxChassisUpgradeComplete=tmnxChassisUpgradeComplete, tmnxCardCmplx1MemParityOccur=tmnxCardCmplx1MemParityOccur, tmnxHwResourceMinWattage=tmnxHwResourceMinWattage, TmnxHwIndex=TmnxHwIndex, tmnxFPNetIngQgPStUncolOctsOffL=tmnxFPNetIngQgPStUncolOctsOffL, tmnxHwContainedIndex=tmnxHwContainedIndex, tmnxFPNetIngQgPStFwdInProfPktsH=tmnxFPNetIngQgPStFwdInProfPktsH, tmnxChassisComp7710=tmnxChassisComp7710, tmnxCardV7v0Group=tmnxCardV7v0Group, tmnxFPAccIngQGrpName=tmnxFPAccIngQGrpName, tmnxMDAEquippedPorts=tmnxMDAEquippedPorts, tSyncIfTimingAdmRefOrder1=tSyncIfTimingAdmRefOrder1, tmnxCpmCardReboot=tmnxCpmCardReboot, tmnxChassisRedForcedSingleSfm=tmnxChassisRedForcedSingleSfm, tmnxFPQGrpV10v0R4Group=tmnxFPQGrpV10v0R4Group, tmnxSyncIfTimingBITSAdminStatus=tmnxSyncIfTimingBITSAdminStatus, tmnxFabricTypeName=tmnxFabricTypeName, tmnxEqSyncIfTimingHoldover=tmnxEqSyncIfTimingHoldover, tmnxChassisPowerSupplyId=tmnxChassisPowerSupplyId, tmnxChassisHwV6v1Group=tmnxChassisHwV6v1Group, tmnxCpmCardBootOptionLastSaved=tmnxCpmCardBootOptionLastSaved, tmnxFPWredResvCbsMin=tmnxFPWredResvCbsMin, tmnxCcmTypeEntry=tmnxCcmTypeEntry, tmnxCpmCardBootOptionSource=tmnxCpmCardBootOptionSource, tmnxChassisFanEntry=tmnxChassisFanEntry, tFPNetIngQGrpArbitStatEntry=tFPNetIngQGrpArbitStatEntry, tmnxFPNetIngQgPStDrpLPrioPktsH=tmnxFPNetIngQgPStDrpLPrioPktsH, tmnxMDAIngHsmdaPoolPolicy=tmnxMDAIngHsmdaPoolPolicy, tmnxFPAccIngQgPStFwdOutProfPktsH=tmnxFPAccIngQgPStFwdOutProfPktsH, tmnxHwIndex=tmnxHwIndex, tSyncIfTimingAdmRefOrder4=tSyncIfTimingAdmRefOrder4, tmnxCardPchipV8v0Group=tmnxCardPchipV8v0Group, tmnxMDAMcPathMgmtV6v0Group=tmnxMDAMcPathMgmtV6v0Group, tmnxSyncIfTimingRef1Qualified=tmnxSyncIfTimingRef1Qualified, tmnxCpmCardConfigBootedVersion=tmnxCpmCardConfigBootedVersion, tmnxMdaV10v0Group=tmnxMdaV10v0Group, tmnxEqTypeNotificationRow=tmnxEqTypeNotificationRow, tmnxHsmdaMdaSchOvrClass5WtInGrp=tmnxHsmdaMdaSchOvrClass5WtInGrp, tSyncIfTimingAdmRef1NationalUse=tSyncIfTimingAdmRef1NationalUse, tmnxMDAHiBwMcastSource=tmnxMDAHiBwMcastSource, tmnxFabricReboot=tmnxFabricReboot, tmnxMDAMaxPorts=tmnxMDAMaxPorts, tmnxCcmIndex=tmnxCcmIndex, tmnxCpmCardMemorySize=tmnxCpmCardMemorySize, tmnxChassisMixedModeIomAdminMode=tmnxChassisMixedModeIomAdminMode, tmnxFPHiBwMcastDefaultPathsOnly=tmnxFPHiBwMcastDefaultPathsOnly, tmnxEqNotificationRow=tmnxEqNotificationRow, tmnxCardHwIndex=tmnxCardHwIndex, tmnxChassisName=tmnxChassisName, tmnxEqSyncIfTimingHoldoverClear=tmnxEqSyncIfTimingHoldoverClear, tmnxHwConfigChange=tmnxHwConfigChange, tmnxFPNetIngQgPStDrpHPrioPkts=tmnxFPNetIngQgPStDrpHPrioPkts, tmnxChassisHiBwMcastAlarm=tmnxChassisHiBwMcastAlarm, tmnxSyncIfTimingBITS2AdminStatus=tmnxSyncIfTimingBITS2AdminStatus, tmnxFPAccIngQgPStOffLPrioOctsH=tmnxFPAccIngQgPStOffLPrioOctsH, TmnxTunnelGroupIdOrZero=TmnxTunnelGroupIdOrZero, tmnxSyncIfTimingRefOrder1=tmnxSyncIfTimingRefOrder1, tmnxFPAccIngQgPStDrpLPrioPkts=tmnxFPAccIngQgPStDrpLPrioPkts, TmnxMDASuppType=TmnxMDASuppType, tmnxCpmCardCpuType=tmnxCpmCardCpuType, tmnxFPAccIngQgPStDrpHPrioOcts=tmnxFPAccIngQgPStDrpHPrioOcts, tmnxCardV10v0Group=tmnxCardV10v0Group, tmnxSyncIfTimingBITS2TxQltyLevel=tmnxSyncIfTimingBITS2TxQltyLevel, tmnxCpmCardConfigFileLastBooted=tmnxCpmCardConfigFileLastBooted, tmnxChassis7450V7v0Compliance=tmnxChassis7450V7v0Compliance, tmnxCcagPathCcAcctPolicyId=tmnxCcagPathCcAcctPolicyId, tmnxFPAccIngQGrpPStatPolicerId=tmnxFPAccIngQGrpPStatPolicerId, tmnxHwResourceMinWattageTime=tmnxHwResourceMinWattageTime, tmnxEqPowerSupplyFailure=tmnxEqPowerSupplyFailure, tmnxFPAccIngQGrpPStatTable=tmnxFPAccIngQGrpPStatTable, tmnxFPNetIngQgPStOffLPrioPkts=tmnxFPNetIngQgPStOffLPrioPkts, tmnxHwSerialNumber=tmnxHwSerialNumber, tmnxEqCardSoftResetAlarm=tmnxEqCardSoftResetAlarm, tmnxHwIsFRU=tmnxHwIsFRU, tmnxChassisNotification=tmnxChassisNotification, tmnxEqFlashDiskFull=tmnxEqFlashDiskFull, tmnxChassisCriticalLEDState=tmnxChassisCriticalLEDState, tmnxFabricEquippedType=tmnxFabricEquippedType, tmnxHwSwState=tmnxHwSwState, tmnxSyncIfTimingOtherCPMAlarm=tmnxSyncIfTimingOtherCPMAlarm, tmnxHwResourceCurrentVoltage=tmnxHwResourceCurrentVoltage, tmnxCpmCardBootOptionVersion=tmnxCpmCardBootOptionVersion, tmnxFPAccIngQGrpPolicerPol=tmnxFPAccIngQGrpPolicerPol, tmnxHsmdaMdaSchOvrClass2WtInGrp=tmnxHsmdaMdaSchOvrClass2WtInGrp, tmnxHwOperState=tmnxHwOperState, tmnxSyncIfTimingRef2InUse=tmnxSyncIfTimingRef2InUse, tmnxFanTrayCompIndex=tmnxFanTrayCompIndex, tmnxCcmTypeIndex=tmnxCcmTypeIndex, tmnxFPNetIngQGrpPolicerPol=tmnxFPNetIngQGrpPolicerPol, tmnxCardSlowQueueThresh=tmnxCardSlowQueueThresh, tmnxCpmCardConfigFileLastSaved=tmnxCpmCardConfigFileLastSaved, tmnxCardEquippedType=tmnxCardEquippedType, tmnxFPNetIngQgPStFwdInProfOctsH=tmnxFPNetIngQgPStFwdInProfOctsH, tmnxFPAccIngQgPStFwdOutProfOcts=tmnxFPAccIngQgPStFwdOutProfOcts, tmnxHsmdaMdaSchOvrClass8WtInGrp=tmnxHsmdaMdaSchOvrClass8WtInGrp, tmnxEqHwEnhancedCapability=tmnxEqHwEnhancedCapability, tmnxChassisConformance=tmnxChassisConformance, tmnxHsmdaMdaSchOvrClass2Rate=tmnxHsmdaMdaSchOvrClass2Rate, tmnxChassisNotifyCardSyncFile=tmnxChassisNotifyCardSyncFile, tmnxMDAHiBwMcastAlarm=tmnxMDAHiBwMcastAlarm, tmnxMcmTypeEntry=tmnxMcmTypeEntry, tmnxCpmCardEquippedType=tmnxCpmCardEquippedType, tmnxChassisNotifyObjsV6v0Group=tmnxChassisNotifyObjsV6v0Group, tmnxCcagPathCcIngPoolSlpPlcy=tmnxCcagPathCcIngPoolSlpPlcy, tmnxSyncIfTimingNotifV8v0Group=tmnxSyncIfTimingNotifV8v0Group, tSyncIfTimingAdmRef2BITSIfType=tSyncIfTimingAdmRef2BITSIfType, tmnxHsmdaMdaSchOvrClass1Rate=tmnxHsmdaMdaSchOvrClass1Rate, tmnxCardReboot=tmnxCardReboot, tmnxCcmOperStatus=tmnxCcmOperStatus, tmnxIPsecIsaGrpRowStatus=tmnxIPsecIsaGrpRowStatus, tmnxFPAccIngQgPStOffHPrioOcts=tmnxFPAccIngQgPStOffHPrioOcts, tmnxSyncIfTimingRefOrder2=tmnxSyncIfTimingRefOrder2, tmnxChassisNotifyCardName=tmnxChassisNotifyCardName, tmnxFPNetIngQgPStOffHPrioPktsH=tmnxFPNetIngQgPStOffHPrioPktsH, tmnxCcagDescription=tmnxCcagDescription, tmnxCardSlotNum=tmnxCardSlotNum, tmnxCardCamErrorV6v1Group=tmnxCardCamErrorV6v1Group, tmnxSyncIfTimingRefOrder4=tmnxSyncIfTimingRefOrder4, tmnxChassisNumFanTrays=tmnxChassisNumFanTrays, tmnxCpmCardSupportedTypes=tmnxCpmCardSupportedTypes, tmnxIPsecIsaGrpTnlMax=tmnxIPsecIsaGrpTnlMax, tFPAccIngQGrpPlcrOvrTblLstChgd=tFPAccIngQGrpPlcrOvrTblLstChgd, tmnxHwResourcePeakVoltageTime=tmnxHwResourcePeakVoltageTime, tmnxEqSyncIfTimingBITSQuality=tmnxEqSyncIfTimingBITSQuality, tmnxCpmCardRedundant=tmnxCpmCardRedundant, tmnxMDAV3v0Group=tmnxMDAV3v0Group, tmnxChassis7750V6v0Compliance=tmnxChassis7750V6v0Compliance, tmnxHwTable=tmnxHwTable, tmnxCpmFlashFirmwareRevision=tmnxCpmFlashFirmwareRevision, tmnxFPNetIngQgPStDrpLPrioOctsL=tmnxFPNetIngQgPStDrpLPrioOctsL, tSyncIfTimingAdmRef1BITSIfType=tSyncIfTimingAdmRef1BITSIfType, tmnxFabricSlotNum=tmnxFabricSlotNum, tmnxFPAccIngQgPStFwdInProfPktsL=tmnxFPAccIngQgPStFwdInProfPktsL, tmnxSyncIfTimingPTPAdminStatus=tmnxSyncIfTimingPTPAdminStatus, tmnxChassisLastChange=tmnxChassisLastChange, tmnxMDAChannelsInUse=tmnxMDAChannelsInUse, tmnxMDAMcPathMgmtAncPathLimit=tmnxMDAMcPathMgmtAncPathLimit, tmnxChassisTypeName=tmnxChassisTypeName, TmnxCardType=TmnxCardType, tmnxFanTrayCompSpeed=tmnxFanTrayCompSpeed, tmnxChassisComp7710V8v0=tmnxChassisComp7710V8v0, TmnxCardSuppType=TmnxCardSuppType, TmnxMdaAtmMode=TmnxMdaAtmMode, tmnxHwAssetID=tmnxHwAssetID, tmnxCardTable=tmnxCardTable, tFPAccIngQGrpPlcrOvrMBS=tFPAccIngQGrpPlcrOvrMBS, tmnxCardCmplx1IngrFcsOccur=tmnxCardCmplx1IngrFcsOccur, TmnxDeviceState=TmnxDeviceState, TmnxSSMQualityLevel=TmnxSSMQualityLevel, tmnxCardV6v0NamedPoolPlcyGroup=tmnxCardV6v0NamedPoolPlcyGroup, tmnxCardSchedRun=tmnxCardSchedRun, tmnxSyncIfTimingRef2RxQltyLevel=tmnxSyncIfTimingRef2RxQltyLevel, tmnxChassisMajorLEDState=tmnxChassisMajorLEDState, tmnxChassisV5v0Group=tmnxChassisV5v0Group, tmnxFPNetIngQgPStFwdOutProfOcts=tmnxFPNetIngQgPStFwdOutProfOcts, tmnxFPNetIngQgPStOffHPrioPktsL=tmnxFPNetIngQgPStOffHPrioPktsL, tmnxFPAccIngQgPStDrpHPrioOctsH=tmnxFPAccIngQgPStDrpHPrioOctsH, tmnxChassisObjs=tmnxChassisObjs, tmnxSyncIfTimingOtherCPMInUse=tmnxSyncIfTimingOtherCPMInUse, tmnxMDADiffTimestampFreq=tmnxMDADiffTimestampFreq, TmnxLEDState=TmnxLEDState, tmnxEqFanFailure=tmnxEqFanFailure, tmnxEqFlashDataLoss=tmnxEqFlashDataLoss, tmnxMDATxTimingSelected=tmnxMDATxTimingSelected, tmnxFPAccIngQGrpCollectStats=tmnxFPAccIngQGrpCollectStats, tmnxSyncIfTimingRefOrder5=tmnxSyncIfTimingRefOrder5, tmnxCcagPathCcType=tmnxCcagPathCcType, tmnxCcagPathCcIngPoolResvCbs=tmnxCcagPathCcIngPoolResvCbs, tmnxChassisV4v0Compliance=tmnxChassisV4v0Compliance, tmnxHwManufactureDate=tmnxHwManufactureDate, tmnxCcagPathCcEgrPoolSlpPlcy=tmnxCcagPathCcEgrPoolSlpPlcy, tFPAccIngQGrpPlcrOvrAdminPIR=tFPAccIngQGrpPlcrOvrAdminPIR, tmnxHwBaseMacAddress=tmnxHwBaseMacAddress, tmnxMcmEntry=tmnxMcmEntry, tmnxFPAccIngQgPStDrpHPrioPktsH=tmnxFPAccIngQgPStDrpHPrioPktsH, tmnxChassisLocation=tmnxChassisLocation)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxFabricTypeIndex=tmnxFabricTypeIndex, tmnxSyncIfTimingRef2CfgQltyLevel=tmnxSyncIfTimingRef2CfgQltyLevel, tmnxPeOutOfMemory=tmnxPeOutOfMemory, tmnxFPWredAdminState=tmnxFPWredAdminState, tmnxSyncIfTimingRef1State=tmnxSyncIfTimingRef1State, tmnx7710SETSRefSrcHwV6v0Group=tmnx7710SETSRefSrcHwV6v0Group, tmnxEqSyncIfTimingBITSAlarmClear=tmnxEqSyncIfTimingBITSAlarmClear, tmnxSyncIfTimingRef1AdminStatus=tmnxSyncIfTimingRef1AdminStatus, tSyncIfTimingAdmQLSelection=tSyncIfTimingAdmQLSelection, tmnxEqSyncIfTimingBITS2Quality=tmnxEqSyncIfTimingBITS2Quality, tmnxFPAccIngQGrpRowStatus=tmnxFPAccIngQGrpRowStatus, tmnxMDASlotNum=tmnxMDASlotNum, tmnxVirtualSchedulerAdjTable=tmnxVirtualSchedulerAdjTable, tmnxFPEntry=tmnxFPEntry, tmnxMDAIsaTunnelGroupChange=tmnxMDAIsaTunnelGroupChange, tmnxEqSyncIfTimingRef2Alarm=tmnxEqSyncIfTimingRef2Alarm, tmnxHwSwImageSource=tmnxHwSwImageSource, tmnxMDAEgrNamedPoolPolicy=tmnxMDAEgrNamedPoolPolicy, tmnxSyncIfTimingOtherCPMQual=tmnxSyncIfTimingOtherCPMQual, tmnxMDAV6v1Group=tmnxMDAV6v1Group, tmnxFPNum=tmnxFPNum, tmnxCcagAdminStatus=tmnxCcagAdminStatus, tmnxMcmAssignedType=tmnxMcmAssignedType, tmnxCcagPathId=tmnxCcagPathId, tmnxChassisUpdateTimeLeft=tmnxChassisUpdateTimeLeft, tmnxChassisIndex=tmnxChassisIndex, tmnxChassisV6v0Group=tmnxChassisV6v0Group, tmnxFabricTypeEntry=tmnxFabricTypeEntry, tmnxEqCardPChipError=tmnxEqCardPChipError, tmnxSyncIfTimingRef2Qualified=tmnxSyncIfTimingRef2Qualified, tmnxEqSyncIfTimingRef2Quality=tmnxEqSyncIfTimingRef2Quality, tmnxHwTemperature=tmnxHwTemperature, tmnxCcagPathCcUserAssignedMac=tmnxCcagPathCcUserAssignedMac, tmnxChassisCLLICode=tmnxChassisCLLICode, tmnxCardCmplx2CAMErrorOccurTime=tmnxCardCmplx2CAMErrorOccurTime, tmnxChassisComp7710V6v1=tmnxChassisComp7710V6v1, tSyncIfTimingAdmPTPAdminStatus=tSyncIfTimingAdmPTPAdminStatus, tmnxMDAMcPathMgmtAncInUseBw=tmnxMDAMcPathMgmtAncInUseBw, tmnxSyncIfTimingPTPRxQltyLevel=tmnxSyncIfTimingPTPRxQltyLevel, tmnxIPsecV7v0Group=tmnxIPsecV7v0Group, tmnxEqCpuFailure=tmnxEqCpuFailure, tmnxFabricTypeStatus=tmnxFabricTypeStatus, tmnxCardFailOnError=tmnxCardFailOnError, tmnxPeSoftwareLoadFailed=tmnxPeSoftwareLoadFailed, tmnxRedSecondaryCPMStatusChange=tmnxRedSecondaryCPMStatusChange, tmnxIPsecIsaGrpTnlHighWMark=tmnxIPsecIsaGrpTnlHighWMark, tSyncIfTimingAdmRefOrder5=tSyncIfTimingAdmRefOrder5, tmnxChassisV7v0Group=tmnxChassisV7v0Group, tmnxIPsecIsaGrpAdminState=tmnxIPsecIsaGrpAdminState, tmnxFPNetIngQgPStDrpLPrioPkts=tmnxFPNetIngQgPStDrpLPrioPkts, tmnxChassisNotificationV6v0Group=tmnxChassisNotificationV6v0Group, tmnxIPsecIsaGrpMaxTunnels=tmnxIPsecIsaGrpMaxTunnels, tmnxFPAccIngQgPStFwdInProfOctsL=tmnxFPAccIngQgPStFwdInProfOctsL, tmnxMDAMcPathMgmtPriInUseBw=tmnxMDAMcPathMgmtPriInUseBw, tmnxFPAccIngQgPStUncolOctsOffL=tmnxFPAccIngQgPStUncolOctsOffL, tmnxChassisReboot=tmnxChassisReboot, tmnxMcmTypeTable=tmnxMcmTypeTable, tmnxMcmSupportedTypes=tmnxMcmSupportedTypes, tmnxIPsecIsaGrpPrimaryIsa=tmnxIPsecIsaGrpPrimaryIsa, tmnxMDACapabilities=tmnxMDACapabilities, tmnxFPNetIngQGrpLastChgd=tmnxFPNetIngQGrpLastChgd, tmnxMcmTypeName=tmnxMcmTypeName, tmnxChassisTotalNumber=tmnxChassisTotalNumber, tmnxIPsecIsaGrpEntry=tmnxIPsecIsaGrpEntry, tmnxFPNetIngQgPStFwdInProfPktsL=tmnxFPNetIngQgPStFwdInProfPktsL, tmnxSyncIfTimingRef2BITSIfType=tmnxSyncIfTimingRef2BITSIfType, tmnxHsmdaMdaSchOvrClass4WtInGrp=tmnxHsmdaMdaSchOvrClass4WtInGrp, tmnxChassisGroups=tmnxChassisGroups, tmnxMDAMcPathMgmtSecPathLimit=tmnxMDAMcPathMgmtSecPathLimit, tmnxCpmCardEntry=tmnxCpmCardEntry, tmnxFPAccIngQgPStOffLPrioPktsL=tmnxFPAccIngQgPStOffLPrioPktsL, tmnxChassisCoordinates=tmnxChassisCoordinates, tmnxFPAccIngQgPStFwdInProfOcts=tmnxFPAccIngQgPStFwdInProfOcts, tFPNetIngQGrpArbitStatFwdPktsH=tFPNetIngQGrpArbitStatFwdPktsH, tmnxHsmdaMdaSchOvrLastChanged=tmnxHsmdaMdaSchOvrLastChanged, tmnxCardCmplx2IngrFcsOccurTime=tmnxCardCmplx2IngrFcsOccurTime, tmnxMDAIsaTunnelGroupInUse=tmnxMDAIsaTunnelGroupInUse, tmnxCpmCardConfigSource=tmnxCpmCardConfigSource, tmnxIPsecIsaGrpOperState=tmnxIPsecIsaGrpOperState, tmnxCpmCardAssignedType=tmnxCpmCardAssignedType, tmnxIPsecIsaGrpTunnels=tmnxIPsecIsaGrpTunnels, tmnxMDAMinChannelization=tmnxMDAMinChannelization, tmnxChassis7750V7v0Compliance=tmnxChassis7750V7v0Compliance, tmnxCardTaskScheduling=tmnxCardTaskScheduling, tmnxCcmTypeStatus=tmnxCcmTypeStatus, tmnxFPMcPathMgmtV6v1Group=tmnxFPMcPathMgmtV6v1Group, tmnxFPAccIngQgPStOffHPrioPktsH=tmnxFPAccIngQgPStOffHPrioPktsH, tmnxSyncIfTimingBITSIfType=tmnxSyncIfTimingBITSIfType, tmnxChassisNotificationV4v0Group=tmnxChassisNotificationV4v0Group, tmnxHwContainsTable=tmnxHwContainsTable, tmnxCpmCardRereadBootOptions=tmnxCpmCardRereadBootOptions, tmnxFPAccIngQgPStDrpLPrioOcts=tmnxFPAccIngQgPStDrpLPrioOcts, tmnxChassisNotificationV9v0Group=tmnxChassisNotificationV9v0Group, tmnxSyncIfTimingQLSelection=tmnxSyncIfTimingQLSelection, tmnxChassisNotifyPrefix=tmnxChassisNotifyPrefix, tmnxSyncIfTimingBITS2InAdminStatus=tmnxSyncIfTimingBITS2InAdminStatus, tmnxSyncIfTimingRef2SrcHw=tmnxSyncIfTimingRef2SrcHw, tmnxChassisComp7710V7v0=tmnxChassisComp7710V7v0, tmnxFPHiBwMcastGroup=tmnxFPHiBwMcastGroup, tmnxHwLastAlarmEvent=tmnxHwLastAlarmEvent, tmnxHwTempThreshold=tmnxHwTempThreshold, tmnxCcagPathRate=tmnxCcagPathRate, tmnxMDAEgrHsmdaThrshLoBrstMult=tmnxMDAEgrHsmdaThrshLoBrstMult, tmnxHwClass=tmnxHwClass, tmnxCcagCcaRate=tmnxCcagCcaRate, tmnxCardRateCalcFastQueue=tmnxCardRateCalcFastQueue, tmnxMDAIngHsmdaSchedPolicy=tmnxMDAIngHsmdaSchedPolicy, tmnxCpmFlashTable=tmnxCpmFlashTable, tmnxHsmdaMdaSchOvrGrp1Rate=tmnxHsmdaMdaSchOvrGrp1Rate, tmnxMdaTypeIndex=tmnxMdaTypeIndex, tmnxFabricAssignedType=tmnxFabricAssignedType, tmnxFPAccIngQgPStOffLPrioOctsL=tmnxFPAccIngQgPStOffLPrioOctsL, tmnxCpmCardConfigUserLastModified=tmnxCpmCardConfigUserLastModified, tmnxChassisNotifyHwIndex=tmnxChassisNotifyHwIndex, TmnxTunnelGroupId=TmnxTunnelGroupId, tmnxRedRestoreFail=tmnxRedRestoreFail, tmnxFPNetIngQGrpPStatPolicerId=tmnxFPNetIngQGrpPStatPolicerId, tmnxCpmCardTable=tmnxCpmCardTable, tmnxHwMfgDeviations=tmnxHwMfgDeviations, tmnxChassisAdminObjects=tmnxChassisAdminObjects, tmnxHwResourceCurrentWattage=tmnxHwResourceCurrentWattage, tmnxHwCLEI=tmnxHwCLEI, tmnxFPWredSlopePolicy=tmnxFPWredSlopePolicy, tmnxIPsecIsaGrpTable=tmnxIPsecIsaGrpTable, tmnxCpmCardClockSource=tmnxCpmCardClockSource, tmnxFPHiBwMcastAlarm=tmnxFPHiBwMcastAlarm, tmnxFPAccIngQGrpEntry=tmnxFPAccIngQGrpEntry, tmnxHwContainsEntry=tmnxHwContainsEntry, tmnxFPNetIngQgPStUncolPktsOff=tmnxFPNetIngQgPStUncolPktsOff, TmnxCcagRate=TmnxCcagRate, TmnxChassisType=TmnxChassisType, tmnxFPAccIngQgPStOffHPrioPktsL=tmnxFPAccIngQgPStOffHPrioPktsL, tmnxEqSyncIfTimingBITS2Alarm=tmnxEqSyncIfTimingBITS2Alarm, tmnxHwFirmwareCodeVersion=tmnxHwFirmwareCodeVersion, tmnxFPAccIngQGrpAcctgPolId=tmnxFPAccIngQGrpAcctgPolId, tmnxRedRestoreSuccess=tmnxRedRestoreSuccess, tmnxChassisAdminValueObjs=tmnxChassisAdminValueObjs, tSyncIfTimingAdmBITS2InAdminStatus=tSyncIfTimingAdmBITS2InAdminStatus, tmnxFabricLastChange=tmnxFabricLastChange, tmnxCardCmplx1IngrFcsOccurTime=tmnxCardCmplx1IngrFcsOccurTime, TmnxMcmType=TmnxMcmType, tmnxChassisNotifyObjsGroup=tmnxChassisNotifyObjsGroup, tmnxChassisV9v0Compliance=tmnxChassisV9v0Compliance, tmnxCpmCardCmplxCAMErrOccurTime=tmnxCpmCardCmplxCAMErrOccurTime, tmnxCardCmplx2MemParityOccur=tmnxCardCmplx2MemParityOccur, tmnxCardSrcSlotBitmap=tmnxCardSrcSlotBitmap, tmnxHwMfgAssemblyNumber=tmnxHwMfgAssemblyNumber, tmnxSyncIfTimingBITS2InUse=tmnxSyncIfTimingBITS2InUse, tmnxMDAReboot=tmnxMDAReboot, tmnxChassisV6v1Group=tmnxChassisV6v1Group, tmnxIPsecIsaGrpIpMaxTunnels=tmnxIPsecIsaGrpIpMaxTunnels, tmnxCcagPathEntry=tmnxCcagPathEntry, tmnxCpmCardIndexBootedVersion=tmnxCpmCardIndexBootedVersion, tFPAccIngQGrpArbitStatEntry=tFPAccIngQGrpArbitStatEntry, tmnxCpmFlashEntry=tmnxCpmFlashEntry, tmnxChassisPowerSupplyTable=tmnxChassisPowerSupplyTable, tmnxCcagEntry=tmnxCcagEntry, tmnxMDACcagV6v1Group=tmnxMDACcagV6v1Group, tmnxEqSyncIfTimingRef2AlarmClear=tmnxEqSyncIfTimingRef2AlarmClear, tmnxChassisNotificationV5v0Group=tmnxChassisNotificationV5v0Group, tSyncIfTimingAdmTable=tSyncIfTimingAdmTable, tmnxFPMcPathMgmtBwPlcyName=tmnxFPMcPathMgmtBwPlcyName, tmnxSyncIfTimingBITSQualified=tmnxSyncIfTimingBITSQualified, tmnxHsmdaMdaSchOvrClass4Rate=tmnxHsmdaMdaSchOvrClass4Rate, tmnxCcmEquippedType=tmnxCcmEquippedType, tmnxHwResourcePeakAmperageTime=tmnxHwResourcePeakAmperageTime, tmnxFPNetIngQgPStDrpHPrioOctsH=tmnxFPNetIngQgPStDrpHPrioOctsH, tmnxFPNetIngQGrpRowStatus=tmnxFPNetIngQGrpRowStatus, tmnxChassisNotifyObjsV6v1Group=tmnxChassisNotifyObjsV6v1Group, tmnxChassisPowerSupplyAssignedType=tmnxChassisPowerSupplyAssignedType, tmnxHwBootCodeVersion=tmnxHwBootCodeVersion, tmnxChassisAdminOwner=tmnxChassisAdminOwner, TmnxCcagRateOption=TmnxCcagRateOption, tmnxFPAccIngQgPStUncolOctsOff=tmnxFPAccIngQgPStUncolOctsOff, tmnxSyncIfTimingV8v0Group=tmnxSyncIfTimingV8v0Group, tmnxEqCardInserted=tmnxEqCardInserted, tmnxFPWredBufAllocMin=tmnxFPWredBufAllocMin, tmnxSyncIfTimingPTPQualified=tmnxSyncIfTimingPTPQualified, tmnxSyncIfTimingRef2AdminStatus=tmnxSyncIfTimingRef2AdminStatus, tmnxCcagAccessAdaptQos=tmnxCcagAccessAdaptQos, tFPNetIngQGrpArbitStatFwdOctsL=tFPNetIngQGrpArbitStatFwdOctsL, tmnxFabricTypeTable=tmnxFabricTypeTable, tmnxEqSyncIfTimingBITSOutRefChg=tmnxEqSyncIfTimingBITSOutRefChg, tmnxCardRateCalcSlowQueue=tmnxCardRateCalcSlowQueue, tmnxSyncIfTimingBITS2RxQltyLevel=tmnxSyncIfTimingBITS2RxQltyLevel, tmnxChassisNotificationV7v0Group=tmnxChassisNotificationV7v0Group, tmnxHsmdaMdaSchOvrRowStatus=tmnxHsmdaMdaSchOvrRowStatus, tmnxMDAMaxChannelization=tmnxMDAMaxChannelization, tmnxChassisTypeEntry=tmnxChassisTypeEntry, tmnxMDAIngNamedPoolPolicy=tmnxMDAIngNamedPoolPolicy, tmnxFPAccIngQgPStUncolPktsOffL=tmnxFPAccIngQgPStUncolPktsOffL, tmnxChassisPowerSupply2Status=tmnxChassisPowerSupply2Status, tmnxCpmCardSyncFileNotPresent=tmnxCpmCardSyncFileNotPresent, tmnxMDAMcPathMgmtBwPlcyName=tmnxMDAMcPathMgmtBwPlcyName, tmnxChassis7450V6v0Compliance=tmnxChassis7450V6v0Compliance, tmnxFPAccIngQgPStOffHPrioOctsL=tmnxFPAccIngQgPStOffHPrioOctsL, tSyncIfTimingAdmBITSCfgQltyLevel=tSyncIfTimingAdmBITSCfgQltyLevel, TmnxMDAChanType=TmnxMDAChanType, tmnxSyncIfTimingRef1RxQltyLevel=tmnxSyncIfTimingRef1RxQltyLevel, tmnxFPNetIngQGrpCollectStats=tmnxFPNetIngQGrpCollectStats, tmnxFPNetIngQgPStOffLPrioPktsH=tmnxFPNetIngQgPStOffLPrioPktsH, tSyncIfTimingAdmBITSOutLineLen=tSyncIfTimingAdmBITSOutLineLen, tmnxMDAMcPathMgmtPriPathLimit=tmnxMDAMcPathMgmtPriPathLimit, tmnxHwResourceMinAmperageTime=tmnxHwResourceMinAmperageTime, tmnxSyncIfTimingBITSCfgQltyLevel=tmnxSyncIfTimingBITSCfgQltyLevel, tmnxHsmdaMdaSchOvrClass3WtInGrp=tmnxHsmdaMdaSchOvrClass3WtInGrp, tmnxSyncIfTimingRevert=tmnxSyncIfTimingRevert, tSyncIfTimingAdmRef1CfgQltyLevel=tSyncIfTimingAdmRef1CfgQltyLevel, tmnxCardTypeName=tmnxCardTypeName, tmnxSyncIfTimingBITS2Qualified=tmnxSyncIfTimingBITS2Qualified, tmnxSyncIfTimingPTPAlarm=tmnxSyncIfTimingPTPAlarm, TmnxBITSIfType=TmnxBITSIfType, tmnxChassisOverTempState=tmnxChassisOverTempState, tFPAccIngQGrpPlcrOvrPolicerId=tFPAccIngQGrpPlcrOvrPolicerId, tmnxFPAccIngQgPStOffHPrioPkts=tmnxFPAccIngQgPStOffHPrioPkts, TmnxCcagId=TmnxCcagId, tmnxFPNetIngQGrpTableLastChgd=tmnxFPNetIngQGrpTableLastChgd, tmnxCardCmplx2MemParityOccurTime=tmnxCardCmplx2MemParityOccurTime, tmnxCardCmplx2EgrFcsOccurTime=tmnxCardCmplx2EgrFcsOccurTime, tmnxEqSyncIfTimingBITS2AlarmClr=tmnxEqSyncIfTimingBITS2AlarmClr, tSyncIfTimingAdmPTPCfgQltyLevel=tSyncIfTimingAdmPTPCfgQltyLevel, tmnxChassisObsoleteGroup=tmnxChassisObsoleteGroup, tmnxCcmTable=tmnxCcmTable, tmnxEqCardPChipMemoryEvent=tmnxEqCardPChipMemoryEvent, tmnxMDAHiBwMcastGroup=tmnxMDAHiBwMcastGroup, tmnxIPsecIsaGrpTableLastChanged=tmnxIPsecIsaGrpTableLastChanged, tFPAccIngQGrpPlcrOvrAdminCIR=tFPAccIngQGrpPlcrOvrAdminCIR, tmnxEqSyncIfTimingRef1AlarmClear=tmnxEqSyncIfTimingRef1AlarmClear, tmnxMcmTypeIndex=tmnxMcmTypeIndex, tmnxHsmdaMdaSchOvrClass3Rate=tmnxHsmdaMdaSchOvrClass3Rate, tmnxSyncIfTimingNotifyV9v0Group=tmnxSyncIfTimingNotifyV9v0Group, tmnxFPAccIngQGrpPStatEntry=tmnxFPAccIngQGrpPStatEntry, tmnxHwEquippedPlatform=tmnxHwEquippedPlatform, tmnxFPNetIngQgPStFwdOutProfPktsL=tmnxFPNetIngQgPStFwdOutProfPktsL, tmnxFPNetIngQgPStOffHPrioOcts=tmnxFPNetIngQgPStOffHPrioOcts, TmnxCardSlotBitMap=TmnxCardSlotBitMap, tmnxChassisNotifyCardFailureReason=tmnxChassisNotifyCardFailureReason, tFPNetIngQGrpArbitStatTable=tFPNetIngQGrpArbitStatTable, tmnxHwMfgString=tmnxHwMfgString, tmnxFPNetIngQGrpAcctgPolId=tmnxFPNetIngQGrpAcctgPolId, tmnxChassisEntry=tmnxChassisEntry, tFPAccIngQGrpPlcrOvrTable=tFPAccIngQGrpPlcrOvrTable, TmnxHwIndexOrZero=TmnxHwIndexOrZero, tmnxCpmCardIndexFileLastBootedHeader=tmnxCpmCardIndexFileLastBootedHeader, tmnxEqMdaCfgNotCompatible=tmnxEqMdaCfgNotCompatible, TmnxSETSRefSource=TmnxSETSRefSource, tSyncIfTimingAdmRefOrder2=tSyncIfTimingAdmRefOrder2, tmnxCcagPathCcEgrPoolResvCbs=tmnxCcagPathCcEgrPoolResvCbs, tmnxVirtualSchedulerAdjEntry=tmnxVirtualSchedulerAdjEntry, tmnxIPsecIsaGrpTnlLowWMark=tmnxIPsecIsaGrpTnlLowWMark, tmnxHwAlias=tmnxHwAlias, tmnxHwResourceMinAmperage=tmnxHwResourceMinAmperage, tmnxSyncIfTimingBITSState=tmnxSyncIfTimingBITSState, tmnxHwContainedIn=tmnxHwContainedIn)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tmnxEqCardFirmwareUpgraded=tmnxEqCardFirmwareUpgraded, tmnxMdaXplV5v0Group=tmnxMdaXplV5v0Group, tFPAccIngQGrpArbitStatFwdPktsL=tFPAccIngQGrpArbitStatFwdPktsL, tmnxIPsecIsaGrpUnableToSwitch=tmnxIPsecIsaGrpUnableToSwitch, tmnxCcmTypeDescription=tmnxCcmTypeDescription, tmnxSyncIfTimingEntry=tmnxSyncIfTimingEntry, tmnxAtmGroup=tmnxAtmGroup, tSyncIfTimingAdmRef2SrcHw=tSyncIfTimingAdmRef2SrcHw, tmnxFPAccIngQgPStDrpHPrioOctsL=tmnxFPAccIngQgPStDrpHPrioOctsL, tmnxHsmdaMdaSchOvrTable=tmnxHsmdaMdaSchOvrTable, tmnxCcagPathCcTable=tmnxCcagPathCcTable, tmnxCardTypeDescription=tmnxCardTypeDescription, tmnxMdaHsmdaPoolV10v0Group=tmnxMdaHsmdaPoolV10v0Group, tFPNetIngQGrpArbitStatFwdOctsH=tFPNetIngQGrpArbitStatFwdOctsH, tmnxChassisHwV9v0Group=tmnxChassisHwV9v0Group, tmnxSyncIfTimingBITSOutAdmStatus=tmnxSyncIfTimingBITSOutAdmStatus, tmnxMDAAssignedType=tmnxMDAAssignedType, tmnxMcmEquippedType=tmnxMcmEquippedType, tmnxChassisCompliances=tmnxChassisCompliances, tmnxMDASupportedTypes=tmnxMDASupportedTypes, tmnxChassisNotifyObjsV8v0Group=tmnxChassisNotifyObjsV8v0Group, tmnxCpmCardAllowedTypes=tmnxCpmCardAllowedTypes, tmnxCardNamedPoolOperMode=tmnxCardNamedPoolOperMode, tmnxEqBackdoorBusFailure=tmnxEqBackdoorBusFailure, tmnxHwAlarmState=tmnxHwAlarmState, tmnxSyncIfTimingNotifyAlarm=tmnxSyncIfTimingNotifyAlarm, tmnxHwSoftwareCodeVersion=tmnxHwSoftwareCodeVersion, tmnxFPNetIngQgPStOffHPrioOctsL=tmnxFPNetIngQgPStOffHPrioOctsL, tFPAccIngQGrpArbitStatFwdOcts=tFPAccIngQGrpArbitStatFwdOcts, tmnxFPNetIngQgPStUncolPktsOffL=tmnxFPNetIngQgPStUncolPktsOffL, tSyncIfTimingAdmBITSAdminStatus=tSyncIfTimingAdmBITSAdminStatus, tmnxFPHiBwMcastSource=tmnxFPHiBwMcastSource, tmnxCardComplexNumber=tmnxCardComplexNumber, tmnxIPsecIsaGrpV6v0Group=tmnxIPsecIsaGrpV6v0Group, tmnxCpmCardMasterSlaveRefState=tmnxCpmCardMasterSlaveRefState, tmnxCardHardResetUnsupMdas=tmnxCardHardResetUnsupMdas, tSyncIfTimingAdmEntry=tSyncIfTimingAdmEntry, tmnxCcagPathTable=tmnxCcagPathTable, tmnxChassisPowerSupplyTempThreshold=tmnxChassisPowerSupplyTempThreshold, tmnxMDATable=tmnxMDATable, tmnxFPNetIngQGrpInstanceId=tmnxFPNetIngQGrpInstanceId, tmnxFPMcPathMgmtAdminState=tmnxFPMcPathMgmtAdminState, tmnxCpmFlashUsed=tmnxCpmFlashUsed, tmnxCardLastBootupReason=tmnxCardLastBootupReason, tmnxCcagPathCcEntry=tmnxCcagPathCcEntry, tmnxFPNetIngQgPStDrpHPrioPktsL=tmnxFPNetIngQgPStDrpHPrioPktsL, tmnxCpmFlashHwIndex=tmnxCpmFlashHwIndex, tmnxHsmdaMdaSchOvrGrp2Rate=tmnxHsmdaMdaSchOvrGrp2Rate, tmnxCardCmplx2EgrFcsSrcSlots=tmnxCardCmplx2EgrFcsSrcSlots, tmnxFPAccIngQgPStFwdOutProfPkts=tmnxFPAccIngQgPStFwdOutProfPkts, tmnxFanTrayComponentEntry=tmnxFanTrayComponentEntry, TmnxSETSRefQualified=TmnxSETSRefQualified, tmnxMDAV4v0Group=tmnxMDAV4v0Group, tmnxChassisAdminLastSetTimer=tmnxChassisAdminLastSetTimer, tmnxCpmCardHwIndex=tmnxCpmCardHwIndex, tmnxChassis7750V6v1Compliance=tmnxChassis7750V6v1Compliance, tmnxSyncIfTimingBITSAlarm=tmnxSyncIfTimingBITSAlarm, TmnxCardRebootType=TmnxCardRebootType, tmnxCcmHwIndex=tmnxCcmHwIndex, tmnxMDAXplFailedCount=tmnxMDAXplFailedCount, tmnxMDASynchronousEthernet=tmnxMDASynchronousEthernet, tmnxSyncIfTimingBITSOutRefSel=tmnxSyncIfTimingBITSOutRefSel, tFPAccIngQGrpArbitStatName=tFPAccIngQGrpArbitStatName, tmnxFPAccIngQgPStFwdInProfPktsH=tmnxFPAccIngQgPStFwdInProfPktsH, tmnxIPsecIsaGrpOperFlags=tmnxIPsecIsaGrpOperFlags, tmnxFPAccIngQgPStDrpLPrioPktsH=tmnxFPAccIngQgPStDrpLPrioPktsH, tmnxMcmSlotNum=tmnxMcmSlotNum, tmnxCardNumMdaSlots=tmnxCardNumMdaSlots, tmnxCpmFlashOperStatus=tmnxCpmFlashOperStatus, TmnxChassisIndexOrZero=TmnxChassisIndexOrZero, tmnxIPsecNotifV7v0Group=tmnxIPsecNotifV7v0Group, TmnxFabricSuppType=TmnxFabricSuppType, tmnxChassisPowerSupplyTempStatus=tmnxChassisPowerSupplyTempStatus, tSyncIfTimingAdmBITSNationalUse=tSyncIfTimingAdmBITSNationalUse, tmnxIPsecIsaGrpActiveMda=tmnxIPsecIsaGrpActiveMda, tmnxFPAccIngQgPStDrpLPrioOctsL=tmnxFPAccIngQgPStDrpLPrioOctsL, tmnxChassisMIBModule=tmnxChassisMIBModule, tmnxIPsecIsaGrpActiveIsaChgd=tmnxIPsecIsaGrpActiveIsaChgd, tmnxChassisNotifyObjsV5v0Group=tmnxChassisNotifyObjsV5v0Group, tmnxEqMemoryFailure=tmnxEqMemoryFailure, TmnxChassisPemType=TmnxChassisPemType, tmnxCardClockSource=tmnxCardClockSource, tmnxHwResourceCurrentAmperage=tmnxHwResourceCurrentAmperage, tmnxChassisMixedModeIomV8v0Group=tmnxChassisMixedModeIomV8v0Group, tmnxHsmdaMdaSchOvrClass5Rate=tmnxHsmdaMdaSchOvrClass5Rate, tmnxEqSyncIfTimingRef1Quality=tmnxEqSyncIfTimingRef1Quality, tmnxChassisTypeTable=tmnxChassisTypeTable, tmnxEqMdaXplError=tmnxEqMdaXplError, tSyncIfTimingAdmRef2NationalUse=tSyncIfTimingAdmRef2NationalUse, tmnxHwResourcePeakVoltage=tmnxHwResourcePeakVoltage, tmnxFPTable=tmnxFPTable, tmnxMcmTypeStatus=tmnxMcmTypeStatus, tmnxCardCmplx1CAMErrorOccurTime=tmnxCardCmplx1CAMErrorOccurTime, tmnxChassisNumFans=tmnxChassisNumFans, TmnxHwClass=TmnxHwClass, tmnxMDAEgrHsmdaThrshHiBrstInc=tmnxMDAEgrHsmdaThrshHiBrstInc, tSyncIfTimingAdmChanged=tSyncIfTimingAdmChanged, tmnxSyncIfTimingRef2SrcPort=tmnxSyncIfTimingRef2SrcPort, tmnxMDAIsaTunnelGroup=tmnxMDAIsaTunnelGroup, tmnxMdaTypeTable=tmnxMdaTypeTable, tFPAccIngQGrpPlcrOvrPktOffset=tFPAccIngQGrpPlcrOvrPktOffset, tmnxHwResourceEntry=tmnxHwResourceEntry, tmnxIPsecIsaGrpLastChanged=tmnxIPsecIsaGrpLastChanged, tmnxSyncIfTimingBITS2OutAdminStatus=tmnxSyncIfTimingBITS2OutAdminStatus, tmnxChassisNumSlots=tmnxChassisNumSlots, tmnxChassisAdminControlApply=tmnxChassisAdminControlApply, tmnxCardNamedPoolAdminMode=tmnxCardNamedPoolAdminMode, TmnxBITSOutSource=TmnxBITSOutSource, tmnxChassisV5v0ObsoleteGroup=tmnxChassisV5v0ObsoleteGroup, tmnxCcagPathCcCollectStats=tmnxCcagPathCcCollectStats, tmnxFPWredBufAllocMax=tmnxFPWredBufAllocMax, tmnxMcmTable=tmnxMcmTable, tmnxFPNetIngQgPStOffLPrioOcts=tmnxFPNetIngQgPStOffLPrioOcts, TmnxChassisIndex=TmnxChassisIndex, tmnxChassisNotifySoftwareLocation=tmnxChassisNotifySoftwareLocation, tmnxIPsecIsaGrpTunnelReassembly=tmnxIPsecIsaGrpTunnelReassembly, tmnxCpmCardCmplxCAMErrOccur=tmnxCpmCardCmplxCAMErrOccur, tmnxSyncIfTimingRef1InUse=tmnxSyncIfTimingRef1InUse, tmnxChassisModeForce=tmnxChassisModeForce, tmnxSyncV6v0Group=tmnxSyncV6v0Group, tmnxCcmTypeName=tmnxCcmTypeName, tmnxSyncIfTimingRef1BITSIfType=tmnxSyncIfTimingRef1BITSIfType, tmnxIPsecIsaGrpBackupIsa=tmnxIPsecIsaGrpBackupIsa, tmnxSyncIfTimingBITS2Alarm=tmnxSyncIfTimingBITS2Alarm, tmnxIPsecIsaGrpActiveIsa=tmnxIPsecIsaGrpActiveIsa, tmnxSyncIfTimingPTPInUse=tmnxSyncIfTimingPTPInUse, tmnxHwClearAlarms=tmnxHwClearAlarms, tmnxCcagPathWeight=tmnxCcagPathWeight, tmnxCpmCardBootOptionLastModified=tmnxCpmCardBootOptionLastModified, tmnxMDAMaxChannels=tmnxMDAMaxChannels, tmnxMDANetworkIngQueues=tmnxMDANetworkIngQueues, tmnxFPNetIngQgPStFwdOutProfPkts=tmnxFPNetIngQgPStFwdOutProfPkts, tmnxHwResourceMinVoltageTime=tmnxHwResourceMinVoltageTime, tSyncIfTimingAdmRevert=tSyncIfTimingAdmRevert, tmnxEqSyncIfTimingPTPAlarm=tmnxEqSyncIfTimingPTPAlarm, tmnxCcagPathCcLastChanged=tmnxCcagPathCcLastChanged, tmnxChassisFanSpeed=tmnxChassisFanSpeed, tmnxMDAHiBwMcastTapCount=tmnxMDAHiBwMcastTapCount, tFPAccIngQGrpPlcrOvrCBS=tFPAccIngQGrpPlcrOvrCBS, tmnx7710HwV3v0Group=tmnx7710HwV3v0Group, tmnxEqMdaSyncENotCompatible=tmnxEqMdaSyncENotCompatible, tmnxMDAEntry=tmnxMDAEntry, tmnxMDAHwIndex=tmnxMDAHwIndex, tmnxMdaTypeName=tmnxMdaTypeName, tmnxChassisNotifyChassisId=tmnxChassisNotifyChassisId, tmnxChassisComp7710V6v0=tmnxChassisComp7710V6v0, tmnxHwNotification=tmnxHwNotification, tmnxChassisMinorLEDState=tmnxChassisMinorLEDState, tFPAccIngQGrpArbitStatFwdPkts=tFPAccIngQGrpArbitStatFwdPkts, tmnxIPsecIsaGrpId=tmnxIPsecIsaGrpId, tFPNetIngQGrpArbitStatName=tFPNetIngQGrpArbitStatName, tmnxSyncIfTimingRefOrder3=tmnxSyncIfTimingRefOrder3, tmnxHwTempSensor=tmnxHwTempSensor, tmnxFPAccIngQGrpLastChgd=tmnxFPAccIngQGrpLastChgd, tmnxCardTypeEntry=tmnxCardTypeEntry, tmnxCpmCardLastChange=tmnxCpmCardLastChange, tmnxCardEntry=tmnxCardEntry, tmnxSyncIfTimingPTPCfgQltyLevel=tmnxSyncIfTimingPTPCfgQltyLevel, tmnxCardCmplx1EgrFcsOccur=tmnxCardCmplx1EgrFcsOccur, tmnxFPNetIngQgPStDrpLPrioOcts=tmnxFPNetIngQgPStDrpLPrioOcts, tmnxFPAccIngQgPStDrpHPrioPkts=tmnxFPAccIngQgPStDrpHPrioPkts, tmnxCardSoftReset=tmnxCardSoftReset, tmnxEnvTempTooHigh=tmnxEnvTempTooHigh, tmnxSyncIfTimingBITSOutSource=tmnxSyncIfTimingBITSOutSource, tmnxChassisFanOperStatus=tmnxChassisFanOperStatus, tmnxCcagId=tmnxCcagId, tmnxFPAccIngQgPStDrpHPrioPktsL=tmnxFPAccIngQgPStDrpHPrioPktsL, tmnxFPAccIngQgPStDrpLPrioPktsL=tmnxFPAccIngQgPStDrpLPrioPktsL, tmnxHwFailureReason=tmnxHwFailureReason, tmnxFPNetIngQGrpPStatMode=tmnxFPNetIngQGrpPStatMode, tFPAccIngQGrpArbitStatFwdPktsH=tFPAccIngQGrpArbitStatFwdPktsH, tmnxFPNetIngQgPStOffHPrioOctsH=tmnxFPNetIngQgPStOffHPrioOctsH, tmnxHwParentRelPos=tmnxHwParentRelPos, tmnxFPHiBwMcastTapCount=tmnxFPHiBwMcastTapCount, tmnxPeFPGAVersionMismatch=tmnxPeFPGAVersionMismatch, tmnxHwResourcePeakWattage=tmnxHwResourcePeakWattage, tmnxCcagTable=tmnxCcagTable, TmnxPortAdminStatus=TmnxPortAdminStatus, tmnxSyncIfTimingRef1SrcHw=tmnxSyncIfTimingRef1SrcHw, tmnxFPNetIngQgPStDrpLPrioPktsL=tmnxFPNetIngQgPStDrpLPrioPktsL, tmnxCpmFlashModelNumber=tmnxCpmFlashModelNumber, tmnxChassisNotificationClear=tmnxChassisNotificationClear, tmnxHsmdaMdaSchOvrClass6Rate=tmnxHsmdaMdaSchOvrClass6Rate, tmnxSyncIfTimingRef2Alarm=tmnxSyncIfTimingRef2Alarm, tmnxHwObjs=tmnxHwObjs, tmnxMDAEquippedType=tmnxMDAEquippedType, tmnxHwMfgBoardNumber=tmnxHwMfgBoardNumber, tmnxChassisFanTable=tmnxChassisFanTable, tmnxChassisUpgrade=tmnxChassisUpgrade, tmnxSyncIfTimingRef1SrcPort=tmnxSyncIfTimingRef1SrcPort, tmnxIPsecIsaGrpDescription=tmnxIPsecIsaGrpDescription, tmnxPeConfigurationError=tmnxPeConfigurationError, tmnxMDAEgrHsmdaPoolPolicy=tmnxMDAEgrHsmdaPoolPolicy, tmnxCcmEntry=tmnxCcmEntry, tmnxChassisComp7710V5v0=tmnxChassisComp7710V5v0, tmnxCardTypeStatus=tmnxCardTypeStatus, tmnxChassisBaseMacAddress=tmnxChassisBaseMacAddress, tmnxCcagRowStatus=tmnxCcagRowStatus, tmnxCardCmplx2EgrFcsOccur=tmnxCardCmplx2EgrFcsOccur, tmnxCardCmplx1EgrFcsSrcSlots=tmnxCardCmplx1EgrFcsSrcSlots, tmnxSyncIfTimingOtherCPMState=tmnxSyncIfTimingOtherCPMState, tmnxIPsecIsaGrpIpTunnels=tmnxIPsecIsaGrpIpTunnels, tmnxChassisNotifyMismatchedVer=tmnxChassisNotifyMismatchedVer, tSyncIfTimingAdmRef1AdminStatus=tSyncIfTimingAdmRef1AdminStatus, tmnx77x0CESMDAV6v0Group=tmnx77x0CESMDAV6v0Group, tmnxMDASyncIfTimingStatus=tmnxMDASyncIfTimingStatus, tmnxCardPchipV5v0Group=tmnxCardPchipV5v0Group, tSyncIfTimingAdmRefOrder3=tSyncIfTimingAdmRefOrder3, tmnxFPNetIngQGrpTable=tmnxFPNetIngQGrpTable, tmnxSyncIfTimingBITSNationalUse=tmnxSyncIfTimingBITSNationalUse, tmnxChassisV5v0Compliance=tmnxChassisV5v0Compliance, tmnxEqWrongCard=tmnxEqWrongCard, tmnxMcmTypeDescription=tmnxMcmTypeDescription, tmnxCcagLastChanged=tmnxCcagLastChanged, tmnxHsmdaMdaSchOvrClass1WtInGrp=tmnxHsmdaMdaSchOvrClass1WtInGrp, tFPAccIngQGrpArbitStatFwdOctsL=tFPAccIngQGrpArbitStatFwdOctsL, tmnxMDAAtmMode=tmnxMDAAtmMode, tmnxFPAccIngQGrpTableLastChgd=tmnxFPAccIngQGrpTableLastChgd, tmnxCpmCardConfigLastSaved=tmnxCpmCardConfigLastSaved, tmnxPeBootromVersionMismatch=tmnxPeBootromVersionMismatch, tmnxSyncIfTimingBITSTxQltyLevel=tmnxSyncIfTimingBITSTxQltyLevel, tmnxChassisTable=tmnxChassisTable, tmnxMDAMcPathMgmtAdminState=tmnxMDAMcPathMgmtAdminState, tmnxMDAAllowedTypes=tmnxMDAAllowedTypes, tFPAccIngQGrpPlcrOvrLastChgd=tFPAccIngQGrpPlcrOvrLastChgd, tmnxChassisFanIndex=tmnxChassisFanIndex, tmnxChassisHsmdaV6v0Group=tmnxChassisHsmdaV6v0Group, tmnxFPNetIngQgPStUncolOctsOffH=tmnxFPNetIngQgPStUncolOctsOffH, tmnxCardTypeTable=tmnxCardTypeTable, tmnxCardCmplx1CAMErrorOccur=tmnxCardCmplx1CAMErrorOccur, tmnxRedSecondaryCPMStatus=tmnxRedSecondaryCPMStatus, tmnxHwAdminState=tmnxHwAdminState, tmnxCpmCardNum=tmnxCpmCardNum, tmnxFPAccIngQgPStOffLPrioPktsH=tmnxFPAccIngQgPStOffLPrioPktsH, tmnxSyncIfTimingV9v0Group=tmnxSyncIfTimingV9v0Group, tmnxChassisTypeDescription=tmnxChassisTypeDescription, tmnxChassisNumPwrSupplies=tmnxChassisNumPwrSupplies, tmnxSyncIfTimingBITSInUse=tmnxSyncIfTimingBITSInUse, tmnxEqCardPChipCamEvent=tmnxEqCardPChipCamEvent, tmnxFPQGrpGroup=tmnxFPQGrpGroup, tmnxCardCmplx1MemParityOccurTime=tmnxCardCmplx1MemParityOccurTime, TmnxAlarmState=TmnxAlarmState, tmnxCpmCardConfigLastModified=tmnxCpmCardConfigLastModified, tmnxSyncIfTimingStatus=tmnxSyncIfTimingStatus, tmnxCardSupportedTypes=tmnxCardSupportedTypes, tmnxChassisPowerSupplyPemType=tmnxChassisPowerSupplyPemType, tmnxChassisAdminMode=tmnxChassisAdminMode, tmnxChassisNotificationV6v1Group=tmnxChassisNotificationV6v1Group, tmnxHsmdaMdaSchOvrMaxRate=tmnxHsmdaMdaSchOvrMaxRate, tmnxChassisNotifyOID=tmnxChassisNotifyOID, tmnxHsmdaMdaSchOvrEntry=tmnxHsmdaMdaSchOvrEntry, tmnxSyncIfTimingFreqOffset=tmnxSyncIfTimingFreqOffset, tmnxCardAssignedType=tmnxCardAssignedType, TmnxRefInState=TmnxRefInState)
mibBuilder.exportSymbols("TIMETRA-CHASSIS-MIB", tFPAccIngQGrpArbitStatFwdOctsH=tFPAccIngQGrpArbitStatFwdOctsH, tmnxCpmFlashSerialNumber=tmnxCpmFlashSerialNumber, TmnxChassisMode=TmnxChassisMode, tmnxMcmHwIndex=tmnxMcmHwIndex, tmnxSyncIfTimingSystemQltyLevel=tmnxSyncIfTimingSystemQltyLevel, tSyncIfTimingAdmRef2AdminStatus=tSyncIfTimingAdmRef2AdminStatus, tmnxHsmdaMdaSchOvrClass7WtInGrp=tmnxHsmdaMdaSchOvrClass7WtInGrp, tmnxFPAccIngQgPStOffHPrioOctsH=tmnxFPAccIngQgPStOffHPrioOctsH, tmnxChassisUserModV7v0Group=tmnxChassisUserModV7v0Group, tmnxSyncIfTimingRef1CfgQltyLevel=tmnxSyncIfTimingRef1CfgQltyLevel, TmnxSlotNumOrZero=TmnxSlotNumOrZero, tmnxCardMemorySize=tmnxCardMemorySize, tmnxIPsecIsaGrpMultiActive=tmnxIPsecIsaGrpMultiActive, tmnxMDACcagId=tmnxMDACcagId, tmnxCardCmplx2CAMErrorOccur=tmnxCardCmplx2CAMErrorOccur, tmnxChassisUpdateWaitTime=tmnxChassisUpdateWaitTime, tmnxFPNetIngQgPStOffHPrioPkts=tmnxFPNetIngQgPStOffHPrioPkts, tmnxChassisTypeIndex=tmnxChassisTypeIndex, PYSNMP_MODULE_ID=tmnxChassisMIBModule, tmnxChassisNumPorts=tmnxChassisNumPorts, tmnxHwResourceMinVoltage=tmnxHwResourceMinVoltage, tmnxEqSyncIfTimingPTPAlarmClear=tmnxEqSyncIfTimingPTPAlarmClear, tmnxFPNetIngQGrpPStatTable=tmnxFPNetIngQGrpPStatTable, tmnxCcagPathCcHwMac=tmnxCcagPathCcHwMac, tmnxHwEntry=tmnxHwEntry, tmnxCardObjs=tmnxCardObjs, tmnxCcmTypeTable=tmnxCcmTypeTable, tmnxHwLastChange=tmnxHwLastChange, tmnxCardLastChange=tmnxCardLastChange, tSyncIfTimingAdmRef2SrcPort=tSyncIfTimingAdmRef2SrcPort, tmnxChassisFanRevision=tmnxChassisFanRevision, tmnxFPNetIngQGrpDescr=tmnxFPNetIngQGrpDescr, tSyncIfTimingAdmBITSOutAdmStatus=tSyncIfTimingAdmBITSOutAdmStatus, tmnxFPWredResvCbsMax=tmnxFPWredResvCbsMax, tmnxIpsecV10v0Group=tmnxIpsecV10v0Group, tmnxPeFirmwareVersionWarning=tmnxPeFirmwareVersionWarning, tmnxHwConformance=tmnxHwConformance, TmnxCcmType=TmnxCcmType, tmnxSyncIfTimingRef1NationalUse=tmnxSyncIfTimingRef1NationalUse, tmnxMDAV9v0Group=tmnxMDAV9v0Group, tmnxFPAccIngQgPStFwdOutProfPktsL=tmnxFPAccIngQgPStFwdOutProfPktsL, tmnxPeBootloaderVersionMismatch=tmnxPeBootloaderVersionMismatch, tmnxPeStorageProblem=tmnxPeStorageProblem, TmnxMdaType=TmnxMdaType, tmnxFPNetIngQgPStFwdOutProfPktsH=tmnxFPNetIngQgPStFwdOutProfPktsH, tmnxCcagPathLastChanged=tmnxCcagPathLastChanged, tmnxMdaTypeEntry=tmnxMdaTypeEntry, tmnxIPsecIsaGrpIsaChassis=tmnxIPsecIsaGrpIsaChassis, tmnxFPAccIngQGrpDescr=tmnxFPAccIngQGrpDescr, tmnxMdaTypeDescription=tmnxMdaTypeDescription, tSyncIfTimingAdmRef1SrcHw=tSyncIfTimingAdmRef1SrcHw, tmnxFPNetIngQgPStUncolPktsOffH=tmnxFPNetIngQgPStUncolPktsOffH, tmnxChassisType=tmnxChassisType, tmnxEqSyncIfTimingSystemQuality=tmnxEqSyncIfTimingSystemQuality, tmnxChassisPowerSupplyACStatus=tmnxChassisPowerSupplyACStatus, tmnxSyncIfTimingTable=tmnxSyncIfTimingTable, tmnxHwName=tmnxHwName, tmnxChassisOperMode=tmnxChassisOperMode, tmnxCpmCardSlotNum=tmnxCpmCardSlotNum, tmnxChassisComp7710V3v0=tmnxChassisComp7710V3v0, tmnxChassisAdminLastSetTimeout=tmnxChassisAdminLastSetTimeout, tmnxFPAccIngQgPStDrpLPrioOctsH=tmnxFPAccIngQgPStDrpLPrioOctsH, tmnxChassis7x50V8v0Compliance=tmnxChassis7x50V8v0Compliance, tmnxCcagPathCcMac=tmnxCcagPathCcMac, tmnxChassisNotificationObjects=tmnxChassisNotificationObjects, tmnxCardNumMdas=tmnxCardNumMdas, tmnxChassisTypeStatus=tmnxChassisTypeStatus, tmnxSlotObjs=tmnxSlotObjs, tmnxCpmCardSwitchToRedundantCard=tmnxCpmCardSwitchToRedundantCard, tSyncIfTimingAdmRef1SrcPort=tSyncIfTimingAdmRef1SrcPort, tmnxFPNetIngQgPStFwdInProfPkts=tmnxFPNetIngQgPStFwdInProfPkts, tmnxHwResourcePeakAmperage=tmnxHwResourcePeakAmperage, tmnxFPNetIngQGrpEntry=tmnxFPNetIngQGrpEntry, tmnxFPAccIngQgPStFwdOutProfOctsH=tmnxFPAccIngQgPStFwdOutProfOctsH, tmnxFPAccIngQgPStUncolPktsOffH=tmnxFPAccIngQgPStUncolPktsOffH, tmnxSyncIfTimingRef2NationalUse=tmnxSyncIfTimingRef2NationalUse, tmnxChassisV8v0Group=tmnxChassisV8v0Group, tmnxCpmCardNumCpus=tmnxCpmCardNumCpus, tmnxMDAMcPathMgmtSecInUseBw=tmnxMDAMcPathMgmtSecInUseBw, tmnxCardCapability=tmnxCardCapability, tmnxEqPowerSupplyRemoved=tmnxEqPowerSupplyRemoved, tSyncIfTimingAdmRef2CfgQltyLevel=tSyncIfTimingAdmRef2CfgQltyLevel, tmnxFPAccIngQgPStOffLPrioOcts=tmnxFPAccIngQgPStOffLPrioOcts, tmnxFPWredV7v0Group=tmnxFPWredV7v0Group, tmnxFPAccIngQGrpPStatMode=tmnxFPAccIngQGrpPStatMode, tmnxFPNetIngQgPStFwdInProfOcts=tmnxFPNetIngQgPStFwdInProfOcts, tmnxFPNetIngQgPStFwdOutProfOctsH=tmnxFPNetIngQgPStFwdOutProfOctsH, tSyncIfTimingAdmBITSOutSource=tSyncIfTimingAdmBITSOutSource, tmnxFabricEntry=tmnxFabricEntry, tmnxMdaObsoletedV10v0Group=tmnxMdaObsoletedV10v0Group, tmnxMDAMcPathMgmtBlkHoleInUseBw=tmnxMDAMcPathMgmtBlkHoleInUseBw, tmnxCcagPathRateOption=tmnxCcagPathRateOption, tmnxEqSyncIfTimingRefSwitch=tmnxEqSyncIfTimingRefSwitch, tmnxFPLastChanged=tmnxFPLastChanged, tmnxCcagPathCcMtu=tmnxCcagPathCcMtu, tmnxCpmFlashId=tmnxCpmFlashId, tmnxChassisPowerSupply1Status=tmnxChassisPowerSupply1Status, tFPNetIngQGrpArbitStatFwdPkts=tFPNetIngQGrpArbitStatFwdPkts, tmnxEqCardRemoved=tmnxEqCardRemoved, tmnxChassisPowerSupplyInputStatus=tmnxChassisPowerSupplyInputStatus, tmnxCardAllowedTypes=tmnxCardAllowedTypes, tmnxFabricSupportedTypes=tmnxFabricSupportedTypes, tmnxCardSoftResetState=tmnxCardSoftResetState, tmnxCardV3v0Group=tmnxCardV3v0Group, tmnxHwResourcePeakWattageTime=tmnxHwResourcePeakWattageTime, tmnxCpmCardConfigFileLastBootedHeader=tmnxCpmCardConfigFileLastBootedHeader, tmnxChassisAdminCtrlObjs=tmnxChassisAdminCtrlObjs, tmnxHsmdaMdaSchOvrTblLastChangd=tmnxHsmdaMdaSchOvrTblLastChangd, tmnxFPAccIngQgPStFwdInProfPkts=tmnxFPAccIngQgPStFwdInProfPkts, tmnxChassisV3v0Group=tmnxChassisV3v0Group, tFPAccIngQGrpPlcrOvrStatMode=tFPAccIngQGrpPlcrOvrStatMode, tFPAccIngQGrpPlcrOvrRowStatus=tFPAccIngQGrpPlcrOvrRowStatus, tmnxCpmCardOscillatorType=tmnxCpmCardOscillatorType)
