[tox]
minversion = 1.6
envlist = py35,py27,pypy,pep8
skipsdist = True

[testenv]
usedevelop = True
install_command = pip install -U {opts} {packages}
whitelist_externals = bash
                      find
                      rm
setenv =
   VIRTUAL_ENV={envdir}

deps = -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt

commands =
  find . -type f -name "*.py[c|o]" -delete
  bash tools/pretty_tox.sh '{posargs}'


[testenv:bandit]
deps = -r{toxinidir}/test-requirements.txt
commands = bandit -r zunclient -x tests -n5 -ll

[testenv:pypy]
deps = setuptools<3.2
       -r{toxinidir}/requirements.txt
       -r{toxinidir}/test-requirements.txt

[testenv:debug]
commands = oslo_debug_helper -t zunclient/tests {posargs}

[testenv:debug-py27]
basepython = python2.7
commands = oslo_debug_helper -t zunclient/tests {posargs}

[testenv:debug-py34]
basepython = python3.4
commands = oslo_debug_helper -t zunclient/tests {posargs}

[testenv:docs]
commands =
    python setup.py build_sphinx

[testenv:pep8]
commands =
  flake8
  # Run security linter
  bandit -r zunclient -x tests -n5 -ll

[testenv:releasenotes]
commands = sphinx-build -a -E -W -d releasenotes/build/doctrees -b html releasenotes/source releasenotes/build/html

[testenv:venv]
commands = {posargs}

[testenv:cover]
commands = {toxinidir}/tools/cover.sh {posargs}

[flake8]
# E123, E125 skipped as they are invalid PEP-8.

show-source = True
ignore = E123,E125
builtins = _
exclude=.venv,.git,.tox,dist,doc,*lib/python*,*egg,build

[hacking]
import_exceptions = zunclient._i18n

[testenv:functional]
commands = 
    find . -type f -name "*.py[c|o]" -delete
    ostestr {posargs}
setenv =
  {[testenv]setenv}
  OS_TEST_PATH = ./zunclient/tests/functional/osc/v1
# The OS_CACERT environment variable should be passed to the test
# environments to specify a CA bundle file to use in verifying a
# TLS (https) server certificate.
passenv = OS_*
