# -*- coding: utf-8 -*-
# @Author: NiccolÃ² Bonacchi
# @Date:   2018-02-02 17:19:09
# @Last Modified by:   nico
# @Last Modified time: 2018-05-14 15:34:14
import os
import numpy as np
import scipy.stats as st
from pythonosc import udp_client
import json
from dateutil import parser
import shutil


class ComplexEncoder(json.JSONEncoder):
    def default(self, obj):
        if hasattr(obj, 'reprJSON'):
            return obj.reprJSON()
        else:
            return json.JSONEncoder.default(self, obj)


class sounds():
    """Software solution for playing sounds"""
    def configure_sounddevice(SD=None):
        if SD is None:
            import sounddevice as SD
        SD.default.latency = 'low'
        SD.default.channels = 2
        return SD

    def make_sound(frequency=10000, duration=0.1, amplitude=1, fade_in=0.01):
        """builds sound to feed to sounddevice lib
        if frequency is set to -1 will produce white noise"""
        FsOut = 44100  # sample rate, depend on the sound card
        toneDuration = duration  # sec
        amplitude = amplitude  # [0->1]
        frequency = frequency  # Hz
        onsetDur = fade_in  # sec

        tvec = np.linspace(0, toneDuration, toneDuration * FsOut)
        sound = amplitude * np.sin(2 * np.pi * frequency * tvec)  # sound vec
        size = FsOut * onsetDur / 2  #
        dist = st.expon(0., size)  # distribution object provided by scipy
        F = dist.cdf  # cumulative density function
        ker = F(range(int(FsOut * toneDuration)))
        sound = sound * ker
        if frequency == -1:
            sound = amplitude * np.random.rand(sound.size)
        return sound

    def upload_sound(sound):
        pass

    def play_sound(sound_trig):
        pass


class rotary_encoder(object):

    def __init__(self, all_thresholds, gain):
        self.all_thresholds = all_thresholds
        self.wheel_perim = 31 * 2 * np.pi  # = 194,778744523
        self.wheel_deg_mm = 360 / self.wheel_perim
        self.factor = self.wheel_deg_mm / gain
        self.SET_THRESHOLDS = [x * self.factor for x in self.all_thresholds]
        self.ENABLE_THRESHOLDS = [(True if x != 0
                                   else False) for x in self.SET_THRESHOLDS]
        # ENABLE_THRESHOLDS needs 8 bools even if only 2 thresholds are set
        while len(self.ENABLE_THRESHOLDS) < 8:
            self.ENABLE_THRESHOLDS.append(False)

    def reprJSON(self):
        d = self.__dict__
        # d['all_thresholds'] = json.dumps(d['all_thresholds'])
        # d['SET_THRESHOLDS'] = json.dumps(d['SET_THRESHOLDS'])
        # d['ENABLE_THRESHOLDS'] = json.dumps(d['ENABLE_THRESHOLDS'])
        return d


class session_param_handler(object):
    """Session object imports user_settings and task_settings
    will and calculates other secondary session parameters,
    saves all params in a settings file.json"""

    def __init__(self, task_settings, user_settings):
        # =====================================================================
        # IMPORT task_settings AND user_settings
        # =====================================================================
        ts = {i: task_settings.__dict__[i]
              for i in [x for x in dir(task_settings) if '__' not in x]}
        self.__dict__.update(ts)
        us = {i: user_settings.__dict__[i]
              for i in [x for x in dir(user_settings) if '__' not in x]}
        self.__dict__.update(us)
        # =====================================================================
        # SOUNDS
        # =====================================================================
        self.GO_TONE = sounds.make_sound(frequency=self.GO_TONE_FREQUENCY,
                                         duration=self.GO_TONE_DURATION,
                                         amplitude=self.GO_TONE_AMPLITUDE)
        self.WHITE_NOISE = sounds.make_sound(
            frequency=-1,
            duration=self.WHITE_NOISE_DURATION,
            amplitude=self.WHITE_NOISE_AMPLITUDE)
        self.SD = sounds.configure_sounddevice()
        # =====================================================================
        # OSC CLIENT
        # =====================================================================
        self.OSC_CLIENT = self._osc_client_init()
        # =====================================================================
        # ROTARY ENCODER
        # =====================================================================
        self.ALL_THRESHOLDS = (self.STIM_POSITIONS +
                               self.QUIESCENCE_THRESHOLDS)
        self.ROTARY_ENCODER = rotary_encoder(self.ALL_THRESHOLDS,
                                             self.STIM_GAIN)
        # Names of the RE events generated by Bpod
        self.ENCODER_EVENTS = ['RotaryEncoder{}_{}'.format(
            self.ROTARY_ENCODER_SERIAL_PORT_NUM, x) for x in
            list(range(1, len(self.ALL_THRESHOLDS) + 1))]
        # Dict mapping threshold crossings with name ov RE event
        self.THRESHOLD_EVENTS = dict(zip(self.ALL_THRESHOLDS,
                                         self.ENCODER_EVENTS))
        # =====================================================================
        # FOLDER STRUCTURE AND DATA FILES
        # =====================================================================
        self.ROOT_IBL_FOLDER = self.ROOT_IBL_FOLDER
        self.ROOT_DATA_FOLDER = self._root_data_folder(self.ROOT_IBL_FOLDER)
        self.SUBJECT_NAME = ''.join([json.loads(x.replace("'", '"'))[0]
                                     for x in self.PYBPOD_SUBJECTS])
        self.SUBJECT_FOLDER = self._check_folder(self.ROOT_DATA_FOLDER,
                                                 self.SUBJECT_NAME)
        self.SESSION_DATETIME = parser.parse(self.PYBPOD_SESSION)
        self.SESSION_NAME = self.SESSION_DATETIME.date().isoformat()

        self.SESSION_FOLDER = self._check_folder(self.SUBJECT_FOLDER,
                                                 self.SESSION_NAME)
        self.SESSION_SUB_NAME = self._session_sub_name()
        self.SESSION_SUB_FOLDER = self._check_folder(self.SESSION_FOLDER,
                                                     self.SESSION_SUB_NAME)
        self.BASE_FILENAME = 'pycw_{}'.format(
            self.PYBPOD_PROTOCOL.split('ChoiceWorld')[0])
        self.SETTINGS_FILE_PATH = os.path.join(self.SESSION_SUB_FOLDER,
                                               self.BASE_FILENAME +
                                               '.settings.json')
        self.DATA_FILE_PATH = os.path.join(self.SESSION_SUB_FOLDER,
                                           self.BASE_FILENAME +
                                           '.data.json')
        # =====================================================================
        # REWARD INITIALIZATION
        # =====================================================================
        self.PREVIOUS_DATA_FILE = None
        self.LAST_TRIAL_DATA = self._load_last_trial()
        self.REWARD_CURRENT = self._init_reward()
        # =====================================================================
        # SAVE SETTINGS FILE AND TASK CODE
        # =====================================================================
        self._save_session_settings()
        self._save_task_code()

    # =========================================================================
    # METHODS
    # =========================================================================
    # SERIALIZER
    # =========================================================================
    def reprJSON(self):
        d = self.__dict__.copy()
        d['GO_TONE'] = 'go_tone(freq={}, dur={}, amp={})'.format(
            self.GO_TONE_FREQUENCY, self.GO_TONE_DURATION,
            self.GO_TONE_AMPLITUDE)
        d['WHITE_NOISE'] = 'white_noise(freq=-1, dur={}, amp={})'.format(
            self.WHITE_NOISE_DURATION, self.WHITE_NOISE_AMPLITUDE)
        d['SD'] = str(d['SD'])
        d['OSC_CLIENT'] = str(d['OSC_CLIENT'])
        d['SESSION_DATETIME'] = str(self.SESSION_DATETIME)
        return d

    # =========================================================================
    # FILES AND FOLDER STRUCTURE
    # =========================================================================
    @staticmethod
    def _check_folder(str1, str2=None):
        """Checks if folder path exists and if not creates it"""
        if str2 is not None:
            f = os.path.join(str1, str2)
        else:
            f = str1
        if not os.path.exists(f):
            os.mkdir(f)
        return f

    def _root_data_folder(self, rdf):

        if rdf is None:
            out = 'C:/IBL_root/pybpod_data/'
        else:
            # If folder was defined in settings check if endswith '/'
            out = rdf if rdf.endswith('/') else rdf + '/'
            out = os.path.join(out, 'pybpod_data')

        out = self._check_folder(out)
        return out

    def _session_sub_name(self):
        folders_in_session = [int(x) for x in os.listdir(self.SESSION_FOLDER)
                              if os.path.isdir(os.path.join(
                                  self.SESSION_FOLDER, x))]
        if not folders_in_session:
            out = str(1)
        else:
            out = str(int(max(folders_in_session)) + 1)

        return out

    def _previous_data_file(self):
        # sessions in subject_folder
        # get last
        # get last subsession
        # get abs path of *.data.json
        session_list = os.listdir(self.SUBJECT_FOLDER)
        session_list = [x for x in session_list if not x == self.SESSION_NAME]
        if not session_list:
            return None
        latest_session = max(session_list, key=os.path.getctime)
        sub_session_list = os.listdir(latest_session)
        latest_sub_session = max(sub_session_list, key=os.path.getctime)
        prev_session_files = os.listdir(latest_sub_session)
        prev_data_file = [x for x in prev_session_files if 'data.' in x]
        if prev_data_file:
            return prev_data_file[0]
        else:
            # Alternatively could call myself again after deleting session...
            del_file = open(latest_session + '/NO_DATA_FOUND_DELETE_SESSION',
                            'a')
            del_file.close()
            return None

        return prev_data_file

    def _load_last_trial(self, i=-1):
        if self.PREVIOUS_DATA_FILE is None:
            return
        trial_data = []
        with open(self.PREVIOUS_DATA_FILE, 'r') as f:
            for line in f:
                last_trial = json.loads(line)
                trial_data.append(last_trial)
        return trial_data[i] if trial_data else None

    # =========================================================================
    # REWARD
    # =========================================================================
    def _init_reward(self):
        if self.LAST_TRIAL_DATA is None:
            return self.REWARD_INIT_VALUE
        else:
            try:
                out = (self.LAST_TRIAL_DATA['reward_valve_time'] /
                       self.LAST_TRIAL_DATA['reward_calibration'])
            except IOError:
                out = (self.LAST_TRIAL_DATA['reward_valve_time'] /
                       self.CALIBRATION_VALUE)
            return out

    # =========================================================================
    # OSC CLIENT
    # =========================================================================
    def _osc_client_init(self):
        osc_client = udp_client.SimpleUDPClient(self.OSC_CLIENT_IP,
                                                self.OSC_CLIENT_PORT)
        return osc_client

    # =========================================================================
    # SERIALIZE AND SAVE
    # =========================================================================
    def _save_session_settings(self):
        with open(self.SETTINGS_FILE_PATH, 'a') as f:
            f.write(json.dumps(self, cls=ComplexEncoder))
            f.write('\n')
        return

    def _save_task_code(self):
        # Copy stimulus folder with bonsai workflow
        src = os.path.join(self.ROOT_IBL_FOLDER,
                           'pybpod_projects/IBL/tasks/basicChoiceWorld/')
        dst = os.path.join(self.SESSION_SUB_FOLDER, 'basicChoiceWorld/')
        shutil.copytree(src, dst)

    # =========================================================================
    # PUBLIC METHODS
    # =========================================================================
    def configure_rotary_encoder(self, RotaryEncoderModule):
        m = RotaryEncoderModule(self.ROTARY_ENCODER_PORT)
        m.set_zero_position()  # Not necessarily needed
        m.set_thresholds(self.ROTARY_ENCODER.SET_THRESHOLDS)
        m.enable_thresholds(self.ROTARY_ENCODER.ENABLE_THRESHOLDS)
        m.close()


if __name__ == '__main__':
    import _task_settings
    import _user_settings
    sph = session_param_handler(_task_settings, _user_settings)
