
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '7D40541C49BB8860CC5D2742C0C86E0A'
    
_lr_action_items = {'FCONST':([0,4,7,8,18,19,22,23,24,26,36,],[1,1,1,1,1,1,1,1,1,1,1,]),'ICONST':([0,4,7,8,18,19,22,23,24,26,36,],[10,10,10,10,10,10,10,10,10,10,10,]),'OR':([1,5,6,9,10,11,12,13,15,16,17,20,21,25,27,28,29,31,32,34,37,38,39,],[-22,-17,18,-19,-21,-18,-20,-16,18,-18,-16,-15,-14,-10,-11,18,18,-4,-20,-9,-8,-5,-20,]),'$end':([1,2,3,5,9,10,11,12,13,16,20,21,25,27,28,29,30,31,32,34,37,38,39,],[-22,-1,0,-17,-19,-21,-3,-20,-16,-18,-15,-14,-10,-11,-7,-6,-2,-4,-20,-9,-8,-5,-20,]),'LPAREN':([0,4,7,8,12,18,19,22,24,26,],[4,4,4,4,24,4,4,4,4,4,]),'PLUS':([0,4,7,8,18,19,22,24,26,],[8,8,8,8,8,8,8,8,8,]),'COMMA':([1,5,9,10,11,12,13,15,16,17,20,21,25,27,28,29,31,32,34,37,38,39,],[-22,-17,-19,-21,22,-20,-16,26,-18,-16,-15,-14,-10,-11,-7,-6,-4,-20,-9,-8,-5,-20,]),'RPAREN':([1,5,9,10,12,13,14,15,16,17,20,21,24,25,27,28,29,31,32,33,34,35,37,38,39,],[-22,-17,-19,-21,-20,-16,25,-13,-18,27,-15,-14,34,-10,-11,-7,-6,-4,-20,37,-9,-12,-8,-5,-20,]),'MINUS':([0,4,7,8,18,19,22,24,26,],[7,7,7,7,7,7,7,7,7,]),'EQUALS':([12,32,],[23,36,]),'NAME':([0,4,7,8,18,19,22,23,24,26,36,],[12,12,12,12,12,12,12,32,12,12,39,]),'AND':([1,5,6,9,10,11,12,13,15,16,17,20,21,25,27,28,29,31,32,34,37,38,39,],[-22,-17,19,-19,-21,-18,-20,-16,19,-18,-16,-15,-14,-10,-11,19,19,-4,-20,-9,-8,-5,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'parg':([0,4,7,8,18,19,22,24,26,],[6,15,6,6,28,29,6,15,15,]),'const':([0,4,7,8,18,19,22,23,24,26,36,],[9,9,9,9,9,9,9,9,9,9,9,]),'test':([0,4,7,8,18,19,22,23,24,26,36,],[5,5,5,5,5,5,5,31,5,5,38,]),'toplevel':([0,],[3,]),'call':([0,4,7,8,18,19,22,24,26,],[11,16,16,16,16,16,11,16,16,]),'calls':([0,22,],[2,30,]),'arg':([0,4,7,8,18,19,22,24,26,],[13,17,20,21,13,13,13,13,13,]),'arglist':([4,24,26,],[14,33,35,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> toplevel","S'",1,None,None,None),
  ('toplevel -> calls','toplevel',1,'p_toplevel','parser.py',124),
  ('calls -> call COMMA calls','calls',3,'p_calls','parser.py',136),
  ('calls -> call','calls',1,'p_calls','parser.py',137),
  ('call -> NAME EQUALS test','call',3,'p_op_eq','parser.py',148),
  ('call -> NAME EQUALS NAME EQUALS test','call',5,'p_fiql_ops','parser.py',155),
  ('call -> parg AND parg','call',3,'p_op_and','parser.py',162),
  ('call -> parg OR parg','call',3,'p_op_or','parser.py',169),
  ('call -> NAME LPAREN arglist RPAREN','call',4,'p_generic_call','parser.py',176),
  ('call -> NAME LPAREN RPAREN','call',3,'p_generic_call','parser.py',177),
  ('arg -> LPAREN arglist RPAREN','arg',3,'p_argarray','parser.py',187),
  ('arg -> LPAREN arg RPAREN','arg',3,'p_paren_arg','parser.py',195),
  ('arglist -> parg COMMA arglist','arglist',3,'p_arglist','parser.py',202),
  ('arglist -> parg','arglist',1,'p_arglist','parser.py',203),
  ('parg -> PLUS arg','parg',2,'p_prefixed_arg','parser.py',213),
  ('parg -> MINUS arg','parg',2,'p_prefixed_arg','parser.py',214),
  ('parg -> arg','parg',1,'p_prefixed_arg','parser.py',215),
  ('arg -> test','arg',1,'p_arg','parser.py',226),
  ('arg -> call','arg',1,'p_arg','parser.py',227),
  ('test -> const','test',1,'p_test_const','parser.py',235),
  ('const -> NAME','const',1,'p_const','parser.py',243),
  ('const -> ICONST','const',1,'p_const','parser.py',244),
  ('const -> FCONST','const',1,'p_const','parser.py',245),
]
