Metadata-Version: 1.1
Name: jaraco.compat
Version: 1.4.dev59+ng2dedadd.d20170123
Summary: Modules providing forward compatibility across some Python 2.x versions
Home-page: https://github.com/jaraco/jaraco.compat
Author: Jason R. Coombs
Author-email: jaraco@jaraco.com
License: UNKNOWN
Description: .. image:: https://img.shields.io/pypi/v/skeleton.svg
           :target: https://pypi.org/project/skeleton
        
        .. image:: https://img.shields.io/pypi/pyversions/skeleton.svg
        
        .. image:: https://img.shields.io/pypi/dm/skeleton.svg
        
        .. image:: https://img.shields.io/travis/jaraco/skeleton/master.svg
           :target: http://travis-ci.org/jaraco/skeleton
        
        ``jaraco.compat`` provides forward compatibility for Python packages,
        allowing future constructs to be borrowed before they're available in
        the standard library.
        
        License
        =======
        
        License is indicated in the project metadata (typically one or more
        of the Trove classifiers). For more details, see `this explanation
        <https://github.com/jaraco/skeleton/issues/1>`_.
        
        Usage
        =====
        
        Import functions from the appropriate pyXXcompat module in your python
        code. When you're eventually ready to upgrade beyond pyXX, you can
        easily locate (with a grep) and replace those functions with the
        canonical implementations.
        
        Example
        =======
        
        Say you want a namedtuple (introduced in Python 2.6) in a project which
        supports Python 2.5 and greater::
        
            from py25compat import namedtuple
            MyTuple = namedtuple('MyTuple', 'a b c')
            mt = MyTuple(1,2,3)
        
        With jaraco.compat installed, this code will run on Python 2.5 and
        greater. When the project is ready to move to Python 2.6, one can easily
        grep for py25compat and make the necessary replacements with minimal
        impact on the code. In this case::
        
            from collections import namedtuple
            MyTuple = namedtuple('MyTuple', 'a b c')
            mt = MyTuple(1,2,3)
        
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 2.3
Classifier: Programming Language :: Python :: 2.4
Classifier: Programming Language :: Python :: 2.5
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
