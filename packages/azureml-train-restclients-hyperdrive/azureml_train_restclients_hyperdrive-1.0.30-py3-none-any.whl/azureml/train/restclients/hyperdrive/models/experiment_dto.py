# coding: utf-8

"""
    HyperDrive

    HyperDrive REST API

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class ExperimentDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, all_jobs_generated=None, cancellation_requested=None, created=None, created_by_user_id=None, description=None, experiment_id=None, experiment_uri=None, generator_config=None, max_concurrent_jobs=None, max_duration_minutes=None, max_total_jobs=None, modified=None, name=None, platform=None, platform_config=None, policy_config=None, primary_metric_config=None, status=None, study_id=None, study_uri=None, hyperdrive_run_id=None):
        """
        ExperimentDto - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'all_jobs_generated': 'bool',
            'cancellation_requested': 'bool',
            'created': 'datetime',
            'created_by_user_id': 'int',
            'description': 'str',
            'experiment_id': 'int',
            'experiment_uri': 'str',
            'generator_config': 'ExperimentDtoGeneratorConfig',
            'max_concurrent_jobs': 'int',
            'max_duration_minutes': 'int',
            'max_total_jobs': 'int',
            'modified': 'datetime',
            'name': 'str',
            'platform': 'str',
            'platform_config': 'object',
            'policy_config': 'ExperimentDtoPolicyConfig',
            'primary_metric_config': 'ExperimentDtoPrimaryMetricConfig',
            'status': 'str',
            'study_id': 'int',
            'study_uri': 'str',
            'hyperdrive_run_id': 'str'
        }

        self.attribute_map = {
            'all_jobs_generated': 'all_jobs_generated',
            'cancellation_requested': 'cancellation_requested',
            'created': 'created',
            'created_by_user_id': 'created_by_user_id',
            'description': 'description',
            'experiment_id': 'experiment_id',
            'experiment_uri': 'experiment_uri',
            'generator_config': 'generator_config',
            'max_concurrent_jobs': 'max_concurrent_jobs',
            'max_duration_minutes': 'max_duration_minutes',
            'max_total_jobs': 'max_total_jobs',
            'modified': 'modified',
            'name': 'name',
            'platform': 'platform',
            'platform_config': 'platform_config',
            'policy_config': 'policy_config',
            'primary_metric_config': 'primary_metric_config',
            'status': 'status',
            'study_id': 'study_id',
            'study_uri': 'study_uri',
            'hyperdrive_run_id': 'hyperdrive_run_id'
        }

        self._all_jobs_generated = all_jobs_generated
        self._cancellation_requested = cancellation_requested
        self._created = created
        self._created_by_user_id = created_by_user_id
        self._description = description
        self._experiment_id = experiment_id
        self._experiment_uri = experiment_uri
        self._generator_config = generator_config
        self._max_concurrent_jobs = max_concurrent_jobs
        self._max_duration_minutes = max_duration_minutes
        self._max_total_jobs = max_total_jobs
        self._modified = modified
        self._name = name
        self._platform = platform
        self._platform_config = platform_config
        self._policy_config = policy_config
        self._primary_metric_config = primary_metric_config
        self._status = status
        self._study_id = study_id
        self._study_uri = study_uri
        self._hyperdrive_run_id = hyperdrive_run_id

    @property
    def all_jobs_generated(self):
        """
        Gets the all_jobs_generated of this ExperimentDto.


        :return: The all_jobs_generated of this ExperimentDto.
        :rtype: bool
        """
        return self._all_jobs_generated

    @all_jobs_generated.setter
    def all_jobs_generated(self, all_jobs_generated):
        """
        Sets the all_jobs_generated of this ExperimentDto.


        :param all_jobs_generated: The all_jobs_generated of this ExperimentDto.
        :type: bool
        """

        self._all_jobs_generated = all_jobs_generated

    @property
    def cancellation_requested(self):
        """
        Gets the cancellation_requested of this ExperimentDto.


        :return: The cancellation_requested of this ExperimentDto.
        :rtype: bool
        """
        return self._cancellation_requested

    @cancellation_requested.setter
    def cancellation_requested(self, cancellation_requested):
        """
        Sets the cancellation_requested of this ExperimentDto.


        :param cancellation_requested: The cancellation_requested of this ExperimentDto.
        :type: bool
        """

        self._cancellation_requested = cancellation_requested

    @property
    def created(self):
        """
        Gets the created of this ExperimentDto.


        :return: The created of this ExperimentDto.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """
        Sets the created of this ExperimentDto.


        :param created: The created of this ExperimentDto.
        :type: datetime
        """

        self._created = created

    @property
    def created_by_user_id(self):
        """
        Gets the created_by_user_id of this ExperimentDto.


        :return: The created_by_user_id of this ExperimentDto.
        :rtype: int
        """
        return self._created_by_user_id

    @created_by_user_id.setter
    def created_by_user_id(self, created_by_user_id):
        """
        Sets the created_by_user_id of this ExperimentDto.


        :param created_by_user_id: The created_by_user_id of this ExperimentDto.
        :type: int
        """

        self._created_by_user_id = created_by_user_id

    @property
    def description(self):
        """
        Gets the description of this ExperimentDto.


        :return: The description of this ExperimentDto.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ExperimentDto.


        :param description: The description of this ExperimentDto.
        :type: str
        """

        self._description = description

    @property
    def experiment_id(self):
        """
        Gets the experiment_id of this ExperimentDto.


        :return: The experiment_id of this ExperimentDto.
        :rtype: int
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id):
        """
        Sets the experiment_id of this ExperimentDto.


        :param experiment_id: The experiment_id of this ExperimentDto.
        :type: int
        """

        self._experiment_id = experiment_id

    @property
    def experiment_uri(self):
        """
        Gets the experiment_uri of this ExperimentDto.


        :return: The experiment_uri of this ExperimentDto.
        :rtype: str
        """
        return self._experiment_uri

    @experiment_uri.setter
    def experiment_uri(self, experiment_uri):
        """
        Sets the experiment_uri of this ExperimentDto.


        :param experiment_uri: The experiment_uri of this ExperimentDto.
        :type: str
        """

        self._experiment_uri = experiment_uri

    @property
    def generator_config(self):
        """
        Gets the generator_config of this ExperimentDto.


        :return: The generator_config of this ExperimentDto.
        :rtype: ExperimentDtoGeneratorConfig
        """
        return self._generator_config

    @generator_config.setter
    def generator_config(self, generator_config):
        """
        Sets the generator_config of this ExperimentDto.


        :param generator_config: The generator_config of this ExperimentDto.
        :type: ExperimentDtoGeneratorConfig
        """

        self._generator_config = generator_config

    @property
    def max_concurrent_jobs(self):
        """
        Gets the max_concurrent_jobs of this ExperimentDto.


        :return: The max_concurrent_jobs of this ExperimentDto.
        :rtype: int
        """
        return self._max_concurrent_jobs

    @max_concurrent_jobs.setter
    def max_concurrent_jobs(self, max_concurrent_jobs):
        """
        Sets the max_concurrent_jobs of this ExperimentDto.


        :param max_concurrent_jobs: The max_concurrent_jobs of this ExperimentDto.
        :type: int
        """

        self._max_concurrent_jobs = max_concurrent_jobs

    @property
    def max_duration_minutes(self):
        """
        Gets the max_duration_minutes of this ExperimentDto.


        :return: The max_duration_minutes of this ExperimentDto.
        :rtype: int
        """
        return self._max_duration_minutes

    @max_duration_minutes.setter
    def max_duration_minutes(self, max_duration_minutes):
        """
        Sets the max_duration_minutes of this ExperimentDto.


        :param max_duration_minutes: The max_duration_minutes of this ExperimentDto.
        :type: int
        """

        self._max_duration_minutes = max_duration_minutes

    @property
    def max_total_jobs(self):
        """
        Gets the max_total_jobs of this ExperimentDto.


        :return: The max_total_jobs of this ExperimentDto.
        :rtype: int
        """
        return self._max_total_jobs

    @max_total_jobs.setter
    def max_total_jobs(self, max_total_jobs):
        """
        Sets the max_total_jobs of this ExperimentDto.


        :param max_total_jobs: The max_total_jobs of this ExperimentDto.
        :type: int
        """

        self._max_total_jobs = max_total_jobs

    @property
    def modified(self):
        """
        Gets the modified of this ExperimentDto.


        :return: The modified of this ExperimentDto.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """
        Sets the modified of this ExperimentDto.


        :param modified: The modified of this ExperimentDto.
        :type: datetime
        """

        self._modified = modified

    @property
    def name(self):
        """
        Gets the name of this ExperimentDto.


        :return: The name of this ExperimentDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ExperimentDto.


        :param name: The name of this ExperimentDto.
        :type: str
        """

        self._name = name

    @property
    def platform(self):
        """
        Gets the platform of this ExperimentDto.


        :return: The platform of this ExperimentDto.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """
        Sets the platform of this ExperimentDto.


        :param platform: The platform of this ExperimentDto.
        :type: str
        """

        self._platform = platform

    @property
    def platform_config(self):
        """
        Gets the platform_config of this ExperimentDto.


        :return: The platform_config of this ExperimentDto.
        :rtype: object
        """
        return self._platform_config

    @platform_config.setter
    def platform_config(self, platform_config):
        """
        Sets the platform_config of this ExperimentDto.


        :param platform_config: The platform_config of this ExperimentDto.
        :type: object
        """

        self._platform_config = platform_config

    @property
    def policy_config(self):
        """
        Gets the policy_config of this ExperimentDto.


        :return: The policy_config of this ExperimentDto.
        :rtype: ExperimentDtoPolicyConfig
        """
        return self._policy_config

    @policy_config.setter
    def policy_config(self, policy_config):
        """
        Sets the policy_config of this ExperimentDto.


        :param policy_config: The policy_config of this ExperimentDto.
        :type: ExperimentDtoPolicyConfig
        """

        self._policy_config = policy_config

    @property
    def primary_metric_config(self):
        """
        Gets the primary_metric_config of this ExperimentDto.


        :return: The primary_metric_config of this ExperimentDto.
        :rtype: ExperimentDtoPrimaryMetricConfig
        """
        return self._primary_metric_config

    @primary_metric_config.setter
    def primary_metric_config(self, primary_metric_config):
        """
        Sets the primary_metric_config of this ExperimentDto.


        :param primary_metric_config: The primary_metric_config of this ExperimentDto.
        :type: ExperimentDtoPrimaryMetricConfig
        """

        self._primary_metric_config = primary_metric_config

    @property
    def status(self):
        """
        Gets the status of this ExperimentDto.


        :return: The status of this ExperimentDto.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this ExperimentDto.


        :param status: The status of this ExperimentDto.
        :type: str
        """

        self._status = status

    @property
    def study_id(self):
        """
        Gets the study_id of this ExperimentDto.


        :return: The study_id of this ExperimentDto.
        :rtype: int
        """
        return self._study_id

    @study_id.setter
    def study_id(self, study_id):
        """
        Sets the study_id of this ExperimentDto.


        :param study_id: The study_id of this ExperimentDto.
        :type: int
        """

        self._study_id = study_id

    @property
    def study_uri(self):
        """
        Gets the study_uri of this ExperimentDto.


        :return: The study_uri of this ExperimentDto.
        :rtype: str
        """
        return self._study_uri

    @study_uri.setter
    def study_uri(self, study_uri):
        """
        Sets the study_uri of this ExperimentDto.


        :param study_uri: The study_uri of this ExperimentDto.
        :type: str
        """

        self._study_uri = study_uri

    @property
    def hyperdrive_run_id(self):
        """
        Gets the hyperdrive_run_id of this ExperimentDto.


        :return: The hyperdrive_run_id of this ExperimentDto.
        :rtype: str
        """
        return self._hyperdrive_run_id

    @hyperdrive_run_id.setter
    def hyperdrive_run_id(self, hyperdrive_run_id):
        """
        Sets the hyperdrive_run_id of this ExperimentDto.


        :param hyperdrive_run_id: The hyperdrive_run_id of this ExperimentDto.
        :type: str
        """

        self._hyperdrive_run_id = hyperdrive_run_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
