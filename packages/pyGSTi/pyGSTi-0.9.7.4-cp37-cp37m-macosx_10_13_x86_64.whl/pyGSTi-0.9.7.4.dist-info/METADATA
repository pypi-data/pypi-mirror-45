Metadata-Version: 2.1
Name: pyGSTi
Version: 0.9.7.4
Summary: A python implementation of Gate Set Tomography
Home-page: http://www.pygsti.info
Author: Erik Nielsen, Kenneth Rudinger, Timothy Proctor, John Gamble, Robin Blume-Kohout
Author-email: pygsti@sandia.gov
License: UNKNOWN
Download-URL: https://github.com/pyGSTio/pyGSTi/tarball/master
Keywords: pygsti,tomography,gate set,pigsty,pig,quantum,qubit
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)
Classifier: Programming Language :: Python
Classifier: Topic :: Scientific/Engineering :: Physics
Classifier: Operating System :: Microsoft :: Windows
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Unix
Requires: numpy
Requires: scipy
Requires: plotly
Requires: ply
Provides-Extra: accurate memory profiling
Provides-Extra: travisci
Provides-Extra: nose testing
Provides-Extra: extension modules
Provides-Extra: multi-processor support
Provides-Extra: complete
Provides-Extra: pickling report tables
Provides-Extra: generating report notebooks
Provides-Extra: diamond norm computation
Provides-Extra: evolutionary optimization algorithm
Provides-Extra: generating PDFs of report figures
Provides-Extra: read/write message pack format
Requires-Dist: numpy
Requires-Dist: scipy
Requires-Dist: plotly (<=3.7.1)
Requires-Dist: ply
Provides-Extra: accurate memory profiling
Requires-Dist: psutil; extra == 'accurate memory profiling'
Provides-Extra: complete
Requires-Dist: nose; extra == 'complete'
Requires-Dist: nose-timer; extra == 'complete'
Requires-Dist: cython; extra == 'complete'
Requires-Dist: cvxpy; extra == 'complete'
Requires-Dist: cvxopt; extra == 'complete'
Requires-Dist: psutil; extra == 'complete'
Requires-Dist: mpi4py; extra == 'complete'
Requires-Dist: pandas; extra == 'complete'
Requires-Dist: matplotlib; extra == 'complete'
Requires-Dist: ipython; extra == 'complete'
Requires-Dist: notebook; extra == 'complete'
Requires-Dist: msgpack; extra == 'complete'
Requires-Dist: coverage; extra == 'complete'
Requires-Dist: zmq; extra == 'complete'
Requires-Dist: rednose; extra == 'complete'
Provides-Extra: diamond norm computation
Requires-Dist: cvxpy; extra == 'diamond norm computation'
Requires-Dist: cvxopt; extra == 'diamond norm computation'
Provides-Extra: evolutionary optimization algorithm
Requires-Dist: deap; extra == 'evolutionary optimization algorithm'
Provides-Extra: extension modules
Requires-Dist: cython; extra == 'extension modules'
Provides-Extra: generating PDFs of report figures
Requires-Dist: matplotlib; extra == 'generating PDFs of report figures'
Provides-Extra: generating report notebooks
Requires-Dist: ipython; extra == 'generating report notebooks'
Requires-Dist: notebook; extra == 'generating report notebooks'
Provides-Extra: multi-processor support
Requires-Dist: mpi4py; extra == 'multi-processor support'
Provides-Extra: nose testing
Requires-Dist: nose; extra == 'nose testing'
Provides-Extra: pickling report tables
Requires-Dist: pandas; extra == 'pickling report tables'
Provides-Extra: read/write message pack format
Requires-Dist: msgpack; extra == 'read/write message pack format'
Provides-Extra: travisci
Requires-Dist: nose; extra == 'travisci'
Requires-Dist: nose-timer; extra == 'travisci'
Requires-Dist: cython; extra == 'travisci'
Requires-Dist: cvxpy; extra == 'travisci'
Requires-Dist: cvxopt; extra == 'travisci'
Requires-Dist: psutil; extra == 'travisci'
Requires-Dist: mpi4py; extra == 'travisci'
Requires-Dist: pandas; extra == 'travisci'
Requires-Dist: msgpack; extra == 'travisci'
Requires-Dist: coverage; extra == 'travisci'
Requires-Dist: zmq; extra == 'travisci'
Requires-Dist: rednose; extra == 'travisci'

Gate set tomography (GST) is a quantum tomography protocol that provides full characterization of a quantum logic device (e.g. a qubit).  GST estimates a set of quantum logic gates and (simultaneously) the associated state preparation and measurement (SPAM) operations.  GST is self-calibrating.  This eliminates a key limitation of traditional quantum state and process tomography, which characterize either states (assuming perfect processes) or processes (assuming perfect state preparation and measurement), but not both together.  Compared with benchmarking protocols such as randomized benchmarking, GST provides much more detailed and accurate information about the gates, but demands more data.  The primary downside of GST has been its complexity.  Whereas benchmarking and state/process tomography data can be analyzed with relatively simple algorithms, GST requires more complex algorithms and more fine-tuning (linear GST is an exception that can be implemented easily).  pyGSTi addresses and eliminates this obstacle by providing a fully-featured, publicly available implementation of GST in the Python programming language.

The primary goals of the pyGSTi project are to:

- provide efficient and robust implementations of Gate Set Tomography algorithms;
- allow straightforward interoperability with other software;
- provide a powerful high-level interface suited to inexperienced programmers, so that
  common GST tasks can be performed using just one or two lines of code;
- use modular design to make it easy for users to modify, customize, and extend GST functionality.


