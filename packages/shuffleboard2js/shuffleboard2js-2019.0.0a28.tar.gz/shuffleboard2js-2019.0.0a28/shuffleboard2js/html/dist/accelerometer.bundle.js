!function(e){var t={};function o(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,o),s.l=!0,s.exports}o.m=e,o.c=t,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)o.d(r,s,function(t){return e[t]}.bind(null,s));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=445)}({1:function(e,t){e.exports=riot},162:function(e,t,o){e.exports=o.p+"assets/media/accelerometer.png"},445:function(e,t,o){e.exports=o(446)},446:function(e,t,o){"use strict";o.r(t);o(447),o(448);var r=o(162),s=o.n(r);dashboard.registerWidget("accelerometer",{label:"Accelerometer",category:"Sensors",acceptedTypes:["Accelerometer"],image:s.a,minX:3,minY:2,properties:{tag:"accelerometer-props",defaults:{showText:!0,numDecimals:2,showTickMarks:!0,min:-1,max:1}}})},447:function(e,t,o){o(1).tag2("accelerometer",'<div class="accelerometers"> <div class="accelerometer"> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getForegroundStyle()}"></div> <p class="text" if="{opts.properties.showText}"> {value.toFixed(opts.properties.numDecimals)} g </p> </div> <axis ticks="3" vertical="{false}" if="{opts.properties.showTickMarks}"></axis> </div> </div>','accelerometer .accelerometers,[data-is="accelerometer"] .accelerometers{ display: flex; flex-direction: column; justify-content: center; height: 100%; } accelerometer .bar,[data-is="accelerometer"] .bar{ position: relative; width: calc(100% - 20px); height: 20px; border-radius: 3px; margin: 0 10px; background: #DDD; } accelerometer .foreground,[data-is="accelerometer"] .foreground{ position: absolute; top: 0; height: 20px; background: lightblue; border-radius: 3px; } accelerometer .text,[data-is="accelerometer"] .text{ font-size: 15px; line-height: 18px; position: relative; } accelerometer axis,[data-is="accelerometer"] axis{ width: calc(100% - 20px); margin: 2px auto 0; }',"",function(e){this.value=0,this.getForegroundStyle=(()=>{const e=this.opts.properties.min,t=this.opts.properties.max,o=Math.clamp(this.value,e,t);return t<0?{width:Math.abs(o-t)/(t-e)*100+"%",left:"auto",right:0}:e>0?{width:Math.abs(o-e)/(t-e)*100+"%",left:0,right:"auto"}:o>0?{width:Math.abs(o)/(t-e)*100+"%",left:Math.abs(e)/(t-e)*100+"%",right:"auto"}:{width:Math.abs(o)/(t-e)*100+"%",left:"auto",right:Math.abs(t)/(t-e)*100+"%"}}),this.on("update",()=>{"Value"in this.opts.table&&(this.value=this.opts.table.Value)})})},448:function(e,t,o){o(1).tag2("accelerometer-props",'<form> <div class="form-group row"> <label for="showText" class="col-sm-4 col-form-label text-right">Show text</label> <div class="col-sm-1"> <div class="form-check"> <input class="form-check-input position-static" type="checkbox" id="showText" checked="{opts.properties.showText}" onchange="{onShowTextChange}"> </div> </div> </div> <div class="form-group row"> <label for="numDecimals" class="col-sm-4 col-form-label text-right">Num decimals</label> <div class="col-sm-8"> <input class="form-control" id="numDecimals" riot-value="{opts.properties.numDecimals}" onchange="{onNumDecimalsChange}" type="{\'number\'}"> </div> </div> <div class="form-group row"> <label for="showTickMarks" class="col-sm-4 col-form-label text-right">Show tick marks</label> <div class="col-sm-1"> <div class="form-check"> <input class="form-check-input position-static" type="checkbox" id="showTickMarks" checked="{opts.properties.showTickMarks}" onchange="{onShowTickMarksChange}"> </div> </div> </div> <div class="form-group row"> <label for="min" class="col-sm-4 col-form-label text-right">Min</label> <div class="col-sm-8"> <input class="form-control" id="min" riot-value="{opts.properties.min}" onchange="{onMinChange}" type="{\'number\'}"> </div> </div> <div class="form-group row"> <label for="max" class="col-sm-4 col-form-label text-right">Max</label> <div class="col-sm-8"> <input class="form-control" id="max" riot-value="{opts.properties.max}" onchange="{onMaxChange}" type="{\'number\'}"> </div> </div> </form>','accelerometer-props .form-check,[data-is="accelerometer-props"] .form-check{ padding-top: 6px; }',"",function(e){this.onShowTextChange=(e=>{this.opts.properties.showText=e.target.checked}),this.onNumDecimalsChange=(e=>{const t=e.target.value;t>=0&&(this.opts.properties.numDecimals=t)}),this.onShowTickMarksChange=(e=>{this.opts.properties.showTickMarks=e.target.checked}),this.onMinChange=(e=>{const t=parseFloat(e.target.value);this.opts.properties.min=t,t>this.opts.properties.max&&(this.opts.properties.max=t)}),this.onMaxChange=(e=>{const t=parseFloat(e.target.value);this.opts.properties.max=t,t<this.opts.properties.min&&(this.opts.properties.min=t)})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,