!function(t){var e={};function n(s){if(e[s])return e[s].exports;var i=e[s]={i:s,l:!1,exports:{}};return t[s].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,s){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(n.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(s,i,function(e){return t[e]}.bind(null,i));return s},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=453)}({1:function(t,e){t.exports=riot},164:function(t,e,n){t.exports=n.p+"assets/media/basic-fms-info.png"},453:function(t,e,n){t.exports=n(454)},454:function(t,e,n){"use strict";n.r(e);n(455);var s=n(164),i=n.n(s);dashboard.registerWidget("basic-fms-info",{label:"Basic FMS Info",category:"Basic",acceptedTypes:["FMSInfo"],image:i.a,minX:7,minY:3})},455:function(t,e,n){n(1).tag2("basic-fms-info",'<div class="fms-info-container"> <p> <strong> <span>{getEventName()}</span> <span>{getMatchType()}</span> <span>match {getMatchNumber()}</span> </strong> </p> <p style="margin-bottom: 7px; font-weight: normal"> <span style="margin-right: 5px;"> <span if="{isFmsAttached()}"><span class="oi oi-check"></span> FMS connected</span> <span if="{!isFmsAttached()}"><span class="oi oi-x"></span> FMS disconnected</span> </span> <span> <span if="{isDsAttached()}"><span class="oi oi-check"></span> DriverStation connected</span> <span if="{!isDsAttached()}"><span class="oi oi-x"></span> DriverStation disconnected</span> </span> </p> <p style="font-weight: normal"> Robot state: {getRobotState()} </p> </div>','basic-fms-info p,[data-is="basic-fms-info"] p{ font-size: 15px; } basic-fms-info .fms-info-container,[data-is="basic-fms-info"] .fms-info-container{ display: flex; flex-direction: column; justify-content: center; height: 100%; } basic-fms-info .oi-check,[data-is="basic-fms-info"] .oi-check{ color: green; font-size: 13px; } basic-fms-info .oi-x,[data-is="basic-fms-info"] .oi-x{ color: red; font-size: 13px; }',"",function(t){const e=["Unknown","Practice","Qualification","Elimination"];this.getRobotState=(()=>this.isEnabled()?this.isTest()?"Test":this.isAuto()?"Autonomous":"Teleoperated":"Disabled"),this.getMatchType=(()=>"MatchType"in this.opts.table?e[this.opts.table.MatchType]:"Unknown"),this.getMatchNumber=(()=>"MatchNumber"in this.opts.table?this.opts.table.MatchNumber:0),this.getEventName=(()=>"EventName"in this.opts.table?this.opts.table.EventName:""),this.isEnabled=(()=>!!(1&this.opts.table.FMSControlData)),this.isAuto=(()=>!!(2&this.opts.table.FMSControlData)),this.isTest=(()=>!!(4&this.opts.table.FMSControlData)),this.isEmergencyStopped=(()=>!!(8&this.opts.table.FMSControlData)),this.isFmsAttached=(()=>!!(16&this.opts.table.FMSControlData)),this.isDsAttached=(()=>!!(32&this.opts.table.FMSControlData))})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,