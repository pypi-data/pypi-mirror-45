!function(e){var t={};function r(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,o){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(r.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(o,i,function(t){return e[t]}.bind(null,i));return o},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=449)}({1:function(e,t){e.exports=riot},163:function(e,t,r){e.exports=r.p+"assets/media/3-axis-accelerometer.png"},449:function(e,t,r){e.exports=r(450)},450:function(e,t,r){"use strict";r.r(t);r(451),r(452);var o=r(163),i=r.n(o);dashboard.registerWidget("three-axis-accelerometer",{label:"3-Axis Accelerometer",category:"Sensors",acceptedTypes:["3AxisAccelerometer"],image:i.a,minX:4,minY:4,properties:{tag:"three-axis-accelerometer-props",defaults:{range:2,showText:!0,numDecimals:2,showTickMarks:!0}}})},451:function(e,t,r){r(1).tag2("three-axis-accelerometer",'<div class="accelerometers"> <div class="accelerometer-container"> <p>X</p> <div class="accelerometer"> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getXForegroundStyle()}"></div> <p class="text" if="{opts.properties.showText}"> {x.toFixed(opts.properties.numDecimals)} g </p> </div> <axis ticks="3" vertical="{false}" if="{opts.properties.showTickMarks}"></axis> </div> </div> <div class="accelerometer-container"> <p>Y</p> <div class="accelerometer"> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getYForegroundStyle()}"></div> <p class="text" if="{opts.properties.showText}"> {y.toFixed(opts.properties.numDecimals)} g </p> </div> <axis ticks="3" vertical="{false}" if="{opts.properties.showTickMarks}"></axis> </div> </div> <div class="accelerometer-container"> <p>Z</p> <div class="accelerometer"> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getZForegroundStyle()}"></div> <p class="text" if="{opts.properties.showText}"> {z.toFixed(opts.properties.numDecimals)} g </p> </div> <axis ticks="3" vertical="{false}" if="{opts.properties.showTickMarks}"></axis> </div> </div> </div>','three-axis-accelerometer .accelerometers,[data-is="three-axis-accelerometer"] .accelerometers{ display: flex; flex-direction: column; justify-content: center; height: 100%; padding: 10px; } three-axis-accelerometer .accelerometer-container,[data-is="three-axis-accelerometer"] .accelerometer-container{ display: flex; margin-bottom: 10px; align-items: center; } three-axis-accelerometer .accelerometer-container > p,[data-is="three-axis-accelerometer"] .accelerometer-container > p{ width: 30px; margin-bottom: 0; } three-axis-accelerometer .accelerometer,[data-is="three-axis-accelerometer"] .accelerometer{ width: 100%; } three-axis-accelerometer .bar,[data-is="three-axis-accelerometer"] .bar{ position: relative; width: calc(100% - 20px); height: 20px; border-radius: 3px; margin: 0 10px; background: #DDD; } three-axis-accelerometer .foreground,[data-is="three-axis-accelerometer"] .foreground{ position: absolute; top: 0; height: 20px; background: lightblue; border-radius: 3px; } three-axis-accelerometer .text,[data-is="three-axis-accelerometer"] .text{ font-size: 15px; line-height: 18px; position: relative; } three-axis-accelerometer axis,[data-is="three-axis-accelerometer"] axis{ width: calc(100% - 20px); margin: 2px auto 0; }',"",function(e){this.x=0,this.y=0,this.z=0,this.getXForegroundStyle=(()=>this.getForegroundStyle(this.x)),this.getYForegroundStyle=(()=>this.getForegroundStyle(this.y)),this.getZForegroundStyle=(()=>this.getForegroundStyle(this.z)),this.getForegroundStyle=(e=>{const t=this.opts.properties.min,r=this.opts.properties.max,o=Math.clamp(e,t,r);return r<0?{width:Math.abs(o-r)/(r-t)*100+"%",left:"auto",right:0}:t>0?{width:Math.abs(o-t)/(r-t)*100+"%",left:0,right:"auto"}:o>0?{width:Math.abs(o)/(r-t)*100+"%",left:Math.abs(t)/(r-t)*100+"%",right:"auto"}:{width:Math.abs(o)/(r-t)*100+"%",left:"auto",right:Math.abs(r)/(r-t)*100+"%"}}),this.on("update",()=>{"X"in this.opts.table&&(this.x=this.opts.table.X),"Y"in this.opts.table&&(this.y=this.opts.table.Y),"Z"in this.opts.table&&(this.z=this.opts.table.Z)}),this.on("mount",()=>{setTimeout(()=>{this.trigger("resize")},1e3)})})},452:function(e,t,r){r(1).tag2("three-axis-accelerometer-props",'<form> <div class="form-group row"> <label for="range" class="col-sm-4 col-form-label text-right">Range</label> <div class="col-sm-8"> <select class="form-control" id="range"> <option value="2">k2G</option> <option value="4">k4G</option> <option value="8">k8G</option> <option value="16">k16G</option> </select> </div> </div> <div class="form-group row"> <label for="showText" class="col-sm-4 col-form-label text-right">Show text</label> <div class="col-sm-1"> <div class="form-check"> <input class="form-check-input position-static" type="checkbox" id="showText" checked="{opts.properties.showText}" onchange="{onShowTextChange}"> </div> </div> </div> <div class="form-group row"> <label for="numDecimals" class="col-sm-4 col-form-label text-right">Num decimals</label> <div class="col-sm-8"> <input class="form-control" id="numDecimals" riot-value="{opts.properties.numDecimals}" onchange="{onNumDecimalsChange}" type="{\'number\'}"> </div> </div> <div class="form-group row"> <label for="showTickMarks" class="col-sm-4 col-form-label text-right">Show tick marks</label> <div class="col-sm-1"> <div class="form-check"> <input class="form-check-input position-static" type="checkbox" id="showTickMarks" checked="{opts.properties.showTickMarks}" onchange="{onShowTickMarksChange}"> </div> </div> </div> </form>','three-axis-accelerometer-props .form-check,[data-is="three-axis-accelerometer-props"] .form-check{ padding-top: 6px; }',"",function(e){this.onShowTextChange=(e=>{this.opts.properties.showText=e.target.checked}),this.onNumDecimalsChange=(e=>{const t=e.target.value;t>=0&&(this.opts.properties.numDecimals=t)}),this.onShowTickMarksChange=(e=>{this.opts.properties.showTickMarks=e.target.checked})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,