!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=478)}({1:function(e,t){e.exports=riot},172:function(e,t,n){e.exports=n(479)},173:function(e,t,n){e.exports=n.p+"assets/media/gauge.png"},478:function(e,t,n){e.exports=n(498)},479:function(e,t,n){var a,i,r;i="undefined"==typeof window?this:window,r=function(e,t){var n=e.document,a=Array.prototype.slice,i=e.requestAnimationFrame||e.mozRequestAnimationFrame||e.webkitRequestAnimationFrame||e.msRequestAnimationFrame||function(e){return setTimeout(e,1e3/60)};return function(){var e="http://www.w3.org/2000/svg",t={centerX:50,centerY:50},r={dialRadius:40,dialStartAngle:135,dialEndAngle:45,value:0,max:100,min:0,valueDialClass:"value",valueClass:"value-text",dialClass:"dial",gaugeClass:"gauge",showValue:!0,gaugeColor:null,label:function(e){return Math.round(e)}};function o(t,a,i){var r=n.createElementNS(e,t);for(var o in a)r.setAttribute(o,a[o]);return i&&i.forEach(function(e){r.appendChild(e)}),r}function s(e,t){return e*t/100}function u(e,t,n){var a=Number(e);return a>n?n:a<t?t:a}function l(e,t,n,a){var i=a*Math.PI/180;return{x:Math.round(1e3*(e+n*Math.cos(i)))/1e3,y:Math.round(1e3*(t+n*Math.sin(i)))/1e3}}return function(e,n){n=function(){var e=arguments[0];return a.call(arguments,1).forEach(function(t){for(k in t)t.hasOwnProperty(k)&&(e[k]=t[k])}),e}({},r,n);var g,c,d,f=e,p=n.max,m=n.min,h=u(n.value,m,p),v=n.dialRadius,b=n.showValue,x=n.dialStartAngle,y=n.dialEndAngle,w=n.valueDialClass,M=n.valueClass,C=(n.valueLabelClass,n.dialClass),A=n.gaugeClass,S=n.color,z=n.label,j=n.viewBox;if(x<y){console.log("WARN! startAngle < endAngle, Swapping");var O=x;x=y,y=O}function V(e,n,a,i){var r=function(e,n,a){var i=t.centerX,r=t.centerY;return{end:l(i,r,e,a),start:l(i,r,e,n)}}(e,n,a),o=r.start,s=r.end,u=void 0===i?1:i;return["M",o.x,o.y,"A",e,e,0,u,1,s.x,s.y].join(" ")}function P(e,t){var a=function(e,t,n){return 100*(e-t)/(n-t)}(e,m,p),i=s(a,360-Math.abs(x-y)),r=i<=180?0:1;b&&(g.textContent=z.call(n,e)),c.setAttribute("d",V(v,x,i+x,r))}function R(e,t){var n=S(e),a=1e3*t,i="stroke "+a+"ms ease";c.style=["stroke: "+n,"-webkit-transition: "+i,"-moz-transition: "+i,"transition: "+i].join(";")}return d={setMaxValue:function(e){p=e},setValue:function(e){h=u(e,m,p),S&&R(h,0),P(h)},setValueAnimated:function(e,t){var n=h;h=u(e,m,p),n!==h&&(S&&R(h,t),function(e){var t=e.duration,n=1,a=60*t,r=e.start||0,o=e.end-r,s=e.step,u=e.easing||function(e){return(e/=.5)<1?.5*Math.pow(e,3):.5*(Math.pow(e-2,3)+2)};i(function e(){var t=n/a,l=o*u(t)+r;s(l,n);n+=1;t<1&&i(e)})}({start:n||0,end:h,duration:t||1,step:function(e,t){P(e,t)}}))},getValue:function(){return h}},function(e){g=o("text",{x:50,y:50,fill:"#999",class:M,"font-size":"100%","font-family":"sans-serif","font-weight":"normal","text-anchor":"middle","alignment-baseline":"middle","dominant-baseline":"central"}),c=o("path",{class:w,fill:"none",stroke:"#666","stroke-width":2.5,d:V(v,x,x)});var t=s(100,360-Math.abs(x-y)),n=o("svg",{viewBox:j||"0 0 100 100",class:A},[o("path",{class:C,fill:"none",stroke:"#eee","stroke-width":2,d:V(v,x,y,t<=180?0:1)}),g,c]);e.appendChild(n)}(f),d.setValue(h),d}}()}(i),void 0===(a=function(){return r}.call(t,n,t,e))||(e.exports=a)},480:function(e,t,n){n(1).tag2("gauge-props",'<form> <div class="form-group row"> <label for="min" class="col-sm-4 col-form-label text-right">Min</label> <div class="col-sm-8"> <input class="form-control" id="min" riot-value="{opts.properties.min}" onchange="{onMinChange}" type="{\'number\'}"> </div> </div> <div class="form-group row"> <label for="max" class="col-sm-4 col-form-label text-right">Max</label> <div class="col-sm-8"> <input class="form-control" id="max" riot-value="{opts.properties.max}" onchange="{onMaxChange}" type="{\'number\'}"> </div> </div> </form>',"","",function(e){this.onMinChange=(e=>{const t=parseFloat(e.target.value);this.opts.properties.min=t,t>this.opts.properties.max&&(this.opts.properties.max=t)}),this.onMaxChange=(e=>{const t=parseFloat(e.target.value);this.opts.properties.max=t,t<this.opts.properties.min&&(this.opts.properties.min=t)})})},498:function(e,t,n){"use strict";n.r(t);var a=n(172),i=n.n(a);n(1).tag2("gauge",'<div class="gauge-container-container"> <div ref="gauge" class="gauge-container {opts.properties.style}"></div> </div>','gauge .gauge-container-container,[data-is="gauge"] .gauge-container-container{ height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; } gauge .gauge-container,[data-is="gauge"] .gauge-container{ display: block; padding: 10px; } gauge .gauge-container > .gauge > .dial,[data-is="gauge"] .gauge-container > .gauge > .dial{ stroke: #ddd; stroke-width: 3; fill: rgba(0,0,0,0); } gauge .gauge-container > .gauge > .value,[data-is="gauge"] .gauge-container > .gauge > .value{ stroke: rgb(47, 180, 200); stroke-width: 3; fill: rgba(0,0,0,0); } gauge .gauge-container > .gauge > .value-text,[data-is="gauge"] .gauge-container > .gauge > .value-text{ fill: black; font-family: sans-serif; font-size: 1em; }',"",function(e){this.gauge=null,this.on("mount",()=>{this.initialize()}),this.setSize=(()=>{const e=this.root.getBoundingClientRect(),t=e.width,n=e.height,a=Math.min(t,n);$(this.refs.gauge).css("width",a+"px")}),this.initialize=(()=>{$(this.refs.gauge).html(""),this.gauge=i()(this.refs.gauge,{min:this.opts.properties.min,max:this.opts.properties.max,value:0}),this.setSize()}),this.on("propertiesUpdate",()=>{this.initialize()}),this.on("resize",()=>{this.setSize()}),this.on("update",()=>{this.gauge&&"number"==typeof this.opts.table&&this.gauge.setValue(this.opts.table)})});n(480);var r=n(173),o=n.n(r);dashboard.registerWidget("gauge",{label:"Gauge",category:"Basic",acceptedTypes:["number"],image:o.a,minX:3,minY:2,properties:{tag:"gauge-props",defaults:{min:0,max:100}}})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,