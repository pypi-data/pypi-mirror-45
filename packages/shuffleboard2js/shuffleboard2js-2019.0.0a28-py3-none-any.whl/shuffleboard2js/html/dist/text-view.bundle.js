!function(t){var e={};function n(o){if(e[o])return e[o].exports;var i=e[o]={i:o,l:!1,exports:{}};return t[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(o,i,function(e){return t[e]}.bind(null,i));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=481)}({1:function(t,e){t.exports=riot},174:function(t,e,n){t.exports=n.p+"assets/media/text-view.png"},481:function(t,e,n){t.exports=n(482)},482:function(t,e,n){"use strict";n.r(e);n(483);var o=n(174),i=n.n(o);dashboard.registerWidget("text-view",{label:"Text View",category:"Basic",acceptedTypes:["boolean","number","string"],image:i.a,minX:2,minY:2})},483:function(t,e,n){n(1).tag2("text-view",'<div class="text-container"> <input type="{type}" onchange="{onChange}" riot-value="{value}" ref="input"> </div>','text-view .text-container,[data-is="text-view"] .text-container{ height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; } text-view input,[data-is="text-view"] input{ border: none; outline: none; border-bottom: 2px solid lightgray; padding-bottom: 5px; width: calc(100% - 30px); background: none; } text-view input:focus,[data-is="text-view"] input:focus{ border-bottom: 2px solid lightblue; }',"",function(t){this.type="text",this.value="",this.lastTableValue="",this.on("update",()=>{this.type="number"==typeof this.opts.table?"number":"text",this.lastTableValue!==this.opts.table&&("object"==typeof this.opts.table?this.value="":this.value=this.opts.table.toString()),this.lastTableValue=this.opts.table}),this.onChange=(t=>{const e=typeof this.opts.table,n=t.target.value;"string"===e?NetworkTables.putValue(this.opts.ntRoot,n):"number"===e?NetworkTables.putValue(this.opts.ntRoot,parseFloat(n)):"boolean"===e&&("true"===n?NetworkTables.putValue(this.opts.ntRoot,!0):"false"===n&&NetworkTables.putValue(this.opts.ntRoot,!1))})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,