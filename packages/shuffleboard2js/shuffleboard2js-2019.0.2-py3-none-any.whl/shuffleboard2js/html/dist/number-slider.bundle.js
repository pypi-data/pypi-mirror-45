!function(e){var t={};function r(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,r),s.l=!0,s.exports}r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)r.d(i,s,function(t){return e[t]}.bind(null,s));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=471)}({1:function(e,t){e.exports=riot},170:function(e,t,r){e.exports=r.p+"assets/media/number-slider.png"},471:function(e,t,r){e.exports=r(472)},472:function(e,t,r){"use strict";r.r(t);r(473),r(474);var i=r(170),s=r.n(i);dashboard.registerWidget("number-slider",{label:"Number Slider",category:"Basic",acceptedTypes:["number"],image:s.a,minX:3,minY:2,properties:{tag:"number-slider-props",defaults:{min:-1,max:1,blockIncrement:.0625}}})},473:function(e,t,r){r(1).tag2("number-slider",'<div class="slider-container"> <input ref="slider" type="range" min="{opts.properties.min}" max="{opts.properties.max}" riot-value="{value}" step="{opts.properties.blockIncrement}" onchange="{onChange}" onmousedown="{onDragStart}" onmouseup="{onDragEnd}"> <axis ticks="5" vertical="{false}" range="{[opts.properties.min, opts.properties.max]}"></axis> </div>','number-slider .slider-container,[data-is="number-slider"] .slider-container{ height: 100%; display: flex; flex-direction: column; align-items: center; justify-content: center; } number-slider input,[data-is="number-slider"] input{ width: 85%; max-width: calc(100% - 60px); } number-slider axis,[data-is="number-slider"] axis{ width: calc(85% - 14px); max-width: calc(100% - 74px); } number-slider axis,[data-is="number-slider"] axis{ }',"",function(e){this.value=0,this.lastTableValue=null,this.differentValueCount=0,this.isDragging=!1,this.on("update",()=>{this.lastTableValue!==this.opts.table&&(this.value=this.opts.table||this.value,$(this.refs.slider).val(this.value)),this.lastTableValue=this.opts.table,"number"==typeof this.opts.table&&this.opts.table!==$(this.refs.slider).val()&&this.differentValueCount++,this.isDragging&&(this.differentValueCount=0),this.differentValueCount>20&&(this.value=this.opts.table,$(this.refs.slider).val(this.value),this.differentValueCount=0)}),this.onChange=(e=>{this.value=parseFloat(e.target.value),this.opts.ntRoot&&(lastTableValue=this.value,NetworkTables.putValue(this.opts.ntRoot,this.value))}),this.onDragStart=(e=>{this.isDragging=!0}),this.onDragEnd=(e=>{this.isDragging=!1})})},474:function(e,t,r){r(1).tag2("number-slider-props",'<form> <div class="form-group row"> <label for="min" class="col-sm-4 col-form-label text-right">Min</label> <div class="col-sm-8"> <input class="form-control" id="min" riot-value="{opts.properties.min}" onchange="{onMinChange}" type="{\'number\'}"> </div> </div> <div class="form-group row"> <label for="max" class="col-sm-4 col-form-label text-right">Max</label> <div class="col-sm-8"> <input class="form-control" id="max" riot-value="{opts.properties.max}" onchange="{onMaxChange}" type="{\'number\'}"> </div> </div> <div class="form-group row"> <label for="blockIncrement" class="col-sm-4 col-form-label text-right">Block incrememnt</label> <div class="col-sm-8"> <input class="form-control" id="blockIncrement" riot-value="{opts.properties.blockIncrement}" onchange="{onBlockIncrementChange}" type="{\'number\'}"> </div> </div> </form>',"","",function(e){this.onMinChange=(e=>{const t=parseFloat(e.target.value);this.opts.properties.min=t,t>this.opts.properties.max&&(this.opts.properties.max=t)}),this.onMaxChange=(e=>{const t=parseFloat(e.target.value);this.opts.properties.max=t,t<this.opts.properties.min&&(this.opts.properties.min=t)}),this.onBlockIncrementChange=(e=>{const t=parseFloat(e.target.value);this.opts.properties.blockIncrement=t})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,