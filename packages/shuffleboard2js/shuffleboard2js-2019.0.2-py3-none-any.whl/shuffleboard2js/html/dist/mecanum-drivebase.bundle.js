!function(e){var t={};function r(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(i,a,function(t){return e[t]}.bind(null,a));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=491)}({1:function(e,t){e.exports=riot},179:function(e,t,r){e.exports=r.p+"assets/media/mecanum-drivebase.png"},491:function(e,t,r){e.exports=r(492)},492:function(e,t,r){"use strict";r.r(t);r(493);var i=r(179),a=r.n(i);dashboard.registerWidget("mecanum-drivebase",{label:"Mecanum Drivebase",category:"Basic",acceptedTypes:["MecanumDrive"],image:a.a,minX:7,minY:5})},493:function(e,t,r){var i=r(1);i.tag2("script","","","",function(e){}),i.tag2("mecanum-drivebase",'<div class="diff-drive-container"> <div class="speed-pair"> <div class="speed"> <axis ticks="5" vertical="{true}" range="{[-1, 1]}"></axis> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getFlForegroundStyle()}"></div> </div> </div> <div class="speed"> <axis ticks="5" vertical="{true}" range="{[-1, 1]}"></axis> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getRlForegroundStyle()}"></div> </div> </div> </div> <svg ref="svg" width="250" height="250"> <g ref="forceVector"></g> <g ref="drivetrain" class="drivetrain"></g> </svg> <div class="speed-pair"> <div class="speed"> <axis ticks="5" vertical="{true}" range="{[-1, 1]}"></axis> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getFrForegroundStyle()}"></div> </div> </div> <div class="speed"> <axis ticks="5" vertical="{true}" range="{[-1, 1]}"></axis> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getRrForegroundStyle()}"></div> </div> </div> </div> </div>','mecanum-drivebase .diff-drive-container,[data-is="mecanum-drivebase"] .diff-drive-container{ height: 100%; display: flex; flex-direction: row; align-items: center; justify-content: center; } mecanum-drivebase svg .x,[data-is="mecanum-drivebase"] svg .x{ stroke: rgb(50,50,255); stroke-width: 2; } mecanum-drivebase svg .arrow line,[data-is="mecanum-drivebase"] svg .arrow line,mecanum-drivebase svg .arrow path,[data-is="mecanum-drivebase"] svg .arrow path{ stroke: rgb(50,50,255); stroke-width: 2; fill: none; } mecanum-drivebase svg .arrow polygon,[data-is="mecanum-drivebase"] svg .arrow polygon{ stroke: rgb(50,50,255); fill: rgb(50,50,255); } mecanum-drivebase svg .drivetrain,[data-is="mecanum-drivebase"] svg .drivetrain{ fill: none; stroke: black; } mecanum-drivebase .bar,[data-is="mecanum-drivebase"] .bar{ position: relative; height: calc(100% - 25px); width: 20px; border-radius: 3px; margin: 15px 0; background: #DDD; } mecanum-drivebase .speed,[data-is="mecanum-drivebase"] .speed{ display: flex; height: 45%; flex-direction: row; align-items: center; margin-left: 30px; } mecanum-drivebase axis,[data-is="mecanum-drivebase"] axis{ width: 10px; height: calc(100% - 30px); } mecanum-drivebase .foreground,[data-is="mecanum-drivebase"] .foreground{ position: absolute; top: 0; width: 20px; background: lightblue; border-radius: 3px; }',"",function(e){this.fl=0,this.fr=0,this.rl=0,this.rr=0,this.drawMotionVector=((e,t,r,i)=>{const a={x:(e-t-r+i)/4,y:(e+t+r+i)/4},s=(-e+t-r+i)/4,n=Math.hypot(a.x,a.y),o=Math.atan2(a.y,a.x);if(Math.abs(s)<=.01&&n<=.01)return function(e){const t=e/2;return`<g class="x" transform="translate(125, 125)">${`<line\n                                x1="${-t}"\n                                y1="${-t}"\n                                x2="${t}"\n                                y2="${t}"/>`} ${`<line\n                                x1="${-t}"\n                                y1="${t}"\n                                x2="${t}"\n                                y2="${-t}"/>`}</g>`}(25);let d="",c="",l="";return Math.abs(s)>.01&&(d=window.dashboard.CurvedArrow.createPolar(0,60,-s*Math.PI,0,8),c=window.dashboard.CurvedArrow.createPolar(Math.PI,60,-s*Math.PI,0,8)),n>.01&&(l=window.dashboard.CurvedArrow.createStraight(60*n,-o,0,8)),`<g class="arrow" transform="translate(125, 125)">${d} ${c} ${l}</g>`}),this.drawDrivetrain=((e,t,r)=>{const i=(250-e)/2,a=(250-t)/2,s=i+e,n=a+t;return`<rect\n                            width="${e}"\n                            height="${t}"\n                            x="${i}"\n                            y="${a}" />`+`<rect\n                                width="30"\n                                height="${2*r}"\n                                x="${i-30}"\n                                y="${a}" />`+`<rect\n                                width="30"\n                                height="${2*r}"\n                                x="${s}"\n                                y="${a}" />`+`<rect\n                                width="30"\n                                height="${2*r}"\n                                x="${i-30}"\n                                y="${n-2*r}" />`+`<rect\n                                width="30"\n                                height="${2*r}"\n                                x="${s}"\n                                y="${n-2*r}" />`}),this.getFlForegroundStyle=(()=>this.getForegroundStyle(this.fl)),this.getFrForegroundStyle=(()=>this.getForegroundStyle(this.fr)),this.getRlForegroundStyle=(()=>this.getForegroundStyle(this.rl)),this.getRrForegroundStyle=(()=>this.getForegroundStyle(this.rr)),this.getForegroundStyle=(e=>{const t=Math.clamp(e,-1,1);return t>0?{height:Math.abs(t)/2*100+"%",top:Math.abs(-1)/2*100+"%",bottom:"auto"}:{height:Math.abs(t)/2*100+"%",top:"auto",bottom:Math.abs(1)/2*100+"%"}}),this.on("mount",()=>{let e=this.drawMotionVector(0,0,0,0);$(this.refs.drivetrain).html(this.drawDrivetrain(150,200,35)),$(this.refs.forceVector).html(e)}),this.on("update",()=>{this.fl=this.opts.table["Front Left Motor Speed"]||0,this.fr=this.opts.table["Front Right Motor Speed"]||0,this.rl=this.opts.table["Rear Left Motor Speed"]||0,this.rr=this.opts.table["Rear Right Motor Speed"]||0;let e=this.drawMotionVector(this.fl,this.fr,this.rl,this.rr);$(this.refs.forceVector).html(e)})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,