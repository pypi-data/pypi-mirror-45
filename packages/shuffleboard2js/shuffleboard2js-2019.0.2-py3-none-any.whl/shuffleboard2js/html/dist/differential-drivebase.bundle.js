!function(e){var t={};function r(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,r),a.l=!0,a.exports}r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)r.d(i,a,function(t){return e[t]}.bind(null,a));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=488)}({1:function(e,t){e.exports=riot},178:function(e,t,r){e.exports=r.p+"assets/media/differential-drivebase.png"},488:function(e,t,r){e.exports=r(489)},489:function(e,t,r){"use strict";r.r(t);r(490);var i=r(178),a=r.n(i);dashboard.registerWidget("differential-drivebase",{label:"Differential Drivebase",category:"Basic",acceptedTypes:["DifferentialDrive"],image:a.a,minX:7,minY:5})},490:function(e,t,r){var i=r(1);i.tag2("script","","","",function(e){}),i.tag2("differential-drivebase",'<div class="diff-drive-container"> <div class="speed"> <axis ticks="5" vertical="{true}" range="{[-1, 1]}"></axis> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getLeftForegroundStyle()}"></div> </div> </div> <svg ref="svg" width="250" height="250"> <g ref="forceVector"></g> <g ref="drivetrain" class="drivetrain"></g> </svg> <div class="speed"> <axis ticks="5" vertical="{true}" range="{[-1, 1]}"></axis> <div ref="bar" class="bar"> <div class="foreground" riot-style="{getRightForegroundStyle()}"></div> </div> </div> </div>','differential-drivebase .diff-drive-container,[data-is="differential-drivebase"] .diff-drive-container{ height: 100%; display: flex; flex-direction: row; align-items: center; justify-content: center; } differential-drivebase svg .x,[data-is="differential-drivebase"] svg .x{ stroke: rgb(50,50,255); stroke-width: 2; } differential-drivebase svg .arrow line,[data-is="differential-drivebase"] svg .arrow line,differential-drivebase svg .arrow path,[data-is="differential-drivebase"] svg .arrow path{ stroke: rgb(50,50,255); stroke-width: 2; fill: none; } differential-drivebase svg .arrow polygon,[data-is="differential-drivebase"] svg .arrow polygon{ stroke: rgb(50,50,255); fill: rgb(50,50,255); } differential-drivebase svg .drivetrain,[data-is="differential-drivebase"] svg .drivetrain{ fill: none; stroke: black; } differential-drivebase .bar,[data-is="differential-drivebase"] .bar{ position: relative; height: calc(100% - 30px); width: 20px; border-radius: 3px; margin: 15px 0; background: #DDD; } differential-drivebase .speed,[data-is="differential-drivebase"] .speed{ display: flex; height: 100%; flex-direction: row; align-items: center; margin-left: 30px; } differential-drivebase axis,[data-is="differential-drivebase"] axis{ width: 10px; height: calc(100% - 30px); } differential-drivebase .foreground,[data-is="differential-drivebase"] .foreground{ position: absolute; top: 0; width: 20px; background: lightblue; border-radius: 3px; }',"",function(e){this.left=0,this.right=0,this.drawMotionVector=((e,t)=>{this.root.getBoundingClientRect();if(Math.abs(e)<=.05&&Math.abs(t)<=.05)return function(e){const t=e/2;return`<g class="x" transform="translate(125, 125)">${`<line\n                                x1="${-t}"\n                                y1="${-t}"\n                                x2="${t}"\n                                y2="${t}"/>`} ${`<line\n                                x1="${-t}"\n                                y1="${t}"\n                                x2="${t}"\n                                y2="${-t}"/>`}</g>`}(25);const r=Math.min(150,150)/2-8;if(Math.abs(e-t)<=.001){return`<g class="arrow" transform="translate(125, 125)">${window.dashboard.CurvedArrow.createStraight(Math.abs(e*r),-Math.sign(e)*Math.PI/2,0,8)}</g>`}const i=Math.PI,a=(t-e)/2,n=(e+t)/2,s=n/a;let o;if(Math.abs(s)>=1){const e=-Math.sign(s),t=(e+1)*i/2;let a=Math.abs(s*r);o=window.dashboard.CurvedArrow.create(t,a,e*n*r,e*a,8)}else{const n=Math.sign(e-t);if(0==s){let s=Math.max(e,t)*r,d=n*i,f=a<0?i:0;o=window.dashboard.CurvedArrow.createPolar(f,s,d,0,8)}else{let a=s<0?e:t,d=s<0?t:e,f=Math.abs(a)*r,l=-s*f,h=function(e,t,r,i,a){return(e-t)*(a-i)/(r-t)+i}(d/a,0,-1,.5,i),c=s<0?i:0;o=window.dashboard.CurvedArrow.createPolar(c,f,n*h,l,8)}}return`<g class="arrow" transform="translate(125, 125)">${o}</g>`}),this.drawDrivetrain=((e,t,r)=>{const i=(250-e)/2,a=(250-t)/2,n=i+e,s=a+t;return`<rect\n                            width="${e}"\n                            height="${t}"\n                            x="${i}"\n                            y="${a}" />`+`<rect\n                                width="30"\n                                height="${2*r}"\n                                x="${i-30}"\n                                y="${a}" />`+`<rect\n                                width="30"\n                                height="${2*r}"\n                                x="${n}"\n                                y="${a}" />`+`<rect\n                                width="30"\n                                height="${2*r}"\n                                x="${i-30}"\n                                y="${s-2*r}" />`+`<rect\n                                width="30"\n                                height="${2*r}"\n                                x="${n}"\n                                y="${s-2*r}" />`}),this.getLeftForegroundStyle=(()=>this.getForegroundStyle(this.left)),this.getRightForegroundStyle=(()=>this.getForegroundStyle(this.right)),this.getForegroundStyle=(e=>{const t=Math.clamp(e,-1,1);return t>0?{height:Math.abs(t)/2*100+"%",top:Math.abs(-1)/2*100+"%",bottom:"auto"}:{height:Math.abs(t)/2*100+"%",top:"auto",bottom:Math.abs(1)/2*100+"%"}}),this.on("mount",()=>{let e=this.drawMotionVector(0,0);$(this.refs.drivetrain).html(this.drawDrivetrain(150,200,35)),$(this.refs.forceVector).html(e)}),this.on("update",()=>{this.left=this.opts.table["Left Motor Speed"]||0,this.right=this.opts.table["Right Motor Speed"]||0;let e=this.drawMotionVector(this.left,this.right);$(this.refs.forceVector).html(e)})})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,