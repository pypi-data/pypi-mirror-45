[daemon]

# Default: None
logfile = /var/log/afancontrol.log

# Poll interval (seconds)
# Default: 5
interval = 5

# Default: None
;exporter_listen_host = 127.0.0.1:8083

[actions]
# Shell command which will be used to report important events.
# %REASON% will be replaced with report reason, %MESSAGE% with report message
# Examples:
#  printf "Reason: %s\nMessage: %s" "%REASON%" "%MESSAGE%" | wall
#  kdialog --title "afancontrol report" --error "Reason: %REASON%\nMessage: %MESSAGE%"
# Default: printf "Subject: %s\nTo: %s\n\n%b" "afancontrol daemon report: %REASON%" root "%MESSAGE%" | sendmail -t
;report_cmd =

# Global panic enter shell command
# Default: None
;panic_enter_cmd =

# Global panic leave shell command
# Default: None
;panic_leave_cmd =

# Global threshold enter shell command
# Default: None
;threshold_enter_cmd =

# Global threshold leave shell command
# Default: None
;threshold_leave_cmd =

# [temp:name] - temperature sections. Name must be unique.

;[temp:mobo]
# Type of sensor.
# Possible values:
#  file - read files like /sys/class/hwmon/hwmon0/device/temp1_input. Those files contain celsius temperature multiplied by 1000.
#  hdd - query temperatures from hdd devices using hddtemp. If multiple drives specified, maximum temperature will be used.
#  exec - shell command which will return celsius temperature (which might be float). Output might also contain min and max temperatures separated by newline.
# This field is mandatory
;type = file

# Shell command which will return temperature.
# Mandatory in case type equals to exec
;command =

# Path to temp file or hdds.
# Mandatory in case type equals to file or hdd
;path = /sys/class/hwmon/hwmon0/device/temp1_input

# Temperature at which fan should be at minimum speed
# Must be set for hdd. Can be detected automatically for file and exec
;min = 30

# Temperature at which fan should be at full speed
# Same as min
;max = 40

# Temperature at which sensor will enter panic mode
# Default: None
;panic =

# Temperature at which sensor will enter threshold mode
# Default: None
;threshold =

# Sensor panic enter shell command
# Default: None
;panic_enter_cmd =

# Sensor panic leave shell command
# Default: None
;panic_leave_cmd =

# Sensor threshold enter shell command
# Default: None
;threshold_enter_cmd =

# Sensor threshold leave shell command
# Default: None
;threshold_leave_cmd =

;[temp: hdds]
;type = hdd
;path = /dev/sd?
;min = 35
;max = 48
;panic = 55

;[fan: hdd]
# Path to PWM file of the fan
# Mandatory
;pwm = /sys/class/hwmon/hwmon0/device/pwm2

# Path to RPM file of fan
# Mandatory
;fan_input = /sys/class/hwmon/hwmon0/device/fan2_input

# General PWM fan has parabola-like graph of RPMxPWM coordinate system.
# Usually on PWM less than 30% Fan is unstable and may stop.
# Line from ~30% to ~95% is usually suitable as a straight line. This is individual for every fan.
# You can get those values for your fan using afancontrol_fantest program.
# Do not set it if unsure.
# Default: 100
;pwm_line_start = 100

# Default 240
;pwm_line_end = 240

# Should fan be stopped on speed 0% or not
# Default: yes
;never_stop = no

;[fan:cpu]
;pwm = /sys/class/hwmon/hwmon0/device/pwm1
;fan_input = /sys/class/hwmon/hwmon0/device/fan1_input
;pwm_line_start = 100
;pwm_line_end = 240
;never_stop = yes

;[arduino: mymicro]
;serial_url = /dev/ttyACM0
;baudrate = 115200
;status_ttl = 5

;[fan: my_arduino_fan]
;type = arduino
;arduino_name = mymicro
;pwm_pin = 9
;tacho_pin = 3

# Relations between fans and temps
;[mapping:1]
# Comma-separated list of fans for this mapping. fans names might be multiplied by float.
# Example: name * 0.55. This means that speed for that fan will be just 55%.
# You may need this if you want to make input and output air flow equal using different fans
# Mandatory
;fans = cpu, hdd*0.6, my_arduino_fan

# Comma-separated list of temperatures. Fans in this mapping will run at maximum speed required from these temps.
;temps = mobo, hdds

;[mapping:2]
;fans = hdd
;temps = hdds
