# -*- coding: utf-8 -*-
"""
Map tags generated by inriaxmlwrapper to a better set of names

@author: Karthik Madathil(@kmadathil)

"""

from __future__ import print_function
from sanskrit_parser.base.sanskrit_base import SanskritObject, SCHEMES

inriatags = [('v-cj-prim', 'प्राथमिकः'),
             ('v-cj-ca', 'णिजन्तः'),
             ('v-cj-int', 'यङन्तः'),
             ('v-cj-des', 'सन्नन्तः'),
             ('sys-prs-md-pr', 'लट्'),
             ('sys-prs-md-ip', 'लोट्'),
             ('sys-prs-md-op', 'विधिलिङ्'),
             ('sys-prs-md-im', 'लङ्'),
             ('sys-pas-md-pr', 'लट्-कर्मणि'),
             ('sys-pas-md-ip', 'लोट्-कर्मणि'),
             ('sys-pas-md-op', 'विधिलिङ्-कर्मणि'),
             ('sys-pas-md-im', 'लङ्-कर्मणि'),
             ('sys-tp-fut', 'लृट्'),
             ('sys-tp-prf', 'लिट्'),
             ('sys-tp-aor', 'लुङ्'),
             ('sys-tp-inj', 'आगमाभावयुक्तलुङ्'),
             ('sys-tp-cnd', 'लृङ्'),
             ('sys-tp-ben', 'आशीर्लिङ्'),
             ('sys-pef', 'लुट्'),
             #    ('np-sg', 'एकवचनम्'),
             #    ('np-du', 'द्विवचनम्'),
             #    ('np-pl', 'बहुवचनम्'),
             ('fst', 'उत्तमपुरुषः'),
             ('snd', 'मध्यमपुरुषः'),
             ('trd', 'प्रथमपुरुषः'),
             ('na-nom', 'प्रथमाविभक्तिः'),
             ('na-voc', 'संबोधनविभक्तिः'),
             ('na-acc', 'द्वितीयाविभक्तिः'),
             ('na-ins', 'तृतीयाविभक्तिः'),
             ('na-dat', 'चतुर्थीविभक्तिः'),
             ('na-abl', 'पञ्चमीविभक्तिः'),
             ('na-gen', 'षष्ठीविभक्तिः'),
             ('na-loc', 'सप्तमीविभक्तिः'),
             ('sg', 'एकवचनम्'),
             ('du', 'द्विवचनम्'),
             ('pl', 'बहुवचनम्'),
             ('mas', 'पुंल्लिङ्गम्'),
             ('fem', 'स्त्रीलिङ्गम्'),
             ('neu', 'नपुंसकलिङ्गम्'),
             ('dei', 'सङ्ख्या'),
             ('uf', 'अव्ययम्'),
             ('ind', 'क्रियाविशेषणम्'),
             ('interj', 'उद्गारः'),
             ('parti', 'निपातम्'),
             ('prep', 'चादिः'),
             ('conj', 'संयोजकः'),
             ('tasil', 'तसिल्'),
             ('vu-cj-prim', 'अव्ययधातुरूप-प्राथमिकः'),
             ('vu-cj-ca', 'अव्ययधातुरूप-णिजन्तः'),
             ('vu-cj-int', 'अव्ययधातुरूप-यङन्तः'),
             ('vu-cj-des', 'अव्ययधातुरूप-सन्नन्तः'),
             ('iv-inf', 'तुमुन्'),
             ('iv-abs', 'क्त्वा'),
             ('iv-per', 'per'),
             ('ab-cj-prim', 'क्त्वा-प्राथमिकः'),
             ('ab-cj-ca', 'क्त्वा-णिजन्तः'),
             ('ab-cj-int', 'क्त्वा-यङन्तः'),
             ('ab-cj-des', 'क्त्वा-सन्नन्तः'),
             ('kr-cj-prim-no', 'प्राथमिकः'),
             ('kr-cj-ca-no', 'णिजन्तः'),
             ('kr-cj-int-no', 'यङन्तः'),
             ('kr-cj-des-no', 'सन्नन्तः'),
             ('kr-vb-no', ''),
             ('ppp', 'कर्मणिभूतकृदन्तः'),
             ('ppa', 'कर्तरिभूतकृदन्तः'),
             ('pprp', 'कर्मणिवर्तमानकृदन्तः'),
             ('ppr-para', 'कर्तरिवर्तमानकृदन्त-परस्मैपदी'),
             ('ppr-atma', 'कर्तरिवर्तमानकृदन्त-आत्मनेपदी'),
             ('ppft-para', 'पूर्णभूतकृदन्त-परस्मैपदी'),
             ('ppft-atma', 'पूर्णभूतकृदन्त-आत्मनेपदी'),
             ('pfutp', 'कर्मणिभविष्यत्कृदन्तः'),
             ('pfut-para', 'कर्तरिभविष्यत्कृदन्त-परस्मैपदी'),
             ('pfut-atma', 'कर्तरिभविष्यत्कृदन्त-आत्मनेपदी'),
             ('gya', 'य'),
             ('iya', 'ईय'),
             ('tav', 'तव्य'),
             ('para', 'कर्तरि'),
             ('atma', 'कर्तरि'),
             ('pass', 'कर्मणि'),
             ('pa', 'कृदन्तः'),
             ('iic', 'समासपूर्वपदनामपदम्'),
             ('iip', 'समासपूर्वपदकृदन्तः'),
             ('iiv', 'समासपूर्वपदधातुः'),
             ('upsrg', 'उपसर्गः')]


def _inriaTagsToDb(tag):
    # ('tag','ourtag)
    itag = tag[0]
    otag = tag[1]
    if itag.find('-') != -1:
        iset = set(itag.split('-'))
    else:
        iset = set([itag])
    return (iset, SanskritObject(otag, encoding=SCHEMES['Devanagari']))


inriatagdb = list(map(_inriaTagsToDb, inriatags))


def inriaMapTag(tag):
    ''' Map an INRIA tag to our format

    Params:
       tag(tuple) : (<stem>,set([inria tags]))
    Returns
       tuple : (<stem>,set([our tags]))
    '''
    stem = tag[0]
    tset = tag[1]
    olist = []
    for s in inriatagdb:
        if s[0] <= tset:
            olist.append(s[1])
    return (stem, set(olist))


def inriaTagMapper(tags):
    ''' Map an INRIA tag to our format

    Params:
       tags: List of INRIA format tags
    Returns
       list[(<stem>,set([our tags])) ...]
    '''
    return list(map(inriaMapTag, tags))


if __name__ == "__main__":
    import sys

    if len(sys.argv) >= 2:
        print(list(map(lambda x: inriaMapTag(eval(x)), sys.argv[1:])))
    else:
        print("Need at least one argument to convert")
