# coding: utf-8

"""
    Esper Manage API

    # Introduction Esper Manage APIs for Cloud are a set of REST-based APIs that help you programmatically control and monitor your enterprise's dedicated Esper endpoint. Using these APIs, one can orchestrate & manage devices that have been provisioned against your endpoint. Furthermore, this API allows you to manage android applications that get installed on such devices. To read more about the various capabilities of Esper endpoints and Esper managed devices, please visit [esper.io](https://esper.io). This guide describes all the available APIs in detail, along with code samples for you to quickly ramp up to using them.  You can find out more about Esper at [https://esper.io](https://esper.io)  We've done our best to keep this document up to date, but if you find any issues, please reach out to us at developer@esper.io.  # SDK    You are welcome to use your favorite HTTP/REST library for your programming language in order to use these APIs, or you can use our official SDK (currently available in [python](https://github.com/esper-io/esper-client-py)) to do so.   # Authentication Client needs to send authentication details to access APIs. Following authentication schemes are supported:  #### Basic Authentication Client can use username and password to authenticate. These are your developer account credentials. For example, the client sends HTTP requests with the Authorization header that contains the word `Basic` followed by a space and a base64-encoded string `username:password`. ##### Base64 encoding Bash  ``` echo 'username:password' | base64 ```  Powershell  ``` [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\"username:password\")) ```  **Example request** ```bash curl -X GET \\   https://DOMAIN.shoonyacloud.com/api/enterprise/<enterprise_id>/device/ \\   -H 'Authorization: Basic cl0ZWFkbWluOnNpdG1pbjEyMyQ=' \\   -H 'Content-Type: application/json' \\ ``` You can read more about basic authentication scheme  [here](https://swagger.io/docs/specification/authentication/basic-authentication/)  # Errors The API uses standard HTTP status codes to indicate success or failure. All error responses will have a JSON body in the following format  ``` {   \"errors\": [],   \"message\": \"error message\",   \"status\": 400 } ``` * `errors` -  List of error details * `message` - Error description * `status` - HTTP status code   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@esper.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplicationVersion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'version_code': 'str',
        'build_number': 'str',
        'hash_string': 'str',
        'min_sdk_version': 'str',
        'target_sdk_version': 'str',
        'download_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'version_code': 'version_code',
        'build_number': 'build_number',
        'hash_string': 'hash_string',
        'min_sdk_version': 'min_sdk_version',
        'target_sdk_version': 'target_sdk_version',
        'download_url': 'download_url'
    }

    def __init__(self, id=None, version_code=None, build_number=None, hash_string=None, min_sdk_version=None, target_sdk_version=None, download_url=None):  # noqa: E501
        """ApplicationVersion - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._version_code = None
        self._build_number = None
        self._hash_string = None
        self._min_sdk_version = None
        self._target_sdk_version = None
        self._download_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.version_code = version_code
        if build_number is not None:
            self.build_number = build_number
        if hash_string is not None:
            self.hash_string = hash_string
        if min_sdk_version is not None:
            self.min_sdk_version = min_sdk_version
        if target_sdk_version is not None:
            self.target_sdk_version = target_sdk_version
        if download_url is not None:
            self.download_url = download_url

    @property
    def id(self):
        """Gets the id of this ApplicationVersion.  # noqa: E501


        :return: The id of this ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApplicationVersion.


        :param id: The id of this ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version_code(self):
        """Gets the version_code of this ApplicationVersion.  # noqa: E501


        :return: The version_code of this ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._version_code

    @version_code.setter
    def version_code(self, version_code):
        """Sets the version_code of this ApplicationVersion.


        :param version_code: The version_code of this ApplicationVersion.  # noqa: E501
        :type: str
        """
        if version_code is None:
            raise ValueError("Invalid value for `version_code`, must not be `None`")  # noqa: E501
        if version_code is not None and len(version_code) > 50:
            raise ValueError("Invalid value for `version_code`, length must be less than or equal to `50`")  # noqa: E501
        if version_code is not None and len(version_code) < 1:
            raise ValueError("Invalid value for `version_code`, length must be greater than or equal to `1`")  # noqa: E501

        self._version_code = version_code

    @property
    def build_number(self):
        """Gets the build_number of this ApplicationVersion.  # noqa: E501


        :return: The build_number of this ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._build_number

    @build_number.setter
    def build_number(self, build_number):
        """Sets the build_number of this ApplicationVersion.


        :param build_number: The build_number of this ApplicationVersion.  # noqa: E501
        :type: str
        """
        if build_number is not None and len(build_number) > 100:
            raise ValueError("Invalid value for `build_number`, length must be less than or equal to `100`")  # noqa: E501
        if build_number is not None and len(build_number) < 1:
            raise ValueError("Invalid value for `build_number`, length must be greater than or equal to `1`")  # noqa: E501

        self._build_number = build_number

    @property
    def hash_string(self):
        """Gets the hash_string of this ApplicationVersion.  # noqa: E501


        :return: The hash_string of this ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._hash_string

    @hash_string.setter
    def hash_string(self, hash_string):
        """Sets the hash_string of this ApplicationVersion.


        :param hash_string: The hash_string of this ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._hash_string = hash_string

    @property
    def min_sdk_version(self):
        """Gets the min_sdk_version of this ApplicationVersion.  # noqa: E501


        :return: The min_sdk_version of this ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._min_sdk_version

    @min_sdk_version.setter
    def min_sdk_version(self, min_sdk_version):
        """Sets the min_sdk_version of this ApplicationVersion.


        :param min_sdk_version: The min_sdk_version of this ApplicationVersion.  # noqa: E501
        :type: str
        """
        if min_sdk_version is not None and len(min_sdk_version) > 10:
            raise ValueError("Invalid value for `min_sdk_version`, length must be less than or equal to `10`")  # noqa: E501
        if min_sdk_version is not None and len(min_sdk_version) < 1:
            raise ValueError("Invalid value for `min_sdk_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._min_sdk_version = min_sdk_version

    @property
    def target_sdk_version(self):
        """Gets the target_sdk_version of this ApplicationVersion.  # noqa: E501


        :return: The target_sdk_version of this ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._target_sdk_version

    @target_sdk_version.setter
    def target_sdk_version(self, target_sdk_version):
        """Sets the target_sdk_version of this ApplicationVersion.


        :param target_sdk_version: The target_sdk_version of this ApplicationVersion.  # noqa: E501
        :type: str
        """
        if target_sdk_version is not None and len(target_sdk_version) > 10:
            raise ValueError("Invalid value for `target_sdk_version`, length must be less than or equal to `10`")  # noqa: E501
        if target_sdk_version is not None and len(target_sdk_version) < 1:
            raise ValueError("Invalid value for `target_sdk_version`, length must be greater than or equal to `1`")  # noqa: E501

        self._target_sdk_version = target_sdk_version

    @property
    def download_url(self):
        """Gets the download_url of this ApplicationVersion.  # noqa: E501


        :return: The download_url of this ApplicationVersion.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this ApplicationVersion.


        :param download_url: The download_url of this ApplicationVersion.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationVersion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationVersion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
