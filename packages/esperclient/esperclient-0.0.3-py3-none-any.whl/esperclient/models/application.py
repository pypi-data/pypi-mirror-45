# coding: utf-8

"""
    Esper Manage API

    # Introduction Esper Manage APIs for Cloud are a set of REST-based APIs that help you programmatically control and monitor your enterprise's dedicated Esper endpoint. Using these APIs, one can orchestrate & manage devices that have been provisioned against your endpoint. Furthermore, this API allows you to manage android applications that get installed on such devices. To read more about the various capabilities of Esper endpoints and Esper managed devices, please visit [esper.io](https://esper.io). This guide describes all the available APIs in detail, along with code samples for you to quickly ramp up to using them.  You can find out more about Esper at [https://esper.io](https://esper.io)  We've done our best to keep this document up to date, but if you find any issues, please reach out to us at developer@esper.io.  # SDK    You are welcome to use your favorite HTTP/REST library for your programming language in order to use these APIs, or you can use our official SDK (currently available in [python](https://github.com/esper-io/esper-client-py)) to do so.   # Authentication Client needs to send authentication details to access APIs. Following authentication schemes are supported:  #### Basic Authentication Client can use username and password to authenticate. These are your developer account credentials. For example, the client sends HTTP requests with the Authorization header that contains the word `Basic` followed by a space and a base64-encoded string `username:password`. ##### Base64 encoding Bash  ``` echo 'username:password' | base64 ```  Powershell  ``` [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\"username:password\")) ```  **Example request** ```bash curl -X GET \\   https://DOMAIN.shoonyacloud.com/api/enterprise/<enterprise_id>/device/ \\   -H 'Authorization: Basic cl0ZWFkbWluOnNpdG1pbjEyMyQ=' \\   -H 'Content-Type: application/json' \\ ``` You can read more about basic authentication scheme  [here](https://swagger.io/docs/specification/authentication/basic-authentication/)  # Errors The API uses standard HTTP status codes to indicate success or failure. All error responses will have a JSON body in the following format  ``` {   \"errors\": [],   \"message\": \"error message\",   \"status\": 400 } ``` * `errors` -  List of error details * `message` - Error description * `status` - HTTP status code   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@esper.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from esperclient.models.app_version import AppVersion  # noqa: F401,E501


class Application(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'version': 'AppVersion',
        'application_name': 'str',
        'package_name': 'str',
        'developer': 'str',
        'category': 'str',
        'content_rating': 'str',
        'compatibility': 'str',
        'created_on': 'datetime',
        'updated_on': 'datetime',
        'is_active': 'bool',
        'is_hidden': 'bool',
        'enterprise': 'str'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'application_name': 'application_name',
        'package_name': 'package_name',
        'developer': 'developer',
        'category': 'category',
        'content_rating': 'content_rating',
        'compatibility': 'compatibility',
        'created_on': 'created_on',
        'updated_on': 'updated_on',
        'is_active': 'is_active',
        'is_hidden': 'is_hidden',
        'enterprise': 'enterprise'
    }

    def __init__(self, id=None, version=None, application_name=None, package_name=None, developer=None, category=None, content_rating=None, compatibility=None, created_on=None, updated_on=None, is_active=None, is_hidden=None, enterprise=None):  # noqa: E501
        """Application - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._version = None
        self._application_name = None
        self._package_name = None
        self._developer = None
        self._category = None
        self._content_rating = None
        self._compatibility = None
        self._created_on = None
        self._updated_on = None
        self._is_active = None
        self._is_hidden = None
        self._enterprise = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if version is not None:
            self.version = version
        self.application_name = application_name
        self.package_name = package_name
        if developer is not None:
            self.developer = developer
        if category is not None:
            self.category = category
        if content_rating is not None:
            self.content_rating = content_rating
        if compatibility is not None:
            self.compatibility = compatibility
        if created_on is not None:
            self.created_on = created_on
        if updated_on is not None:
            self.updated_on = updated_on
        if is_active is not None:
            self.is_active = is_active
        if is_hidden is not None:
            self.is_hidden = is_hidden
        self.enterprise = enterprise

    @property
    def id(self):
        """Gets the id of this Application.  # noqa: E501


        :return: The id of this Application.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Application.


        :param id: The id of this Application.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version(self):
        """Gets the version of this Application.  # noqa: E501


        :return: The version of this Application.  # noqa: E501
        :rtype: AppVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Application.


        :param version: The version of this Application.  # noqa: E501
        :type: AppVersion
        """

        self._version = version

    @property
    def application_name(self):
        """Gets the application_name of this Application.  # noqa: E501


        :return: The application_name of this Application.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this Application.


        :param application_name: The application_name of this Application.  # noqa: E501
        :type: str
        """
        if application_name is None:
            raise ValueError("Invalid value for `application_name`, must not be `None`")  # noqa: E501
        if application_name is not None and len(application_name) > 255:
            raise ValueError("Invalid value for `application_name`, length must be less than or equal to `255`")  # noqa: E501
        if application_name is not None and len(application_name) < 1:
            raise ValueError("Invalid value for `application_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._application_name = application_name

    @property
    def package_name(self):
        """Gets the package_name of this Application.  # noqa: E501


        :return: The package_name of this Application.  # noqa: E501
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """Sets the package_name of this Application.


        :param package_name: The package_name of this Application.  # noqa: E501
        :type: str
        """
        if package_name is None:
            raise ValueError("Invalid value for `package_name`, must not be `None`")  # noqa: E501
        if package_name is not None and len(package_name) > 255:
            raise ValueError("Invalid value for `package_name`, length must be less than or equal to `255`")  # noqa: E501
        if package_name is not None and len(package_name) < 1:
            raise ValueError("Invalid value for `package_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._package_name = package_name

    @property
    def developer(self):
        """Gets the developer of this Application.  # noqa: E501


        :return: The developer of this Application.  # noqa: E501
        :rtype: str
        """
        return self._developer

    @developer.setter
    def developer(self, developer):
        """Sets the developer of this Application.


        :param developer: The developer of this Application.  # noqa: E501
        :type: str
        """
        if developer is not None and len(developer) > 255:
            raise ValueError("Invalid value for `developer`, length must be less than or equal to `255`")  # noqa: E501
        if developer is not None and len(developer) < 1:
            raise ValueError("Invalid value for `developer`, length must be greater than or equal to `1`")  # noqa: E501

        self._developer = developer

    @property
    def category(self):
        """Gets the category of this Application.  # noqa: E501


        :return: The category of this Application.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Application.


        :param category: The category of this Application.  # noqa: E501
        :type: str
        """
        if category is not None and len(category) > 255:
            raise ValueError("Invalid value for `category`, length must be less than or equal to `255`")  # noqa: E501
        if category is not None and len(category) < 1:
            raise ValueError("Invalid value for `category`, length must be greater than or equal to `1`")  # noqa: E501

        self._category = category

    @property
    def content_rating(self):
        """Gets the content_rating of this Application.  # noqa: E501


        :return: The content_rating of this Application.  # noqa: E501
        :rtype: str
        """
        return self._content_rating

    @content_rating.setter
    def content_rating(self, content_rating):
        """Sets the content_rating of this Application.


        :param content_rating: The content_rating of this Application.  # noqa: E501
        :type: str
        """

        self._content_rating = content_rating

    @property
    def compatibility(self):
        """Gets the compatibility of this Application.  # noqa: E501


        :return: The compatibility of this Application.  # noqa: E501
        :rtype: str
        """
        return self._compatibility

    @compatibility.setter
    def compatibility(self, compatibility):
        """Sets the compatibility of this Application.


        :param compatibility: The compatibility of this Application.  # noqa: E501
        :type: str
        """
        if compatibility is not None and len(compatibility) < 1:
            raise ValueError("Invalid value for `compatibility`, length must be greater than or equal to `1`")  # noqa: E501

        self._compatibility = compatibility

    @property
    def created_on(self):
        """Gets the created_on of this Application.  # noqa: E501


        :return: The created_on of this Application.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this Application.


        :param created_on: The created_on of this Application.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """Gets the updated_on of this Application.  # noqa: E501


        :return: The updated_on of this Application.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this Application.


        :param updated_on: The updated_on of this Application.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def is_active(self):
        """Gets the is_active of this Application.  # noqa: E501


        :return: The is_active of this Application.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this Application.


        :param is_active: The is_active of this Application.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_hidden(self):
        """Gets the is_hidden of this Application.  # noqa: E501


        :return: The is_hidden of this Application.  # noqa: E501
        :rtype: bool
        """
        return self._is_hidden

    @is_hidden.setter
    def is_hidden(self, is_hidden):
        """Sets the is_hidden of this Application.


        :param is_hidden: The is_hidden of this Application.  # noqa: E501
        :type: bool
        """

        self._is_hidden = is_hidden

    @property
    def enterprise(self):
        """Gets the enterprise of this Application.  # noqa: E501


        :return: The enterprise of this Application.  # noqa: E501
        :rtype: str
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this Application.


        :param enterprise: The enterprise of this Application.  # noqa: E501
        :type: str
        """
        if enterprise is None:
            raise ValueError("Invalid value for `enterprise`, must not be `None`")  # noqa: E501

        self._enterprise = enterprise

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Application, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Application):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
