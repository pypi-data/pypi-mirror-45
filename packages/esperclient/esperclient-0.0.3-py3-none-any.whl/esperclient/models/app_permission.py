# coding: utf-8

"""
    Esper Manage API

    # Introduction Esper Manage APIs for Cloud are a set of REST-based APIs that help you programmatically control and monitor your enterprise's dedicated Esper endpoint. Using these APIs, one can orchestrate & manage devices that have been provisioned against your endpoint. Furthermore, this API allows you to manage android applications that get installed on such devices. To read more about the various capabilities of Esper endpoints and Esper managed devices, please visit [esper.io](https://esper.io). This guide describes all the available APIs in detail, along with code samples for you to quickly ramp up to using them.  You can find out more about Esper at [https://esper.io](https://esper.io)  We've done our best to keep this document up to date, but if you find any issues, please reach out to us at developer@esper.io.  # SDK    You are welcome to use your favorite HTTP/REST library for your programming language in order to use these APIs, or you can use our official SDK (currently available in [python](https://github.com/esper-io/esper-client-py)) to do so.   # Authentication Client needs to send authentication details to access APIs. Following authentication schemes are supported:  #### Basic Authentication Client can use username and password to authenticate. These are your developer account credentials. For example, the client sends HTTP requests with the Authorization header that contains the word `Basic` followed by a space and a base64-encoded string `username:password`. ##### Base64 encoding Bash  ``` echo 'username:password' | base64 ```  Powershell  ``` [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(\"username:password\")) ```  **Example request** ```bash curl -X GET \\   https://DOMAIN.shoonyacloud.com/api/enterprise/<enterprise_id>/device/ \\   -H 'Authorization: Basic cl0ZWFkbWluOnNpdG1pbjEyMyQ=' \\   -H 'Content-Type: application/json' \\ ``` You can read more about basic authentication scheme  [here](https://swagger.io/docs/specification/authentication/basic-authentication/)  # Errors The API uses standard HTTP status codes to indicate success or failure. All error responses will have a JSON body in the following format  ``` {   \"errors\": [],   \"message\": \"error message\",   \"status\": 400 } ``` * `errors` -  List of error details * `message` - Error description * `status` - HTTP status code   # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: developer@esper.io
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AppPermission(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'permission': 'str',
        'grant_state': 'str',
        'created_on': 'datetime',
        'updated_on': 'datetime',
        'is_active': 'bool',
        'enterprise': 'str',
        'app_version': 'str'
    }

    attribute_map = {
        'id': 'id',
        'permission': 'permission',
        'grant_state': 'grant_state',
        'created_on': 'created_on',
        'updated_on': 'updated_on',
        'is_active': 'is_active',
        'enterprise': 'enterprise',
        'app_version': 'app_version'
    }

    def __init__(self, id=None, permission=None, grant_state=None, created_on=None, updated_on=None, is_active=None, enterprise=None, app_version=None):  # noqa: E501
        """AppPermission - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._permission = None
        self._grant_state = None
        self._created_on = None
        self._updated_on = None
        self._is_active = None
        self._enterprise = None
        self._app_version = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.permission = permission
        if grant_state is not None:
            self.grant_state = grant_state
        if created_on is not None:
            self.created_on = created_on
        if updated_on is not None:
            self.updated_on = updated_on
        if is_active is not None:
            self.is_active = is_active
        self.enterprise = enterprise
        if app_version is not None:
            self.app_version = app_version

    @property
    def id(self):
        """Gets the id of this AppPermission.  # noqa: E501


        :return: The id of this AppPermission.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AppPermission.


        :param id: The id of this AppPermission.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def permission(self):
        """Gets the permission of this AppPermission.  # noqa: E501


        :return: The permission of this AppPermission.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this AppPermission.


        :param permission: The permission of this AppPermission.  # noqa: E501
        :type: str
        """
        if permission is None:
            raise ValueError("Invalid value for `permission`, must not be `None`")  # noqa: E501
        if permission is not None and len(permission) > 255:
            raise ValueError("Invalid value for `permission`, length must be less than or equal to `255`")  # noqa: E501
        if permission is not None and len(permission) < 1:
            raise ValueError("Invalid value for `permission`, length must be greater than or equal to `1`")  # noqa: E501

        self._permission = permission

    @property
    def grant_state(self):
        """Gets the grant_state of this AppPermission.  # noqa: E501


        :return: The grant_state of this AppPermission.  # noqa: E501
        :rtype: str
        """
        return self._grant_state

    @grant_state.setter
    def grant_state(self, grant_state):
        """Sets the grant_state of this AppPermission.


        :param grant_state: The grant_state of this AppPermission.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Denied", "Granted"]  # noqa: E501
        if grant_state not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_state` ({0}), must be one of {1}"  # noqa: E501
                .format(grant_state, allowed_values)
            )

        self._grant_state = grant_state

    @property
    def created_on(self):
        """Gets the created_on of this AppPermission.  # noqa: E501


        :return: The created_on of this AppPermission.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this AppPermission.


        :param created_on: The created_on of this AppPermission.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def updated_on(self):
        """Gets the updated_on of this AppPermission.  # noqa: E501


        :return: The updated_on of this AppPermission.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this AppPermission.


        :param updated_on: The updated_on of this AppPermission.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def is_active(self):
        """Gets the is_active of this AppPermission.  # noqa: E501


        :return: The is_active of this AppPermission.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this AppPermission.


        :param is_active: The is_active of this AppPermission.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def enterprise(self):
        """Gets the enterprise of this AppPermission.  # noqa: E501


        :return: The enterprise of this AppPermission.  # noqa: E501
        :rtype: str
        """
        return self._enterprise

    @enterprise.setter
    def enterprise(self, enterprise):
        """Sets the enterprise of this AppPermission.


        :param enterprise: The enterprise of this AppPermission.  # noqa: E501
        :type: str
        """
        if enterprise is None:
            raise ValueError("Invalid value for `enterprise`, must not be `None`")  # noqa: E501

        self._enterprise = enterprise

    @property
    def app_version(self):
        """Gets the app_version of this AppPermission.  # noqa: E501


        :return: The app_version of this AppPermission.  # noqa: E501
        :rtype: str
        """
        return self._app_version

    @app_version.setter
    def app_version(self, app_version):
        """Sets the app_version of this AppPermission.


        :param app_version: The app_version of this AppPermission.  # noqa: E501
        :type: str
        """

        self._app_version = app_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AppPermission, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppPermission):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
