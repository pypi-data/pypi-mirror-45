Metadata-Version: 2.1
Name: black-holes
Version: 0.0.1
Summary: Secrets handle lib.
Home-page: https://gitlab.com/JoseSalgado1024/black-holes
Author: Jose A. Salgado
Author-email: jose.salgado.wrk@gmail.com
License: UNKNOWN
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: python-consul (==1.1.0)
Requires-Dist: peewee (==3.9.2)
Requires-Dist: pycryptodome (==3.7.3)

BlackHoles
---

Black Holes is a simple way to handle your projects secrets using a `database` or `Consul.io`.


+ [Installing BlackHoles](#install)
+ [Using BlackHoles](#usage)
    - [Plain Keys](#simple-usage)
    - [Encrypted Keys](#advanced-usage)

# Install

Installing from `Pip`

```bash
(pyenv) $ pip install blackhole
```


Installing from `sources`:

```bash
(pyenv) $ cd black_holes
(pyenv) $ python setup.py install
```

# Usage:

## simple usage

Plain `{'key': 'values'}` storage.

```python
from black_hole import SqliteBlackHole

# Create a new SqliteBlackHole instance
near_black_hole = SqliteBlackHole()

# Create a key called "key" with value "value"
near_black_hole.key = 'value'

# print key
print(near_black_hole.key)
```

##  Advanced usage:

Encrypted `{'key': 'values'}` storage.

```python
from black_hole import SqliteBlackHole

# Create a new SqliteBlackHole instance
near_black_hole = SqliteBlackHole()

# Encrypted key
near_black_hole.encrypted_key = 'it is a secret'

# Encrypted value
print(near_black_hole.key)

# Decrypted value
print(near_black_hole.decrypted_key)
```


_Made it with ‚ù§ by __DTecDeal___

