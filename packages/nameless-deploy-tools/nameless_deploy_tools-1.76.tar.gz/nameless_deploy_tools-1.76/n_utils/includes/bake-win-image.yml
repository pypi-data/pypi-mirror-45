# Copyright 2016-2017 Nitor Creations Oy
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

---
- name: Terminate any old instance(s)
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - local_action:
        module: ec2
        region: "{{ aws_region }}"
        instance_tags: "{{ bake_tags }}"
        count_tag:     { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        exact_count: 0
        instance_type: "{{ instance_type }}"
        image: "{{ root_ami }}"
        vpc_subnet_id: "{{ subnet_id }}"
        assign_public_ip: yes
        group_id: "{{ sg_id }}"
        monitoring: no
        key_name: "{{ aws_key_name }}"
        wait: yes
      register: ec2_prototype_instance

- name: "create instance"
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - local_action:
        module: ec2
        region: "{{ aws_region }}"
        instance_tags: { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        count_tag:     { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        exact_count: 1
        instance_type: "{{ instance_type }}"
        image: "{{ root_ami }}"
        instance_profile_name: "{{ amibake_instanceprofile }}"
        vpc_subnet_id: "{{ subnet_id }}"
        assign_public_ip: yes
        group_id: "{{ sg_id }}"
        monitoring: no
        key_name: "{{ aws_key_name }}"
        user_data: "{{ lookup('template', bake_userdata ) }}"
        volumes:
          - device_name: /dev/sda1
            device_type: gp2
            volume_size: "{{ volume_size }}"
            delete_on_termination: true
        wait: yes
      register: ec2_prototype_instance
    - set_fact:
        ec2_prototype_instance: "{{ ec2_prototype_instance }}"

- name: Add new instance to host group {{ job_name }}-ami-instance
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - add_host: hostname={{ item.public_ip }} groupname={{ job_name }}-ami-instance
      with_items: "{{ ec2_prototype_instance.tagged_instances }}"
      when: private_subnet == "no"

    - wait_for: host={{ item.public_dns_name }} port=5986 delay=60 timeout=320 state=started
      with_items: "{{ ec2_prototype_instance.tagged_instances }}"
      when: private_subnet == "no"

    - add_host: hostname={{ item.private_ip }} groupname={{ job_name }}-ami-instance
      with_items: "{{ ec2_prototype_instance.tagged_instances }}"
      when: private_subnet == "yes"

    - wait_for: host={{ item.private_dns_name }} port=5986 delay=60 timeout=320 state=started
      with_items: "{{ ec2_prototype_instance.tagged_instances }}"
      when: private_subnet == "yes"

    - name: Pause for a bit to work around startup related WinRM problem
      pause: "seconds={{ pause_seconds }}"

- name: Prepare AMI instance - run pre_install, install/update packages and finally post_install
  hosts: "{{ job_name }}-ami-instance"
  vars:
    ansible_connection: winrm
    ansible_ssh_port: 5986
    ansible_winrm_server_cert_validation: ignore
  tasks:
  - name: Wait for system to become reachable
    wait_for_connection:
      delay: 30
      timeout: 600
  - win_file: path="C:\\nameless" state=directory
    when: base_ami_id == "clean"
  - win_copy: src="{{ prepare_script }}" dest="C:\\nameless\\prepare.ps1"
    when: base_ami_id == "clean"
  - win_copy: src="{{ imagedir }}/pre_install.ps1" dest="C:\\nameless\\pre_install.ps1"
  - win_copy: src="{{ imagedir }}/post_install.ps1" dest="C:\\nameless\\post_install.ps1"
  - win_copy: src="{{ imagedir }}/bake-credentials" dest="C:\\nameless\\bake-credentials"
  - win_copy:
      src: "{{ imagedir }}/{{ item }}"
      dest: "C:\\nameless\\"
    with_items: "{{ files }}"
  - win_chocolatey: name="{{ item }}"
    with_items: [ "python2", "awscli", "sync" ]
    when: base_ami_id == "clean"
  - win_shell: "C:\\nameless\\prepare.ps1"
    args:
      chdir: "C:\\"
    when: base_ami_id == "clean"
  - win_shell: "C:\\nameless\\pre_install.ps1"
    args:
      chdir: "C:\\"
  - win_updates:
      category_names:
      - SecurityUpdates
      - CriticalUpdates
      - UpdateRollups
      - Updates
      - ServicePacks
    register: update_result
    when: base_ami_id == "clean"
  - win_reboot:
    when:
      - "'skipped' not in update_result"
      - update_result["reboot_required"]
  - win_chocolatey: name="{{ item }}"
    with_items: "{{ packages }}"
  - win_shell: "C:\\nameless\\post_install.ps1"
    args:
      chdir: "C:\\"

- name: Create AMI from deployed instance
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - debug: var=ec2_prototype_instance

    - name: "Create AMI from deployed server {{ ec2_prototype_instance.tagged_instances[0].id }}"
      ec2_ami:
        instance_id: "{{ ec2_prototype_instance.tagged_instances[0].id }}"
        wait: yes
        name: "{{ job_name }}_{{ build_number }}"
        region: "{{ aws_region }}"
        wait_timeout: 1800
      register: base_ami

    - set_fact:
        ami_id_to_deploy: "{{ base_ami.image_id }}"

    - name: Tag AMI
      ec2_tag: resource={{ base_ami.image_id }} region={{ aws_region }}
      args:
        tags:
          Name: "{{ job_name }}_{{ build_number }}"
          Tstamp: "{{ tstamp }}"

- name: Terminate instance(s) used for creating AMI
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - local_action:
        module: ec2
        region: "{{ aws_region }}"
        instance_tags: { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        count_tag:     { "environment": "nameless", "Name": "{{ job_name }} prototype" }
        exact_count: 0
        instance_type: "{{ instance_type }}"
        image: "{{ root_ami }}"
        vpc_subnet_id: "{{ subnet_id }}"
        assign_public_ip: yes
        group_id: "{{ sg_id }}"
        monitoring: no
        key_name: "{{ aws_key_name }}"
        wait: no
      register: ec2_prototype_instance

- name: Clean up old AMIs, keep the latest 5
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - ec2_ami_find:
        region: "{{ aws_region }}"
        owner: self
        name: "{{ job_name }}_??????????????"
        sort: creationDate
        sort_end: -5
      register: old_ami_result

    - ec2_ami:
        region: "{{ aws_region }}"
        image_id: "{{ item.ami_id }}"
        delete_snapshot: yes
        state: absent
      with_items: "{{ old_ami_result.results }}"
      ignore_errors: yes

- name: Write new AMI id to file {{ ami_id_file }}
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - local_action: copy content={{ base_ami.image_id }} dest={{ ami_id_file }}
