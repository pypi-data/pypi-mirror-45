Metadata-Version: 1.1
Name: optimizely-sdk
Version: 3.1.0
Summary: Python SDK for Optimizely X Full Stack.
Home-page: https://github.com/optimizely/python-sdk
Author: Optimizely
Author-email: developers@optimizely.com
License:                                  Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

   1. Definitions.

      "License" shall mean the terms and conditions for use, reproduction,
      and distribution as defined by Sections 1 through 9 of this document.

      "Licensor" shall mean the copyright owner or entity authorized by
      the copyright owner that is granting the License.

      "Legal Entity" shall mean the union of the acting entity and all
      other entities that control, are controlled by, or are under common
      control with that entity. For the purposes of this definition,
      "control" means (i) the power, direct or indirect, to cause the
      direction or management of such entity, whether by contract or
      otherwise, or (ii) ownership of fifty percent (50%) or more of the
      outstanding shares, or (iii) beneficial ownership of such entity.

      "You" (or "Your") shall mean an individual or Legal Entity
      exercising permissions granted by this License.

      "Source" form shall mean the preferred form for making modifications,
      including but not limited to software source code, documentation
      source, and configuration files.

      "Object" form shall mean any form resulting from mechanical
      transformation or translation of a Source form, including but
      not limited to compiled object code, generated documentation,
      and conversions to other media types.

      "Work" shall mean the work of authorship, whether in Source or
      Object form, made available under the License, as indicated by a
      copyright notice that is included in or attached to the work
      (an example is provided in the Appendix below).

      "Derivative Works" shall mean any work, whether in Source or Object
      form, that is based on (or derived from) the Work and for which the
      editorial revisions, annotations, elaborations, or other modifications
      represent, as a whole, an original work of authorship. For the purposes
      of this License, Derivative Works shall not include works that remain
      separable from, or merely link (or bind by name) to the interfaces of,
      the Work and Derivative Works thereof.

      "Contribution" shall mean any work of authorship, including
      the original version of the Work and any modifications or additions
      to that Work or Derivative Works thereof, that is intentionally
      submitted to Licensor for inclusion in the Work by the copyright owner
      or by an individual or Legal Entity authorized to submit on behalf of
      the copyright owner. For the purposes of this definition, "submitted"
      means any form of electronic, verbal, or written communication sent
      to the Licensor or its representatives, including but not limited to
      communication on electronic mailing lists, source code control systems,
      and issue tracking systems that are managed by, or on behalf of, the
      Licensor for the purpose of discussing and improving the Work, but
      excluding communication that is conspicuously marked or otherwise
      designated in writing by the copyright owner as "Not a Contribution."

      "Contributor" shall mean Licensor and any individual or Legal Entity
      on behalf of whom a Contribution has been received by Licensor and
      subsequently incorporated within the Work.

   2. Grant of Copyright License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      copyright license to reproduce, prepare Derivative Works of,
      publicly display, publicly perform, sublicense, and distribute the
      Work and such Derivative Works in Source or Object form.

   3. Grant of Patent License. Subject to the terms and conditions of
      this License, each Contributor hereby grants to You a perpetual,
      worldwide, non-exclusive, no-charge, royalty-free, irrevocable
      (except as stated in this section) patent license to make, have made,
      use, offer to sell, sell, import, and otherwise transfer the Work,
      where such license applies only to those patent claims licensable
      by such Contributor that are necessarily infringed by their
      Contribution(s) alone or by combination of their Contribution(s)
      with the Work to which such Contribution(s) was submitted. If You
      institute patent litigation against any entity (including a
      cross-claim or counterclaim in a lawsuit) alleging that the Work
      or a Contribution incorporated within the Work constitutes direct
      or contributory patent infringement, then any patent licenses
      granted to You under this License for that Work shall terminate
      as of the date such litigation is filed.

   4. Redistribution. You may reproduce and distribute copies of the
      Work or Derivative Works thereof in any medium, with or without
      modifications, and in Source or Object form, provided that You
      meet the following conditions:

      (a) You must give any other recipients of the Work or
          Derivative Works a copy of this License; and

      (b) You must cause any modified files to carry prominent notices
          stating that You changed the files; and

      (c) You must retain, in the Source form of any Derivative Works
          that You distribute, all copyright, patent, trademark, and
          attribution notices from the Source form of the Work,
          excluding those notices that do not pertain to any part of
          the Derivative Works; and

      (d) If the Work includes a "NOTICE" text file as part of its
          distribution, then any Derivative Works that You distribute must
          include a readable copy of the attribution notices contained
          within such NOTICE file, excluding those notices that do not
          pertain to any part of the Derivative Works, in at least one
          of the following places: within a NOTICE text file distributed
          as part of the Derivative Works; within the Source form or
          documentation, if provided along with the Derivative Works; or,
          within a display generated by the Derivative Works, if and
          wherever such third-party notices normally appear. The contents
          of the NOTICE file are for informational purposes only and
          do not modify the License. You may add Your own attribution
          notices within Derivative Works that You distribute, alongside
          or as an addendum to the NOTICE text from the Work, provided
          that such additional attribution notices cannot be construed
          as modifying the License.

      You may add Your own copyright statement to Your modifications and
      may provide additional or different license terms and conditions
      for use, reproduction, or distribution of Your modifications, or
      for any such Derivative Works as a whole, provided Your use,
      reproduction, and distribution of the Work otherwise complies with
      the conditions stated in this License.

   5. Submission of Contributions. Unless You explicitly state otherwise,
      any Contribution intentionally submitted for inclusion in the Work
      by You to the Licensor shall be under the terms and conditions of
      this License, without any additional terms or conditions.
      Notwithstanding the above, nothing herein shall supersede or modify
      the terms of any separate license agreement you may have executed
      with Licensor regarding such Contributions.

   6. Trademarks. This License does not grant permission to use the trade
      names, trademarks, service marks, or product names of the Licensor,
      except as required for reasonable and customary use in describing the
      origin of the Work and reproducing the content of the NOTICE file.

   7. Disclaimer of Warranty. Unless required by applicable law or
      agreed to in writing, Licensor provides the Work (and each
      Contributor provides its Contributions) on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
      implied, including, without limitation, any warranties or conditions
      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
      PARTICULAR PURPOSE. You are solely responsible for determining the
      appropriateness of using or redistributing the Work and assume any
      risks associated with Your exercise of permissions under this License.

   8. Limitation of Liability. In no event and under no legal theory,
      whether in tort (including negligence), contract, or otherwise,
      unless required by applicable law (such as deliberate and grossly
      negligent acts) or agreed to in writing, shall any Contributor be
      liable to You for damages, including any direct, indirect, special,
      incidental, or consequential damages of any character arising as a
      result of this License or out of the use or inability to use the
      Work (including but not limited to damages for loss of goodwill,
      work stoppage, computer failure or malfunction, or any and all
      other commercial damages or losses), even if such Contributor
      has been advised of the possibility of such damages.

   9. Accepting Warranty or Additional Liability. While redistributing
      the Work or Derivative Works thereof, You may choose to offer,
      and charge a fee for, acceptance of support, warranty, indemnity,
      or other liability obligations and/or rights consistent with this
      License. However, in accepting such obligations, You may act only
      on Your own behalf and on Your sole responsibility, not on behalf
      of any other Contributor, and only if You agree to indemnify,
      defend, and hold each Contributor harmless for any liability
      incurred by, or claims asserted against, such Contributor by reason
      of your accepting any such warranty or additional liability.

   END OF TERMS AND CONDITIONS

   APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

   Copyright 2016 Optimizely

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

Description: Optimizely X Full Stack is A/B testing and feature management for product development teams. Experiment in any application. Make every feature on your roadmap an opportunity to learn. Learn more at https://www.optimizely.com/products/full-stack/ or see our documentation at https://developers.optimizely.com/x/solutions/sdks/reference/index.html?language=python.
        
        # Readme: 
        Optimizely Python SDK
        =====================
        
        |PyPI version| |Build Status| |Coverage Status| |Apache 2.0|
        
        This repository houses the official Python SDK for use with Optimizely Full Stack and Optimizely Rollouts.
        
        Optimizely Full Stack is A/B testing and feature flag management for product development teams. Experiment in any application. Make every feature on your roadmap an opportunity to learn. Learn more at https://www.optimizely.com/platform/full-stack/, or see the `Full Stack documentation`_.
        
        Optimizely Rollouts is free feature flags for development teams. Easily roll out and roll back features in any application without code deploys. Mitigate risk for every feature on your roadmap. Learn more at https://www.optimizely.com/rollouts/, or see the `Rollouts documentation`_.
        
        Getting Started
        ---------------
        
        Installing the SDK
        ~~~~~~~~~~~~~~~~~~
        
        The SDK is available through `PyPi`_. To install:
        
        ::
        
           pip install optimizely-sdk
        
        Feature Management Access
        ~~~~~~~~~~~~~~~~~~~~~~~~~
        
        To access the Feature Management configuration in the Optimizely
        dashboard, please contact your Optimizely account executive.
        
        Using the SDK
        ~~~~~~~~~~~~~
        
        See the Optimizely `Full Stack documentation`_ to learn how to
        set up your first Python project and use the SDK.
        
        Development
        -----------
        
        Building the SDK
        ~~~~~~~~~~~~~~~~
        
        Build and install the SDK with pip, using the following command:
        
        ::
        
           pip install -e .
        
        Unit tests
        ~~~~~~~~~~
        
        Running all tests
        '''''''''''''''''
        
        To get test dependencies installed, use a modified version of the
        install command:
        
        ::
        
           pip install -e .[test]
        
        You can run all unit tests with:
        
        ::
        
           nosetests
        
        Running all tests in a file
        '''''''''''''''''''''''''''
        
        To run all tests under a particular test file you can use the following
        command:
        
        ::
        
           nosetests tests.<file_name_without_extension>
        
        For example, to run all tests under ``test_event``, the command would
        be:
        
        ::
        
           nosetests tests.test_event
        
        Running all tests under a class
        '''''''''''''''''''''''''''''''
        
        To run all tests under a particular class of tests you can use the
        following command:
        
        ::
        
           nosetests tests.<file_name_without_extension>:ClassName
        
        For example, to run all tests under ``test_event.EventTest``, the
        command would be:
        
        ::
        
           nosetests tests.test_event:EventTest
        
        Running a single test
        '''''''''''''''''''''
        
        To run a single test you can use the following command:
        
        ::
        
           nosetests tests.<file_name_without_extension>:ClassName.test_name
        
        For example, to run ``test_event.EventTest.test_dispatch``, the command
        would be:
        
        ::
        
           nosetests tests.test_event:EventTest.test_dispatch
        
        Contributing
        ~~~~~~~~~~~~
        
        Please see `CONTRIBUTING`_.
        
        .. _PyPi: https://pypi.python.org/pypi?name=optimizely-sdk&:action=display
        .. _Full Stack documentation: https://docs.developers.optimizely.com/full-stack/docs
        .. _Rollouts documentation: https://docs.developers.optimizely.com/rollouts/docs
        .. _CONTRIBUTING: CONTRIBUTING.rst
        
        .. |PyPI version| image:: https://badge.fury.io/py/optimizely-sdk.svg
           :target: https://pypi.org/project/optimizely-sdk
        .. |Build Status| image:: https://travis-ci.org/optimizely/python-sdk.svg?branch=master
           :target: https://travis-ci.org/optimizely/python-sdk
        .. |Coverage Status| image:: https://coveralls.io/repos/github/optimizely/python-sdk/badge.svg
           :target: https://coveralls.io/github/optimizely/python-sdk
        .. |Apache 2.0| image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg
           :target: http://www.apache.org/licenses/LICENSE-2.0
        
        
        # Change Log: 
        3.1.0
        -----
        
        May 3rd, 2019
        
        New Features:
        ~~~~~~~~~~~~~
        
        -  Introduced Decision notification listener to be able to record:
        
           -  Variation assignments for users activated in an experiment.
           -  Feature access for users.
           -  Feature variable value for users.
        
        Bug Fixes:
        ~~~~~~~~~~
        
        -  Feature variable APIs now return default variable value when featureEnabled property is false. (`#171`_)
        
        .. _#171: https://github.com/optimizely/python-sdk/pull/171
        
        Deprecated:
        ~~~~~~~~~~~
        
        - Activate notification listener is deprecated as of this release.
          Recommendation is to use the new Decision notification listener.
          Activate notification listener will be removed in the next major release.
        
        3.0.0
        -----
        
        March 1st, 2019
        
        The 3.0 release improves event tracking and supports additional audience targeting functionality.
        
        New Features:
        ~~~~~~~~~~~~~
        
        -  Event tracking:
        
           -  The ``track`` method now dispatches its conversion event
              *unconditionally*, without first determining whether the user is
              targeted by a known experiment that uses the event. This may
              increase outbound network traffic.
           -  In Optimizely results, conversion events sent by 3.0 SDKs don't
              explicitly name the experiments and variations that are currently
              targeted to the user. Instead, conversions are automatically
              attributed to variations that the user has previously seen, as long
              as those variations were served via 3.0 SDKs or by other clients
              capable of automatic attribution, and as long as our backend
              actually received the impression events for those variations.
           -  Altogether, this allows you to track conversion events and
              attribute them to variations even when you don’t know all of a
              user’s attribute values, and even if the user’s attribute values
              or the experiment’s configuration have changed such that the user
              is no longer affected by the experiment. As a result, **you may
              observe an increase in the conversion rate for
              previously-instrumented events.** If that is undesirable, you can
              reset the results of previously-running experiments after
              upgrading to the 3.0 SDK.
           -  This will also allow you to attribute events to variations from
              other Optimizely projects in your account, even though those
              experiments don’t appear in the same datafile.
           -  Note that for results segmentation in Optimizely results, the user
              attribute values from one event are automatically applied to all
              other events in the same session, as long as the events in
              question were actually received by our backend. This behavior was
              already in place and is not affected by the 3.0 release.
        
        -  Support for all types of attribute values, not just strings.
        
           -  All values are passed through to notification listeners.
           -  Strings, booleans, and valid numbers are passed to the event
              dispatcher and can be used for Optimizely results segmentation. A
              valid number is a finite float or numbers.Integral in the inclusive range [-2⁵³,
              2⁵³].
           -  Strings, booleans, and valid numbers are relevant for audience
              conditions.
        
        -  Support for additional matchers in audience conditions:
        
           -  An ``exists`` matcher that passes if the user has a non-null value
              for the targeted user attribute and fails otherwise.
           -  A ``substring`` matcher that resolves if the user has a string
              value for the targeted attribute.
           -  ``gt`` (greater than) and ``lt`` (less than) matchers that resolve
              if the user has a valid number value for the targeted attribute. A
              valid number is a finite float or numbers.Integral in the inclusive range [-2⁵³,
              2⁵³].
           -  The original (``exact``) matcher can now be used to target
              booleans and valid numbers, not just strings.
        
        -  Support for A/B tests, feature tests, and feature rollouts whose
           audiences are combined using ``"and"`` and ``"not"`` operators, not
           just the ``"or"`` operator.
        -  Datafile-version compatibility check: The SDK will remain
           uninitialized (i.e., will gracefully fail to activate experiments and
           features) if given a datafile version greater than 4.
        -  Updated Pull Request template and commit message guidelines.
        
        Breaking Changes:
        ~~~~~~~~~~~~~~~~~
        
        -  Conversion events sent by 3.0 SDKs don't explicitly name the experiments
           and variations that are currently targeted to the user, so these events
           are unattributed in raw events data export. You must use the new *results*
           export to determine the variations to which events have been attributed.
        -  Previously, notification listeners were only given string-valued user
           attributes because only strings could be passed into various method
           calls. That is no longer the case. You may pass non-string attribute
           values, and if you do, you must update your notification listeners to
           be able to receive whatever values you pass in.
        
        Bug Fixes:
        ~~~~~~~~~~
        
        -  Experiments and features can no longer activate when a negatively
           targeted attribute has a missing, null, or malformed value.
        
           -  Audience conditions (except for the new ``exists`` matcher) no
              longer resolve to ``false`` when they fail to find an legitimate
              value for the targeted user attribute. The result remains ``null``
              (unknown). Therefore, an audience that negates such a condition
              (using the ``"not"`` operator) can no longer resolve to ``true``
              unless there is an unrelated branch in the condition tree that
              itself resolves to ``true``.
        
        -  Updated the default event dispatcher to log an error if the request
           resolves to HTTP 4xx or 5xx. (`#140`_)
        -  All methods now validate that user IDs are strings and that
           experiment keys, feature keys, feature variable keys, and event keys
           are non-empty strings.
        
        .. _#140: https://github.com/optimizely/python-sdk/pull/140
        
        2.1.1
        -----
        
        August 21st, 2018
        
        -  Fix: record conversions for all experiments using an event when using
           track(\ `#136`_).
        
        .. _section-1:
        
        2.1.0
        -----
        
        July 2nd, 2018
        
        -  Introduced support for bot filtering (`#121`_).
        -  Overhauled logging to use standard Python logging (`#123`_).
        
        .. _section-2:
        
        2.0.1
        -----
        
        June 19th, 2018
        
        -  Fix: send impression event for Feature Test when Feature is disabled
           (`#128`_).
        
        2.0.0
        -----
        
        April 12th, 2018
        
        This major release introduces APIs for Feature Management. It also
        introduces some breaking changes listed below.
        
        New Features
        ~~~~~~~~~~~~
        
        -  Introduced the ``is_feature_enabled`` API to determine whether to
           show a feature to a user or not.
        
        ::
        
           is_enabled = optimizel_client.is_feature_enabled('my_feature_key', 'my_user', user_attributes)
        
        -  All enabled features for the user can be retrieved by calling:
        
        ::
        
           enabled_features = optimizely_client.get_enabled_features('my_user', user_attributes)
        
        -  Introduced Feature Variables to configure or parameterize a feature.
           There are four variable types: ``String``, ``Integer``, ``Double``,
           ``Boolean``.
        
        ::
        
           string_variable = optimizely_client.get_feature_variable_string('my_feature_key', 'string_variable_key', 'my_user')
           integer_variable = optimizely_client.get_feature_variable_integer('my_feature_key', 'integer_variable_key', 'my_user')
           double_variable = optimizely_client.get_feature_variable_double('my_feature_key', 'double_variable_key', 'my_user')
           boolean_variable = optimizely_client.get_feature_variable_boolean('my_feature_key', 'boolean_variable_key', 'my_user')
        
        Breaking changes
        ~~~~~~~~~~~~~~~~
        
        -  The ``track`` API with revenue value as a stand-alone parameter has
           been removed. The revenue value should be passed in as an entry in
           the event tags dict. The key for the revenue tag is ``revenue`` and
           the passed in value will be treated by Optimizely as the value for
           computing results.
        
        ::
        
           event_tags = {
             'revenue': 1200
           }
        
           optimizely_client.track('event_key', 'my_user', user_attributes, event_tags)
        
        2.0.0b1
        -------
        
        March 29th, 2018
        
        This beta release introduces APIs for Feature Management. It also
        introduces some breaking changes listed below.
        
        New Features
        ~~~~~~~~~~~~
        
        -  Introduced the ``is_feature_enabled`` API to determine whether to
           show a feature to a user or not.
        
        ::
        
           is_enabled = optimizel_client.is_feature_enabled('my_feature_key', 'my_user', user_attributes)
        
        -  All enabled features for the user can be retrieved by calling:
        
        ::
        
           enabled_features = optimizely_client.get_enabled_features('my_user', user_attributes)
        
        -  Introduced Feature Variables to configure or parameterize a feature.
           There are four variable types: ``String``, ``Integer``, ``Double``,
           ``Boolean``.
        
        ::
        
           string_variable = optimizely_client.get_feature_variable_string('my_feature_key', 'string_variable_key', 'my_user')
           integer_variable = optimizely_client.get_feature_variable_integer('my_feature_key', 'integer_variable_key', 'my_user')
           double_variable = optimizely_client.get_feature_variable_double('my_feature_key', 'double_variable_key', 'my_user')
           boolean_variable = optimizely_client.get_feature_variable_boolean('my_feature_key', 'boolean_variable_key', 'my_user')
        
        Breaking changes
        ~~~~~~~~~~~~~~~~
        
        -  The ``track`` API with revenue value as a stand-alone parameter has
           been removed. The revenue value should be passed in as an entry in
           the event tags dict. The key for the revenue tag is ``revenue`` and
           the passed in value will be treated by Optimizely as the value for
           computing results.
        
        ::
        
           event_tags = {
             'revenue': 1200
           }
        
           optimizely_client.track('event_key', 'my_user', user_attributes, event_tags)
        
        1.4.0
        -----
        
        -  Added support for IP anonymization.
        -  Added support for notification listeners.
        -  Added support for bucketing ID.
        -  Updated mmh3 to handle installation failures on Windows 10.
        
        .. _section-3:
        
        1.3.0
        -----
        
        -  Introduced support for forced bucketing.
        -  Introduced support for numeric metrics.
        -  Updated event builder to support new endpoint.
        
        .. _section-4:
        
        1.2.1
        -----
        
        -  Removed older feature flag parsing.
        
        .. _section-5:
        
        1.2.0
        -----
        
        -  Added user profile service.
        
        .. _section-6:
        
        1.1.1
        -----
        
        -  Updated datafile parsing to be able to handle additional fields.
        -  Deprecated Classic project support.
        
        .. _section-7:
        
        1.1.0
        -----
        
        -  Included datafile revision information in log events.
        -  Added event tags to track API to allow users to pass in event
           metadata.
        -  Deprecated the ``event_value`` parameter from the track method.
           Should use ``event_tags`` to pass in event value instead.
        -  Updated event logging endpoint to logx.optimizely.com.
        
        .. _section-8:
        
        1.0.0
        -----
        
        -  Introduced support for Full Stack projects in Optimizely X. No
           breaking changes from previous version.
        -  Introduced more graceful exception handling in instantiation and core
           methods.
        -  Updated whitelisting to precede audience matching.
        
        .. _section-9:
        
        0.1.3
        -----
        
        -  Added support for v2 endpoint and datafile.
        -  Updated dispatch_event to consume an Event object instead of url and
           params. The Event object comprises of four properties: url (string
           representing URL to dispatch event to), params (dict representing the
           params to be set for the event), http_verb (one of ‘GET’ or ‘POST’)
           and headers (header values to be sent along).
        -  Fixed issue with tracking events for experiments in groups.
        
        0.1.2
        -----
        
        -  Updated requirements file.
        
        .. _section-10:
        
        0.1.1
        -----
        
        -  Introduced option to skip JSON schema validation.
        
        .. _section-11:
        
        0.1.0
        -----
        
        -  Beta release of the Python SDK for server-side testing.
        
        .. _#136: https://github.com/optimizely/python-sdk/pull/136
        .. _#121: https://github.com/optimizely/python-sdk/pull/121
        .. _#123: https://github.com/optimizely/python-sdk/pull/123
        .. _#128: https://github.com/optimizely/python-sdk/pull/128
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
