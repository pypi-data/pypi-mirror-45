#!/usr/bin/env python

import argparse
import os
import vdomr as vd
from mountaintools import client as mt
# from forestview import ForestViewMainWindow
from forestview import forestview
import uuid
import json
import sys
import uuid
import mtlogging

class TheApp():
    def __init__(self, *, mode, path):
        self._mode = mode
        self._path = path

    def createSession(self):
        W = forestview(path=self._path, mode=self._mode)
        
        _make_full_browser(W)
        return W

    def title(self):
        return 'ForestView ({}) - {}'.format(self._mode, self._path)

_default_spikeforest_file = 'sha1dir://03e12d2f1af3e038886f25a94871f3723a66502a.toy_recordings'

def main():
    parser = argparse.ArgumentParser(description='Browse SpikeForest studies, recordings, and results')
    parser.add_argument(
        'file', help='Path to the recording directory, a directory of recordings, or a spikeforest file', nargs='?', default=None
    )
    parser.add_argument(
        '--mode', help="Possible modes: spikeforest, analysis", required=False, default='spikeforest'
    )
    parser.add_argument(
        '--port', help='The port to listen on (for a web service). Otherwise, attempt to launch as stand-alone GUI.', required=False, default=None
    )
    parser.add_argument(
        '--path', help='Deprecated -- use the positional argument instead.', required=False, default=None
    )
    parser.add_argument(
        '--download-from', required=False, default=None
    )

    args = parser.parse_args()

    if args.path is not None:
        print('NOTE: --path argument is deprecated. Use the positional argument instead.')
        if args.file is not None:
            raise Exception('Cannot use --path together with positional argument.')
        args.file = args.path

    if args.file is None:
        args.file = _default_spikeforest_file

    if args.download_from is None:
        args.download_from = 'kbucket,public'

    if args.download_from:
        list0 = args.download_from.split(',')
        mt.configDownloadFrom(list0)

    APP = TheApp(mode=args.mode, path=args.file)

    if args.port is not None:
        vd.config_server()
        server = vd.VDOMRServer(APP)
        server.setPort(int(args.port))
        server.start()
    else:
        print(APP.title())
        vd.pyqt5_start(app=APP, title=APP.title())

def _make_full_browser(W):
    resize_callback_id = 'resize-callback-' + str(uuid.uuid4())
    vd.register_callback(resize_callback_id, lambda width, height: W.setSize((width, height)))
    js = """
    document.body.style="overflow:hidden";
    let onresize_scheduled=false;
    function schedule_onresize() {
        if (onresize_scheduled) return;
        onresize_scheduled=true;
        setTimeout(function() {
            onresize();
            onresize_scheduled=false;
        },100);
    }
    function onresize() {
        width = document.body.clientWidth;
        height = document.body.clientHeight;
        window.vdomr_invokeFunction('{resize_callback_id}', [width, height], {})
    }
    window.addEventListener("resize", schedule_onresize);
    schedule_onresize();
    """
    js = js.replace('{resize_callback_id}', resize_callback_id)
    vd.devel.loadJavascript(js=js, delay=1)

if __name__ == "__main__":
    main()
