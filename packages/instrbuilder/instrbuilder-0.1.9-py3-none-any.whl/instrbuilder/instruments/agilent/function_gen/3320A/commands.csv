name,ascii_str,ascii_str_get,getter,getter_type,setter,setter_type,setter_range ,doc,subsystem,is_config,setter_inputs,getter_inputs
function,FUNC,,TRUE,str,TRUE,str,"['SIN', 'SQU', 'RAMP', 'PULS', 'NOIS', 'DC', 'USER']","output function, sin; square, etc.",output,TRUE,,
freq,FREQ,,TRUE,float,TRUE,float,"[0, 30e6]",output frequency in Hz,output,TRUE,,
v,VOLT,,TRUE,float,TRUE,float,"[10e-3, 10]",voltage amplitude,output,TRUE,,
offset,VOLT:OFFS,,TRUE,float,TRUE,float,"[-4.99, 4.99]","voltage offset, range depends on amplitude ",output,TRUE,,
v_low,VOLT:LOW,,TRUE,float,TRUE,float,"[0,1]",need to check this one,output,TRUE,,
v_high,VOLT:HIGH,,TRUE,float,TRUE,float,"[0,1]",need to check this one,output,TRUE,,
unit,VOLT:UNIT,,TRUE,str,TRUE,str,"['VPP', 'VRMS', 'DBM']",voltage unit,output,TRUE,,
output,OUTP,,TRUE,int,TRUE,str,"['OFF', 'ON']",turn output on or off,output,TRUE,,
duty_cycle,FUNC:SQU:DCYC,,TRUE,float,TRUE,float,"[0, 100]",square wave,output,TRUE,,
symmetry,FUNC:RAMP:SYMM,,TRUE,float,TRUE,float,"[0,100]",ramp,output,TRUE,,
load,OUTP:LOAD,,TRUE,float,TRUE,str,None,output load (50 Ohm or High-Z),output,TRUE,,
polarity,OUTP:POL,,TRUE,str,TRUE,str,"['NORM', 'INV']",invert the output or not,output,TRUE,,
sync,OUTP:SYNC,,TRUE,int,TRUE,int,"['OFF', 'ON']",sync to external reference,output,TRUE,,
pulse_period,PULS:PER,,TRUE,float,TRUE,float,"[200e-9, 2000]",period for pulses ,pulse,TRUE,,
pulse_hold,FUNC:PULS:HOLD,,TRUE,str,TRUE,str,"['WIDT', 'DCYC']",maintains/holds the pulse width or the pulse duty-cycle,pulse,TRUE,,
pulse_width,FUNC:PULS:WIDT,,TRUE,float,TRUE,float,"[20e-9, 1999.99]",sets the pulse width (50% - 50%),pulse,TRUE,,
pulse_dcycle,FUNC:PULS:DCYC,,TRUE,float,TRUE,float,"[0, 100]",sets the pulse duty-cycle,pulse,TRUE,,
pulse_transition,FUNC:PULS:TRAN,,TRUE,float,TRUE,float,"[5e-9, 100e-9]",edge time in seconds (both rising and falling),pulse,TRUE,,
id,*IDN,,TRUE,str,FALSE,none,None,device id,status,FALSE,,
reset,*RST,,FALSE,str,TRUE,int,"[0,255]",reset device ,status,FALSE,,
comm_error,*ESR,,TRUE,bit5_set,FALSE,none,None,single status bit that ,status,FALSE,,
status_byte,*STB,,TRUE,int,FALSE,none,None,query the summary register (bit 6),status,FALSE,,
status_enable,*SRE,,TRUE,int,TRUE,int,"[0,255]",status register enable ,status,FALSE,,
event_status,*ESR,,TRUE,int,FALSE,none,None,event status register ,status,FALSE,,
event_status_enable,*ESE,,TRUE,int,TRUE,int,"[0,255]",enable bits in the event status register ,status,FALSE,,
clear_status,*CLS,,FALSE,none,TRUE,int,"[0,255]",clear the even register in all register groups,status,FALSE,,
power_on_clear,*PSC,,TRUE,int,TRUE,int,"[0,255]",clear the standard event enable register,status,FALSE,,
set_opc,*OPC,,FALSE,none,TRUE,int,"[0,255]",Set the operation complete bit in the standard event register,status,FALSE,,