mezzanine-heroku (Python Library)
=================================

.. image:: https://img.shields.io/pypi/v/mezzanine-heroku.svg
   :target: https://pypi.org/project/mezzanine-heroku/
.. image:: https://travis-ci.com/jackvz/mezzanine-heroku.svg?branch=production
    :target: https://travis-ci.com/jackvz/mezzanine-heroku
.. image:: https://img.shields.io/github/license/jackvz/mezzanine-heroku.svg
   :target: https://github.com/jackvz/mezzanine-heroku/blob/master/LICENSE

This is a `Mezzanine <http://mezzanine.jupo.org/>`_ library for `Heroku <https://www.heroku.com/>`_ applications that ensures a seamless deployment and development experience.

This is a modification of `django-heroku <https://github.com/heroku/django-heroku>`_.

The only essential change is the static files configuration. 

Additional functionality for a `one-click deploy to Heroku <https://github.com/jackvz/mezzanine-cms-on-heroku>`_ with one of the free Mezzanine themes.

Environment variable to configuration setting mappings for:
SECRET_KEY
NEVERCACHE_KEY
SHOP_CURRENCY_LOCALE
STRIPE_API_KEY
AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY
AWS_STORAGE_BUCKET_NAME
EMAIL_HOST
EMAIL_HOST_USER
EMAIL_HOST_PASSWORD
DEFAULT_FROM_EMAIL

This is tested with the settings generated by 'mezzanine-project -a cartridge project_name' with:
Django                        1.11.20
Mezzanine                     4.3.1
Cartridge                     0.13.0

This library provides:

-  Settings configuration (Static files / WhiteNoise).
-  Logging configuration.
-  Test runner (important for `Heroku CI <https://www.heroku.com/continuous-integration>`_).

--------------

Mezzanine 4.3.1 and Django 1.11.20 is targeted, and Python 3 is supported.

Usage of mezzanine-heroku
-------------------------

In ``settings.py``, at the very bottom::

    â€¦
    # Configure Mezzanine for Heroku.
    import mezzanine_heroku
    mezzanine_heroku.settings(locals())

This will automatically configure ``DATABASE_URL``, ``ALLOWED_HOSTS``, WhiteNoise (for static assets), Logging, and Heroku CI for your application.

**Bonus points!** If you set the ``SECRET_KEY`` environment variable, it will automatically be used in your Mezzanine settings, too!

Disabling Functionality
///////////////////////

``settings()`` also accepts keyword arguments that can be passed ``False`` as a value, which will disable automatic configuration for their specific areas of responsibility:

- ``databases``
- ``test_runner``
- ``staticfiles``
- ``allowed_hosts``
- ``logging``
- ``secret_key``
