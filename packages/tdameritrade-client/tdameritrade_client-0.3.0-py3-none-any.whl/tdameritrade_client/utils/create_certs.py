from datetime import datetime

from OpenSSL.crypto import PKey, X509, TYPE_RSA

TYPE_RSA = TYPE_RSA


def create_key_pair(bits: int) -> PKey:
    """
    Create a public/private key pair.

    Args:
        bits: Number of bits to use in the key

    Returns:
        The public/private key pair in a PKey object

    """
    pkey = PKey()
    pkey.generate_key(TYPE_RSA, bits)
    return pkey


def create_certificate(key_pair: PKey, digest: str = 'sha256') -> X509:
    """
    Generate a certificate given a certificate request.

    Args:
        key_pair: A public/private key pair generated by OpenSSL.crypto.
        digest: Digest method to use for signing. Default is sha256.

    Returns:
        The signed certificate in an X509 object.

    """
    current_year = datetime.utcnow().strftime('%Y')
    next_year = str(int(current_year) + 1)
    now = current_year + datetime.utcnow().strftime('%m%d%H%M%SZ')
    expires = next_year + datetime.utcnow().strftime('%m%d%H%M%SZ')

    cert = X509()
    cert.set_serial_number(0000)
    cert.set_notBefore(now.encode('utf-8'))
    cert.set_notAfter(expires.encode('utf-8'))
    cert.set_pubkey(key_pair)
    cert.sign(key_pair, digest)
    return cert
