# -*- coding: utf-8 -*-
# Copyright 2019 Cohesity Inc.

import cohesity_management_sdk.models.app_instance_settings

class AppInstance(object):

    """Implementation of the 'App Instance.' model.

    AppInstance provides application instance's information.

    Attributes:
        app_access_token (string): Specifies the token to access with the
            app.
        app_instance_id (long|int): Specifies unique id across all instances
            of all apps.
        app_name (string): Specifies name of the app that is launched in this
            instance.
        app_uid (long|int): Specifies id of the app that is launched in this
            instance.
        app_version (long|int): Specifies the version of the app that is
            launched in this instance.
        created_time_usecs (long|int): Specifies timestamp (in microseconds)
            when the app instance was first created.
        creation_uid (string): Specifies an unique identifier generated by the
            client to let the backend identify retries of the app launch
            request.
        description (string): Specifies user configured description for the
            app instance.
        duration_usecs (long|int): Specifies duration (in microseconds) for
            which the app instance has run.
        health_detail (string): Specifies the reason the app instance is
            unhealthy. Only set if app instance is unhealthy.
        health_status (int): Specifies the current health status of the app
            instance.
        node_ip (string): Specifies the ip of the node which can be used to
            contact app instance external services.
        node_port (int): Specifies the node port on which the app instance
            services external requests.
        settings (AppInstanceSettings): AppInstanceSettings provides settings
            used while launching an app instance. Current settings include
            QoSTier to be used for the instance and views allowed to be
            accessed by the instance.
        state (State1Enum): Specifies the current state of the app instance.
            Specifies operational status of an app instance. kInitializing -
            The app instance has been launched or resumed, but is not fully
            running yet. kRunning - The app instance is running. Check
            health_status for the actual health. kPausing - The app instance
            is being paused. kPaused - The app instance has been paused.
            kTerminating - The app instance is being terminated. kTerminated -
            The app instance has been terminated. kFailed - The app instance
            has failed due to an unrecoverable error.
        state_detail (string): Specifies the failure reason when the app
            instance's state is kFailed.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "app_access_token":'appAccessToken',
        "app_instance_id":'appInstanceId',
        "app_name":'appName',
        "app_uid":'appUid',
        "app_version":'appVersion',
        "created_time_usecs":'createdTimeUsecs',
        "creation_uid":'creationUid',
        "description":'description',
        "duration_usecs":'durationUsecs',
        "health_detail":'healthDetail',
        "health_status":'healthStatus',
        "node_ip":'nodeIp',
        "node_port":'nodePort',
        "settings":'settings',
        "state":'state',
        "state_detail":'stateDetail'
    }

    def __init__(self,
                 app_access_token=None,
                 app_instance_id=None,
                 app_name=None,
                 app_uid=None,
                 app_version=None,
                 created_time_usecs=None,
                 creation_uid=None,
                 description=None,
                 duration_usecs=None,
                 health_detail=None,
                 health_status=None,
                 node_ip=None,
                 node_port=None,
                 settings=None,
                 state=None,
                 state_detail=None):
        """Constructor for the AppInstance class"""

        # Initialize members of the class
        self.app_access_token = app_access_token
        self.app_instance_id = app_instance_id
        self.app_name = app_name
        self.app_uid = app_uid
        self.app_version = app_version
        self.created_time_usecs = created_time_usecs
        self.creation_uid = creation_uid
        self.description = description
        self.duration_usecs = duration_usecs
        self.health_detail = health_detail
        self.health_status = health_status
        self.node_ip = node_ip
        self.node_port = node_port
        self.settings = settings
        self.state = state
        self.state_detail = state_detail


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        app_access_token = dictionary.get('appAccessToken')
        app_instance_id = dictionary.get('appInstanceId')
        app_name = dictionary.get('appName')
        app_uid = dictionary.get('appUid')
        app_version = dictionary.get('appVersion')
        created_time_usecs = dictionary.get('createdTimeUsecs')
        creation_uid = dictionary.get('creationUid')
        description = dictionary.get('description')
        duration_usecs = dictionary.get('durationUsecs')
        health_detail = dictionary.get('healthDetail')
        health_status = dictionary.get('healthStatus')
        node_ip = dictionary.get('nodeIp')
        node_port = dictionary.get('nodePort')
        settings = cohesity_management_sdk.models.app_instance_settings.AppInstanceSettings.from_dictionary(dictionary.get('settings')) if dictionary.get('settings') else None
        state = dictionary.get('state')
        state_detail = dictionary.get('stateDetail')

        # Return an object of this model
        return cls(app_access_token,
                   app_instance_id,
                   app_name,
                   app_uid,
                   app_version,
                   created_time_usecs,
                   creation_uid,
                   description,
                   duration_usecs,
                   health_detail,
                   health_status,
                   node_ip,
                   node_port,
                   settings,
                   state,
                   state_detail)


