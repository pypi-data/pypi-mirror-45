#!python

import os,sys
import requests


functions_list = {
  0: "printHelp",
  1: "printVersion",
  2: "functionAgent",
  3: "functionList"
}

VERSION="0.0.2"

def _arguments_parser(arguments):
  actions_list = {
    "help": 0,
    "version": 1,
    "agent": 2,
    "list": 3
  }
  try:
    _function_name=actions_list[arguments[0]]
  except:
    print("E! Not supported action. Try to use help.")
    sys.exit(1)
  return _function_name


def checkCredentials(function):

  print("PlatOps CLI")

  try:
    PLATOPS_KEY = os.environ['PLATOPS_KEY']
  except:
    print("E! No PLATOPS_KEY specified.\n")
    print("E! Please run `export PLATOPS_KEY=key`, where key is your API key.")
    sys.exit(1)

  def arguments_reader():
    if len(sys.argv) == 1:
      print("I! No actions were specified. Closed.")
      sys.exit(0)
    else:
      function_id=_arguments_parser(sys.argv[1::])
      return getattr(function(PLATOPS_KEY, sys.argv[1::]), functions_list[function_id])()

  return arguments_reader()


@checkCredentials
class StartUp(object):
  
  def __init__(self, PLATOPS_KEY, command_line):
    self.PLATOPS_KEY = PLATOPS_KEY
    self.command_line = command_line

  def printVersion(self):
    print("Version: "+VERSION)
    sys.exit(0)

  def printHelp(self):
    help_message="""
Usage : 
  version 	    :	  version of PlatOps CLI
  agent
          status    :     status of PlatOps agent
  list 
  	  hosts	    : 	  list of hosts
  	  users     :     list of users
  help              :     help message
    """
    print(help_message)
    sys.exit(0)

  def functionAgent(self):
    if self.command_line[1] == "status":
      print("Status of PlatOps agent")
      sys.exit(0)
    else:
      print("E! Not supported action. Try to use help.")
      sys.exit(1)

  def functionList(self):
    print("list function")
