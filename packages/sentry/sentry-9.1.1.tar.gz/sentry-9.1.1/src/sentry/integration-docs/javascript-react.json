{
  "html": "<p>To use Sentry with your React application, you will need to use <code class=\"highlighter-rouge\">@sentry/browser</code> (Sentry\u2019s browser JavaScript SDK).<br>\nOn its own, <code class=\"highlighter-rouge\">@sentry/browser</code> will report any uncaught exceptions triggered from your application.</p>\n\n<p>If you\u2019re using React 16 or above, Error Boundaries are an important tool for defining the behavior of your application in the face of errors. Be sure to send errors they catch to Sentry using <code class=\"highlighter-rouge\">Sentry.captureException</code>. This is also a great opportunity to collect user feedback by using <code class=\"highlighter-rouge\">Sentry.showReportDialog</code>.</p>\n\n<div class=\"alert alert-info\" role=\"alert\">\n<h5 class=\"no_toc\">Note</h5>\n<div class=\"alert-body content-flush-bottom\">\n<p>One important thing to note about the behavior of error boundaries in development mode is that React will rethrow errors they catch. This will result in errors being reported twice to Sentry with the above setup, but this won\u2019t occur in your production build.</p> </div>\n</div>\n\n<pre class=\"highlight\"><code><span class=\"k\">import</span> <span class=\"o\">*</span> <span class=\"k\">as</span> <span class=\"nx\">Sentry</span> <span class=\"k\">from</span> <span class=\"s1\">'@sentry/browser'</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// Sentry.init({</span>\n<span class=\"c1\">//  dsn: \"___PUBLIC_DSN___\"</span>\n<span class=\"c1\">// });</span>\n<span class=\"c1\">// should have been called before using it here</span>\n<span class=\"c1\">// ideally before even rendering your react app</span>\n\n<span class=\"kd\">class</span> <span class=\"nx\">ExampleBoundary</span> <span class=\"kd\">extends</span> <span class=\"nx\">Component</span> <span class=\"p\">{</span>\n    <span class=\"kd\">constructor</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">super</span><span class=\"p\">(</span><span class=\"nx\">props</span><span class=\"p\">);</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"na\">error</span><span class=\"p\">:</span> <span class=\"kc\">null</span><span class=\"p\">,</span> <span class=\"na\">eventId</span><span class=\"p\">:</span> <span class=\"kc\">null</span> <span class=\"p\">};</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">componentDidCatch</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">,</span> <span class=\"nx\">errorInfo</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span> <span class=\"nx\">error</span> <span class=\"p\">});</span>\n      <span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">withScope</span><span class=\"p\">(</span><span class=\"nx\">scope</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n          <span class=\"nx\">scope</span><span class=\"p\">.</span><span class=\"nx\">setExtras</span><span class=\"p\">(</span><span class=\"nx\">errorInfo</span><span class=\"p\">);</span>\n          <span class=\"kd\">const</span> <span class=\"nx\">eventId</span> <span class=\"o\">=</span> <span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">captureException</span><span class=\"p\">(</span><span class=\"nx\">error</span><span class=\"p\">);</span>\n          <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">setState</span><span class=\"p\">({</span><span class=\"nx\">eventId</span><span class=\"p\">})</span>\n      <span class=\"p\">});</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nx\">render</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">error</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"c1\">//render fallback UI</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span>\n              <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">onClick=</span><span class=\"si\">{</span><span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"nx\">Sentry</span><span class=\"p\">.</span><span class=\"nx\">showReportDialog</span><span class=\"p\">({</span> <span class=\"na\">eventId</span><span class=\"p\">:</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">state</span><span class=\"p\">.</span><span class=\"nx\">eventId</span> <span class=\"p\">})</span><span class=\"si\">}</span><span class=\"p\">&gt;</span>Report feedback<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">);</span>\n        <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n            <span class=\"c1\">//when there's not an error, render children untouched</span>\n            <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">props</span><span class=\"p\">.</span><span class=\"nx\">children</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre>", 
  "link": "https://docs.sentry.io/platforms/javascript/react/", 
  "id": "javascript-react", 
  "name": "React"
}
