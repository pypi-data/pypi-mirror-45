# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_spplugin_c')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_spplugin_c')
    _spplugin_c = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spplugin_c', [dirname(__file__)])
        except ImportError:
            import _spplugin_c
            return _spplugin_c
        try:
            _mod = imp.load_module('_spplugin_c', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _spplugin_c = swig_import_helper()
    del swig_import_helper
else:
    import _spplugin_c
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


SP_PLUGIN_CR_NONE = _spplugin_c.SP_PLUGIN_CR_NONE
SP_PLUGIN_CR_ERROR = _spplugin_c.SP_PLUGIN_CR_ERROR
SP_PLUGIN_CR_OPTION = _spplugin_c.SP_PLUGIN_CR_OPTION
SP_PLUGIN_DEVICE_UNKNOWN = _spplugin_c.SP_PLUGIN_DEVICE_UNKNOWN
SP_PLUGIN_DEVICE_FILE = _spplugin_c.SP_PLUGIN_DEVICE_FILE
SP_PLUGIN_DEVICE_AUDIO = _spplugin_c.SP_PLUGIN_DEVICE_AUDIO
SP_PLUGIN_DEVICE_CD = _spplugin_c.SP_PLUGIN_DEVICE_CD
SP_PLUGIN_DEVICE_MIXER = _spplugin_c.SP_PLUGIN_DEVICE_MIXER
SP_PLUGIN_DEVICE_OTHERS = _spplugin_c.SP_PLUGIN_DEVICE_OTHERS
class spWaveInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    file_type = _swig_property(_spplugin_c.spWaveInfo_file_type_get, _spplugin_c.spWaveInfo_file_type_set)
    file_desc = _swig_property(_spplugin_c.spWaveInfo_file_desc_get, _spplugin_c.spWaveInfo_file_desc_set)
    file_filter = _swig_property(_spplugin_c.spWaveInfo_file_filter_get, _spplugin_c.spWaveInfo_file_filter_set)
    buffer_size = _swig_property(_spplugin_c.spWaveInfo_buffer_size_get, _spplugin_c.spWaveInfo_buffer_size_set)
    header_size = _swig_property(_spplugin_c.spWaveInfo_header_size_get, _spplugin_c.spWaveInfo_header_size_set)
    samp_bit = _swig_property(_spplugin_c.spWaveInfo_samp_bit_get, _spplugin_c.spWaveInfo_samp_bit_set)
    num_channel = _swig_property(_spplugin_c.spWaveInfo_num_channel_get, _spplugin_c.spWaveInfo_num_channel_set)
    samp_rate = _swig_property(_spplugin_c.spWaveInfo_samp_rate_get, _spplugin_c.spWaveInfo_samp_rate_set)
    bit_rate = _swig_property(_spplugin_c.spWaveInfo_bit_rate_get, _spplugin_c.spWaveInfo_bit_rate_set)
    length = _swig_property(_spplugin_c.spWaveInfo_length_get, _spplugin_c.spWaveInfo_length_set)

    def __init__(self):
        this = _spplugin_c.new_spWaveInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spplugin_c.delete_spWaveInfo
    __del__ = lambda self: None
spWaveInfo_swigregister = _spplugin_c.spWaveInfo_swigregister
spWaveInfo_swigregister(spWaveInfo)

class spSongInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    info_mask = _swig_property(_spplugin_c.spSongInfo_info_mask_get, _spplugin_c.spSongInfo_info_mask_set)
    track = _swig_property(_spplugin_c.spSongInfo_track_get, _spplugin_c.spSongInfo_track_set)
    title = _swig_property(_spplugin_c.spSongInfo_title_get, _spplugin_c.spSongInfo_title_set)
    artist = _swig_property(_spplugin_c.spSongInfo_artist_get, _spplugin_c.spSongInfo_artist_set)
    album = _swig_property(_spplugin_c.spSongInfo_album_get, _spplugin_c.spSongInfo_album_set)
    genre = _swig_property(_spplugin_c.spSongInfo_genre_get, _spplugin_c.spSongInfo_genre_set)
    release = _swig_property(_spplugin_c.spSongInfo_release_get, _spplugin_c.spSongInfo_release_set)
    copyright = _swig_property(_spplugin_c.spSongInfo_copyright_get, _spplugin_c.spSongInfo_copyright_set)
    engineer = _swig_property(_spplugin_c.spSongInfo_engineer_get, _spplugin_c.spSongInfo_engineer_set)
    source = _swig_property(_spplugin_c.spSongInfo_source_get, _spplugin_c.spSongInfo_source_set)
    software = _swig_property(_spplugin_c.spSongInfo_software_get, _spplugin_c.spSongInfo_software_set)
    subject = _swig_property(_spplugin_c.spSongInfo_subject_get, _spplugin_c.spSongInfo_subject_set)
    comment = _swig_property(_spplugin_c.spSongInfo_comment_get, _spplugin_c.spSongInfo_comment_set)

    def __init__(self):
        this = _spplugin_c.new_spSongInfo()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _spplugin_c.delete_spSongInfo
    __del__ = lambda self: None
spSongInfo_swigregister = _spplugin_c.spSongInfo_swigregister
spSongInfo_swigregister(spSongInfo)


def xspGetSongInfoStringField_(song_info, key):
    return _spplugin_c.xspGetSongInfoStringField_(song_info, key)
xspGetSongInfoStringField_ = _spplugin_c.xspGetSongInfoStringField_

def xspGetWaveInfoStringField_(wave_info, index):
    return _spplugin_c.xspGetWaveInfoStringField_(wave_info, index)
xspGetWaveInfoStringField_ = _spplugin_c.xspGetWaveInfoStringField_

def spGetDefaultDir():
    return _spplugin_c.spGetDefaultDir()
spGetDefaultDir = _spplugin_c.spGetDefaultDir

def spInitWaveInfo(wave_info):
    return _spplugin_c.spInitWaveInfo(wave_info)
spInitWaveInfo = _spplugin_c.spInitWaveInfo

def spInitSongInfo(song_info):
    return _spplugin_c.spInitSongInfo(song_info)
spInitSongInfo = _spplugin_c.spInitSongInfo

def spSetPluginSearchPath(pathlist):
    return _spplugin_c.spSetPluginSearchPath(pathlist)
spSetPluginSearchPath = _spplugin_c.spSetPluginSearchPath

def spAppendPluginSearchPath(pathlist):
    return _spplugin_c.spAppendPluginSearchPath(pathlist)
spAppendPluginSearchPath = _spplugin_c.spAppendPluginSearchPath

def spSearchPluginFile(index):
    return _spplugin_c.spSearchPluginFile(index)
spSearchPluginFile = _spplugin_c.spSearchPluginFile

def spLoadPlugin(plugin_name):
    return _spplugin_c.spLoadPlugin(plugin_name)
spLoadPlugin = _spplugin_c.spLoadPlugin

def spFreePlugin(plugin):
    return _spplugin_c.spFreePlugin(plugin)
spFreePlugin = _spplugin_c.spFreePlugin

def spGetPluginName(plugin):
    return _spplugin_c.spGetPluginName(plugin)
spGetPluginName = _spplugin_c.spGetPluginName

def spGetPluginId(plugin):
    return _spplugin_c.spGetPluginId(plugin)
spGetPluginId = _spplugin_c.spGetPluginId

def spGetPluginDescription(plugin):
    return _spplugin_c.spGetPluginDescription(plugin)
spGetPluginDescription = _spplugin_c.spGetPluginDescription

def spGetPluginInformation(plugin):
    return _spplugin_c.spGetPluginInformation(plugin)
spGetPluginInformation = _spplugin_c.spGetPluginInformation

def spGetPluginVersionId(plugin):
    return _spplugin_c.spGetPluginVersionId(plugin)
spGetPluginVersionId = _spplugin_c.spGetPluginVersionId

def spGetPluginVersion(plugin):
    return _spplugin_c.spGetPluginVersion(plugin)
spGetPluginVersion = _spplugin_c.spGetPluginVersion

def spOpenFilePluginAuto_(plugin_name, filename, mode, device_type, wave_info, song_info):
    return _spplugin_c.spOpenFilePluginAuto_(plugin_name, filename, mode, device_type, wave_info, song_info)
spOpenFilePluginAuto_ = _spplugin_c.spOpenFilePluginAuto_

def spCloseFilePlugin(plugin):
    return _spplugin_c.spCloseFilePlugin(plugin)
spCloseFilePlugin = _spplugin_c.spCloseFilePlugin

def spSeekPlugin(plugin, pos):
    return _spplugin_c.spSeekPlugin(plugin, pos)
spSeekPlugin = _spplugin_c.spSeekPlugin

def spIsSongInfoNumberFieldKey_(key):
    return _spplugin_c.spIsSongInfoNumberFieldKey_(key)
spIsSongInfoNumberFieldKey_ = _spplugin_c.spIsSongInfoNumberFieldKey_

def spGetSongInfoNumberField_(song_info, key):
    return _spplugin_c.spGetSongInfoNumberField_(song_info, key)
spGetSongInfoNumberField_ = _spplugin_c.spGetSongInfoNumberField_

def spUpdateSongInfoNumberField_(song_info, key, value):
    return _spplugin_c.spUpdateSongInfoNumberField_(song_info, key, value)
spUpdateSongInfoNumberField_ = _spplugin_c.spUpdateSongInfoNumberField_

def spUpdateSongInfoStringField_(song_info, key, value):
    return _spplugin_c.spUpdateSongInfoStringField_(song_info, key, value)
spUpdateSongInfoStringField_ = _spplugin_c.spUpdateSongInfoStringField_

def spSetWaveInfoFileType_(wave_info, file_type):
    return _spplugin_c.spSetWaveInfoFileType_(wave_info, file_type)
spSetWaveInfoFileType_ = _spplugin_c.spSetWaveInfoFileType_

def spWritePluginInByte_(plugin, buffer, offset_byte, length_byte):
    return _spplugin_c.spWritePluginInByte_(plugin, buffer, offset_byte, length_byte)
spWritePluginInByte_ = _spplugin_c.spWritePluginInByte_

def spWritePluginDoubleWeighted_(plugin, buffer, weight, offset, length):
    return _spplugin_c.spWritePluginDoubleWeighted_(plugin, buffer, weight, offset, length)
spWritePluginDoubleWeighted_ = _spplugin_c.spWritePluginDoubleWeighted_

def spReadPluginInByte_(plugin, buffer, offset_byte, length_byte):
    return _spplugin_c.spReadPluginInByte_(plugin, buffer, offset_byte, length_byte)
spReadPluginInByte_ = _spplugin_c.spReadPluginInByte_

def spReadPluginDoubleWeighted_(plugin, buffer, weight, offset, length):
    return _spplugin_c.spReadPluginDoubleWeighted_(plugin, buffer, weight, offset, length)
spReadPluginDoubleWeighted_ = _spplugin_c.spReadPluginDoubleWeighted_

def spCopyBuffer_(dest_buffer, dest_samp_byte, dest_big_endian_or_signed8bit, src_buffer, src_samp_byte, src_big_endian_or_signed8bit, mult2432):
    return _spplugin_c.spCopyBuffer_(dest_buffer, dest_samp_byte, dest_big_endian_or_signed8bit, src_buffer, src_samp_byte, src_big_endian_or_signed8bit, mult2432)
spCopyBuffer_ = _spplugin_c.spCopyBuffer_


