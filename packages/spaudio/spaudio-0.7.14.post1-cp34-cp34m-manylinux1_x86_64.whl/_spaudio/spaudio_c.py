# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_spaudio_c')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_spaudio_c')
    _spaudio_c = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_spaudio_c', [dirname(__file__)])
        except ImportError:
            import _spaudio_c
            return _spaudio_c
        try:
            _mod = imp.load_module('_spaudio_c', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _spaudio_c = swig_import_helper()
    del swig_import_helper
else:
    import _spaudio_c
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def spGetNumAudioDriver():
    return _spaudio_c.spGetNumAudioDriver()
spGetNumAudioDriver = _spaudio_c.spGetNumAudioDriver

def xspGetAudioDriverName(index):
    return _spaudio_c.xspGetAudioDriverName(index)
xspGetAudioDriverName = _spaudio_c.xspGetAudioDriverName

def spGetNumAudioDriverDevice(driver_name):
    return _spaudio_c.spGetNumAudioDriverDevice(driver_name)
spGetNumAudioDriverDevice = _spaudio_c.spGetNumAudioDriverDevice

def xspGetAudioDriverDeviceName(driver_name, index):
    return _spaudio_c.xspGetAudioDriverDeviceName(driver_name, index)
xspGetAudioDriverDeviceName = _spaudio_c.xspGetAudioDriverDeviceName

def spInitAudioDriver(driver_name):
    return _spaudio_c.spInitAudioDriver(driver_name)
spInitAudioDriver = _spaudio_c.spInitAudioDriver

def _spFreeAudioDriver(audio):
    return _spaudio_c._spFreeAudioDriver(audio)
_spFreeAudioDriver = _spaudio_c._spFreeAudioDriver

def xspGetAudioDeviceName(audio, device_index):
    return _spaudio_c.xspGetAudioDeviceName(audio, device_index)
xspGetAudioDeviceName = _spaudio_c.xspGetAudioDeviceName

def spSelectAudioDevice(audio, device_index):
    return _spaudio_c.spSelectAudioDevice(audio, device_index)
spSelectAudioDevice = _spaudio_c.spSelectAudioDevice

def spSetAudioSampleRate(audio, samp_rate):
    return _spaudio_c.spSetAudioSampleRate(audio, samp_rate)
spSetAudioSampleRate = _spaudio_c.spSetAudioSampleRate

def spSetAudioChannel(audio, num_channel):
    return _spaudio_c.spSetAudioChannel(audio, num_channel)
spSetAudioChannel = _spaudio_c.spSetAudioChannel

def spSetAudioBufferSize(audio, buffer_size):
    return _spaudio_c.spSetAudioBufferSize(audio, buffer_size)
spSetAudioBufferSize = _spaudio_c.spSetAudioBufferSize

def spSetAudioNumBuffer(audio, num_buffer):
    return _spaudio_c.spSetAudioNumBuffer(audio, num_buffer)
spSetAudioNumBuffer = _spaudio_c.spSetAudioNumBuffer

def spSetAudioBlockingMode(audio, block_mode):
    return _spaudio_c.spSetAudioBlockingMode(audio, block_mode)
spSetAudioBlockingMode = _spaudio_c.spSetAudioBlockingMode

def spSetAudioSampleBit(audio, samp_bit):
    return _spaudio_c.spSetAudioSampleBit(audio, samp_bit)
spSetAudioSampleBit = _spaudio_c.spSetAudioSampleBit

def spGetNumAudioDevice(audio):
    return _spaudio_c.spGetNumAudioDevice(audio)
spGetNumAudioDevice = _spaudio_c.spGetNumAudioDevice

def spGetAudioSampleRate(audio):
    return _spaudio_c.spGetAudioSampleRate(audio)
spGetAudioSampleRate = _spaudio_c.spGetAudioSampleRate

def spGetAudioChannel(audio):
    return _spaudio_c.spGetAudioChannel(audio)
spGetAudioChannel = _spaudio_c.spGetAudioChannel

def spGetAudioBufferSize(audio):
    return _spaudio_c.spGetAudioBufferSize(audio)
spGetAudioBufferSize = _spaudio_c.spGetAudioBufferSize

def spGetAudioNumBuffer(audio):
    return _spaudio_c.spGetAudioNumBuffer(audio)
spGetAudioNumBuffer = _spaudio_c.spGetAudioNumBuffer

def spGetAudioBlockingMode(audio):
    return _spaudio_c.spGetAudioBlockingMode(audio)
spGetAudioBlockingMode = _spaudio_c.spGetAudioBlockingMode

def spGetAudioSampleBit(audio):
    return _spaudio_c.spGetAudioSampleBit(audio)
spGetAudioSampleBit = _spaudio_c.spGetAudioSampleBit

def spGetAudioSpecifiedSampleBit(audio):
    return _spaudio_c.spGetAudioSpecifiedSampleBit(audio)
spGetAudioSpecifiedSampleBit = _spaudio_c.spGetAudioSpecifiedSampleBit

def spGetAudioOutputPosition(audio, OUTPUT):
    return _spaudio_c.spGetAudioOutputPosition(audio, OUTPUT)
spGetAudioOutputPosition = _spaudio_c.spGetAudioOutputPosition

def spOpenAudioDevice(audio, mode):
    return _spaudio_c.spOpenAudioDevice(audio, mode)
spOpenAudioDevice = _spaudio_c.spOpenAudioDevice

def spCloseAudioDevice(audio):
    return _spaudio_c.spCloseAudioDevice(audio)
spCloseAudioDevice = _spaudio_c.spCloseAudioDevice

def spStopAudio(audio):
    return _spaudio_c.spStopAudio(audio)
spStopAudio = _spaudio_c.spStopAudio

def spSyncAudio(audio):
    return _spaudio_c.spSyncAudio(audio)
spSyncAudio = _spaudio_c.spSyncAudio

def spWriteAudioBuffer(audio, buffer):
    return _spaudio_c.spWriteAudioBuffer(audio, buffer)
spWriteAudioBuffer = _spaudio_c.spWriteAudioBuffer

def spWriteAudioDoubleBufferWeighted_(audio, buffer, weight):
    return _spaudio_c.spWriteAudioDoubleBufferWeighted_(audio, buffer, weight)
spWriteAudioDoubleBufferWeighted_ = _spaudio_c.spWriteAudioDoubleBufferWeighted_

def spReadAudioBuffer(audio, buffer):
    return _spaudio_c.spReadAudioBuffer(audio, buffer)
spReadAudioBuffer = _spaudio_c.spReadAudioBuffer

def spReadAudioDoubleBufferWeighted_(audio, buffer, weight):
    return _spaudio_c.spReadAudioDoubleBufferWeighted_(audio, buffer, weight)
spReadAudioDoubleBufferWeighted_ = _spaudio_c.spReadAudioDoubleBufferWeighted_

def spSetAudioCallbackFunc_(audio, call_type, obj):
    return _spaudio_c.spSetAudioCallbackFunc_(audio, call_type, obj)
spSetAudioCallbackFunc_ = _spaudio_c.spSetAudioCallbackFunc_


