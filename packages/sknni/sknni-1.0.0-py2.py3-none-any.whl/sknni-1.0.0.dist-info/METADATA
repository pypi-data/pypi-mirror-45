Metadata-Version: 2.1
Name: sknni
Version: 1.0.0
Summary: Spherical k-nearest neighbors interpolation
Home-page: https://github.com/PhTrempe/sknni
Author: Philippe Trempe
Author-email: pht@ieee.org
License: MIT
Project-URL: Source, https://github.com/PhTrempe/sknni
Project-URL: Issues, https://github.com/PhTrempe/sknni/issues
Keywords: spherical k-nearest-neighbors interpolation geospatial interpolator knn sphere algorithm
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: GIS
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.4
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Requires-Python: >=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*
Description-Content-Type: text/markdown
Requires-Dist: numpy (>=1.16.1)
Requires-Dist: scipy (>=1.2.1)
Provides-Extra: dist
Requires-Dist: twine ; extra == 'dist'
Requires-Dist: wheel ; extra == 'dist'

# SkNNI
SkNNI (pronounced "skinny") stands for spherical k-nearest neighbors 
interpolation and is a geospatial interpolator.

## Setup
SkNNI may simply be installed from PyPI using `pip`.
```
pip install sknni
```

## Example
Here's a short usage example.
```python
import numpy as np

from sknni import SkNNI

if __name__ == '__main__':
    observations = np.array([[30, 120, 20],
                             [30, -120, 10],
                             [-30, -120, 20],
                             [-30, 120, 0]])
    interpolator = SkNNI(observations)
    interp_coords = np.array([[30, 0],
                              [0, -120],
                              [0, 0],
                              [0, 120],
                              [-30, 0]])
    interpolation = interpolator(interp_coords)
    print(interpolation)
    # Output:
    # [[  30.          0.          9.312546]
    #  [   0.       -120.         14.684806]
    #  [   0.          0.         12.5     ]
    #  [   0.        120.         10.315192]
    #  [ -30.          0.         16.464548]]
```


