# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Feedforward Closedloop Learning"""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_feedforward_closedloop_learning')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_feedforward_closedloop_learning')
    _feedforward_closedloop_learning = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_feedforward_closedloop_learning', [dirname(__file__)])
        except ImportError:
            import _feedforward_closedloop_learning
            return _feedforward_closedloop_learning
        try:
            _mod = imp.load_module('_feedforward_closedloop_learning', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _feedforward_closedloop_learning = swig_import_helper()
    del swig_import_helper
else:
    import _feedforward_closedloop_learning
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class FeedforwardClosedloopLearning(_object):
    """Proxy of C++ FeedforwardClosedloopLearning class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeedforwardClosedloopLearning, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeedforwardClosedloopLearning, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(FeedforwardClosedloopLearning self, int num_of_inputs, int * num_of_hidden_neurons_per_layer_array, int num_outputs) -> FeedforwardClosedloopLearning

        Parameters
        ----------
        num_of_inputs: int
        num_of_hidden_neurons_per_layer_array: int *
        num_outputs: int

        __init__(FeedforwardClosedloopLearning self, int num_of_inputs, int * num_of_hidden_neurons_per_layer_array, int num_outputs, int num_filtersInput, int num_filtersHidden, double _minT, double _maxT) -> FeedforwardClosedloopLearning

        Parameters
        ----------
        num_of_inputs: int
        num_of_hidden_neurons_per_layer_array: int *
        num_outputs: int
        num_filtersInput: int
        num_filtersHidden: int
        _minT: double
        _maxT: double

        """
        this = _feedforward_closedloop_learning.new_FeedforwardClosedloopLearning(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _feedforward_closedloop_learning.delete_FeedforwardClosedloopLearning
    __del__ = lambda self: None

    def doStep(self, *args) -> "void":
        """
        doStep(FeedforwardClosedloopLearning self, double * input, double * error)

        Parameters
        ----------
        input: double *
        error: double *

        doStep(FeedforwardClosedloopLearning self, double * input, double * error)

        Parameters
        ----------
        input: double *
        error: double *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_doStep(self, *args)


    def getOutput(self, index: 'int') -> "double":
        """
        getOutput(FeedforwardClosedloopLearning self, int index) -> double

        Parameters
        ----------
        index: int

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_getOutput(self, index)


    def setLearningRate(self, learningRate: 'double') -> "void":
        """
        setLearningRate(FeedforwardClosedloopLearning self, double learningRate)

        Parameters
        ----------
        learningRate: double

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_setLearningRate(self, learningRate)


    def setLearningRateDiscountFactor(self, _learningRateDiscountFactor: 'double') -> "void":
        """
        setLearningRateDiscountFactor(FeedforwardClosedloopLearning self, double _learningRateDiscountFactor)

        Parameters
        ----------
        _learningRateDiscountFactor: double

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_setLearningRateDiscountFactor(self, _learningRateDiscountFactor)


    def setDecay(self, decay: 'double') -> "void":
        """
        setDecay(FeedforwardClosedloopLearning self, double decay)

        Parameters
        ----------
        decay: double

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_setDecay(self, decay)


    def setMomentum(self, momentum: 'double') -> "void":
        """
        setMomentum(FeedforwardClosedloopLearning self, double momentum)

        Parameters
        ----------
        momentum: double

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_setMomentum(self, momentum)


    def setActivationFunction(self, _activationFunction: 'Neuron::ActivationFunction') -> "void":
        """
        setActivationFunction(FeedforwardClosedloopLearning self, Neuron::ActivationFunction _activationFunction)

        Parameters
        ----------
        _activationFunction: enum Neuron::ActivationFunction

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_setActivationFunction(self, _activationFunction)


    def initWeights(self, *args) -> "void":
        """
        initWeights(FeedforwardClosedloopLearning self, double max=0.001, int initBias=1, Neuron::WeightInitMethod weightInitMethod)

        Parameters
        ----------
        max: double
        initBias: int
        weightInitMethod: enum Neuron::WeightInitMethod

        initWeights(FeedforwardClosedloopLearning self, double max=0.001, int initBias=1)

        Parameters
        ----------
        max: double
        initBias: int

        initWeights(FeedforwardClosedloopLearning self, double max=0.001)

        Parameters
        ----------
        max: double

        initWeights(FeedforwardClosedloopLearning self)

        Parameters
        ----------
        self: FeedforwardClosedloopLearning *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_initWeights(self, *args)


    def seedRandom(self, s: 'int') -> "void":
        """
        seedRandom(FeedforwardClosedloopLearning self, int s)

        Parameters
        ----------
        s: int

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_seedRandom(self, s)


    def setBias(self, _bias: 'double') -> "void":
        """
        setBias(FeedforwardClosedloopLearning self, double _bias)

        Parameters
        ----------
        _bias: double

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_setBias(self, _bias)


    def getNumHidLayers(self) -> "int":
        """
        getNumHidLayers(FeedforwardClosedloopLearning self) -> int

        Parameters
        ----------
        self: FeedforwardClosedloopLearning *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_getNumHidLayers(self)


    def getNumLayers(self) -> "int":
        """
        getNumLayers(FeedforwardClosedloopLearning self) -> int

        Parameters
        ----------
        self: FeedforwardClosedloopLearning *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_getNumLayers(self)


    def getLayer(self, i: 'int') -> "Layer *":
        """
        getLayer(FeedforwardClosedloopLearning self, int i) -> Layer

        Parameters
        ----------
        i: int

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_getLayer(self, i)


    def getOutputLayer(self) -> "Layer *":
        """
        getOutputLayer(FeedforwardClosedloopLearning self) -> Layer

        Parameters
        ----------
        self: FeedforwardClosedloopLearning *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_getOutputLayer(self)


    def getLayers(self) -> "Layer **":
        """
        getLayers(FeedforwardClosedloopLearning self) -> Layer **

        Parameters
        ----------
        self: FeedforwardClosedloopLearning *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_getLayers(self)


    def setUseDerivative(self, useIt: 'int'=1) -> "void":
        """
        setUseDerivative(FeedforwardClosedloopLearning self, int useIt=1)

        Parameters
        ----------
        useIt: int

        setUseDerivative(FeedforwardClosedloopLearning self)

        Parameters
        ----------
        self: FeedforwardClosedloopLearning *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_setUseDerivative(self, useIt)


    def setNoAutocorrelation(self, doOnlyCrosscorrelation: 'int'=1) -> "void":
        """
        setNoAutocorrelation(FeedforwardClosedloopLearning self, int doOnlyCrosscorrelation=1)

        Parameters
        ----------
        doOnlyCrosscorrelation: int

        setNoAutocorrelation(FeedforwardClosedloopLearning self)

        Parameters
        ----------
        self: FeedforwardClosedloopLearning *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_setNoAutocorrelation(self, doOnlyCrosscorrelation)


    def saveModel(self, name: 'char const *') -> "bool":
        """
        saveModel(FeedforwardClosedloopLearning self, char const * name) -> bool

        Parameters
        ----------
        name: char const *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_saveModel(self, name)


    def loadModel(self, name: 'char const *') -> "bool":
        """
        loadModel(FeedforwardClosedloopLearning self, char const * name) -> bool

        Parameters
        ----------
        name: char const *

        """
        return _feedforward_closedloop_learning.FeedforwardClosedloopLearning_loadModel(self, name)

FeedforwardClosedloopLearning_swigregister = _feedforward_closedloop_learning.FeedforwardClosedloopLearning_swigregister
FeedforwardClosedloopLearning_swigregister(FeedforwardClosedloopLearning)

NUM_THREADS = _feedforward_closedloop_learning.NUM_THREADS
class LayerThread(_object):
    """Proxy of C++ LayerThread class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LayerThread, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LayerThread, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _feedforward_closedloop_learning.delete_LayerThread
    __del__ = lambda self: None

    def addNeuron(self, neuron: 'Neuron') -> "void":
        """
        addNeuron(LayerThread self, Neuron neuron)

        Parameters
        ----------
        neuron: Neuron *

        """
        return _feedforward_closedloop_learning.LayerThread_addNeuron(self, neuron)


    def start(self) -> "void":
        """
        start(LayerThread self)

        Parameters
        ----------
        self: LayerThread *

        """
        return _feedforward_closedloop_learning.LayerThread_start(self)


    def join(self) -> "void":
        """
        join(LayerThread self)

        Parameters
        ----------
        self: LayerThread *

        """
        return _feedforward_closedloop_learning.LayerThread_join(self)


    def run(self) -> "void":
        """
        run(LayerThread self)

        Parameters
        ----------
        self: LayerThread *

        """
        return _feedforward_closedloop_learning.LayerThread_run(self)

LayerThread_swigregister = _feedforward_closedloop_learning.LayerThread_swigregister
LayerThread_swigregister(LayerThread)

class CalcOutputThread(LayerThread):
    """Proxy of C++ CalcOutputThread class."""

    __swig_setmethods__ = {}
    for _s in [LayerThread]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CalcOutputThread, name, value)
    __swig_getmethods__ = {}
    for _s in [LayerThread]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, CalcOutputThread, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _feedforward_closedloop_learning.delete_CalcOutputThread
    __del__ = lambda self: None
CalcOutputThread_swigregister = _feedforward_closedloop_learning.CalcOutputThread_swigregister
CalcOutputThread_swigregister(CalcOutputThread)

class LearningThread(LayerThread):
    """Proxy of C++ LearningThread class."""

    __swig_setmethods__ = {}
    for _s in [LayerThread]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LearningThread, name, value)
    __swig_getmethods__ = {}
    for _s in [LayerThread]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, LearningThread, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _feedforward_closedloop_learning.delete_LearningThread
    __del__ = lambda self: None
LearningThread_swigregister = _feedforward_closedloop_learning.LearningThread_swigregister
LearningThread_swigregister(LearningThread)

class MaxDetThread(LayerThread):
    """Proxy of C++ MaxDetThread class."""

    __swig_setmethods__ = {}
    for _s in [LayerThread]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxDetThread, name, value)
    __swig_getmethods__ = {}
    for _s in [LayerThread]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaxDetThread, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _feedforward_closedloop_learning.delete_MaxDetThread
    __del__ = lambda self: None
MaxDetThread_swigregister = _feedforward_closedloop_learning.MaxDetThread_swigregister
MaxDetThread_swigregister(MaxDetThread)

class Layer(_object):
    """Proxy of C++ Layer class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Layer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Layer, name)
    __repr__ = _swig_repr

    def __init__(self, _nNeurons: 'int', _nInputs: 'int', _nFilters: 'int'=0, _minT: 'double'=0, _maxT: 'double'=0):
        """
        __init__(Layer self, int _nNeurons, int _nInputs, int _nFilters=0, double _minT=0, double _maxT=0) -> Layer

        Parameters
        ----------
        _nNeurons: int
        _nInputs: int
        _nFilters: int
        _minT: double
        _maxT: double

        __init__(Layer self, int _nNeurons, int _nInputs, int _nFilters=0, double _minT=0) -> Layer

        Parameters
        ----------
        _nNeurons: int
        _nInputs: int
        _nFilters: int
        _minT: double

        __init__(Layer self, int _nNeurons, int _nInputs, int _nFilters=0) -> Layer

        Parameters
        ----------
        _nNeurons: int
        _nInputs: int
        _nFilters: int

        __init__(Layer self, int _nNeurons, int _nInputs) -> Layer

        Parameters
        ----------
        _nNeurons: int
        _nInputs: int

        """
        this = _feedforward_closedloop_learning.new_Layer(_nNeurons, _nInputs, _nFilters, _minT, _maxT)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _feedforward_closedloop_learning.delete_Layer
    __del__ = lambda self: None
    WEIGHT_NORM_NONE = _feedforward_closedloop_learning.Layer_WEIGHT_NORM_NONE
    WEIGHT_NORM_LAYER_EUCLEDIAN = _feedforward_closedloop_learning.Layer_WEIGHT_NORM_LAYER_EUCLEDIAN
    WEIGHT_NORM_NEURON_EUCLEDIAN = _feedforward_closedloop_learning.Layer_WEIGHT_NORM_NEURON_EUCLEDIAN
    WEIGHT_NORM_LAYER_MANHATTAN = _feedforward_closedloop_learning.Layer_WEIGHT_NORM_LAYER_MANHATTAN
    WEIGHT_NORM_NEURON_MANHATTAN = _feedforward_closedloop_learning.Layer_WEIGHT_NORM_NEURON_MANHATTAN
    WEIGHT_NORM_LAYER_INFINITY = _feedforward_closedloop_learning.Layer_WEIGHT_NORM_LAYER_INFINITY
    WEIGHT_NORM_NEURON_INFINITY = _feedforward_closedloop_learning.Layer_WEIGHT_NORM_NEURON_INFINITY

    def calcOutputs(self) -> "void":
        """
        calcOutputs(Layer self)

        Parameters
        ----------
        self: Layer *

        """
        return _feedforward_closedloop_learning.Layer_calcOutputs(self)


    def doLearning(self) -> "void":
        """
        doLearning(Layer self)

        Parameters
        ----------
        self: Layer *

        """
        return _feedforward_closedloop_learning.Layer_doLearning(self)


    def setError(self, *args) -> "void":
        """
        setError(Layer self, double _error)

        Parameters
        ----------
        _error: double

        setError(Layer self, int i, double _error)

        Parameters
        ----------
        i: int
        _error: double

        """
        return _feedforward_closedloop_learning.Layer_setError(self, *args)


    def setErrors(self, _errors: 'double *') -> "void":
        """
        setErrors(Layer self, double * _errors)

        Parameters
        ----------
        _errors: double *

        """
        return _feedforward_closedloop_learning.Layer_setErrors(self, _errors)


    def getError(self, i: 'int') -> "double":
        """
        getError(Layer self, int i) -> double

        Parameters
        ----------
        i: int

        """
        return _feedforward_closedloop_learning.Layer_getError(self, i)


    def setBias(self, _bias: 'double') -> "void":
        """
        setBias(Layer self, double _bias)

        Parameters
        ----------
        _bias: double

        """
        return _feedforward_closedloop_learning.Layer_setBias(self, _bias)


    def setUseDerivative(self, useIt: 'int') -> "void":
        """
        setUseDerivative(Layer self, int useIt)

        Parameters
        ----------
        useIt: int

        """
        return _feedforward_closedloop_learning.Layer_setUseDerivative(self, useIt)


    def setInput(self, inputIndex: 'int', input: 'double') -> "void":
        """
        setInput(Layer self, int inputIndex, double input)

        Parameters
        ----------
        inputIndex: int
        input: double

        """
        return _feedforward_closedloop_learning.Layer_setInput(self, inputIndex, input)


    def setInputs(self, _inputs: 'double *') -> "void":
        """
        setInputs(Layer self, double * _inputs)

        Parameters
        ----------
        _inputs: double *

        """
        return _feedforward_closedloop_learning.Layer_setInputs(self, _inputs)


    def setLearningRate(self, _learningRate: 'double') -> "void":
        """
        setLearningRate(Layer self, double _learningRate)

        Parameters
        ----------
        _learningRate: double

        """
        return _feedforward_closedloop_learning.Layer_setLearningRate(self, _learningRate)


    def setActivationFunction(self, _activationFunction: 'Neuron::ActivationFunction') -> "void":
        """
        setActivationFunction(Layer self, Neuron::ActivationFunction _activationFunction)

        Parameters
        ----------
        _activationFunction: enum Neuron::ActivationFunction

        """
        return _feedforward_closedloop_learning.Layer_setActivationFunction(self, _activationFunction)


    def setMomentum(self, _momentum: 'double') -> "void":
        """
        setMomentum(Layer self, double _momentum)

        Parameters
        ----------
        _momentum: double

        """
        return _feedforward_closedloop_learning.Layer_setMomentum(self, _momentum)


    def setDecay(self, _decay: 'double') -> "void":
        """
        setDecay(Layer self, double _decay)

        Parameters
        ----------
        _decay: double

        """
        return _feedforward_closedloop_learning.Layer_setDecay(self, _decay)


    def initWeights(self, *args) -> "void":
        """
        initWeights(Layer self, double _max=1, int initBiasWeight=1, Neuron::WeightInitMethod weightInitMethod)

        Parameters
        ----------
        _max: double
        initBiasWeight: int
        weightInitMethod: enum Neuron::WeightInitMethod

        initWeights(Layer self, double _max=1, int initBiasWeight=1)

        Parameters
        ----------
        _max: double
        initBiasWeight: int

        initWeights(Layer self, double _max=1)

        Parameters
        ----------
        _max: double

        initWeights(Layer self)

        Parameters
        ----------
        self: Layer *

        """
        return _feedforward_closedloop_learning.Layer_initWeights(self, *args)


    def getOutput(self, index: 'int') -> "double":
        """
        getOutput(Layer self, int index) -> double

        Parameters
        ----------
        index: int

        """
        return _feedforward_closedloop_learning.Layer_getOutput(self, index)


    def getNeuron(self, index: 'int') -> "Neuron *":
        """
        getNeuron(Layer self, int index) -> Neuron

        Parameters
        ----------
        index: int

        """
        return _feedforward_closedloop_learning.Layer_getNeuron(self, index)


    def getNneurons(self) -> "int":
        """
        getNneurons(Layer self) -> int

        Parameters
        ----------
        self: Layer *

        """
        return _feedforward_closedloop_learning.Layer_getNneurons(self)


    def getNinputs(self) -> "int":
        """
        getNinputs(Layer self) -> int

        Parameters
        ----------
        self: Layer *

        """
        return _feedforward_closedloop_learning.Layer_getNinputs(self)


    def setConvolution(self, width: 'int', height: 'int') -> "void":
        """
        setConvolution(Layer self, int width, int height)

        Parameters
        ----------
        width: int
        height: int

        """
        return _feedforward_closedloop_learning.Layer_setConvolution(self, width, height)


    def setMaxDetLayer(self, _m: 'int') -> "void":
        """
        setMaxDetLayer(Layer self, int _m)

        Parameters
        ----------
        _m: int

        """
        return _feedforward_closedloop_learning.Layer_setMaxDetLayer(self, _m)


    def setNormaliseWeights(self, _normaliseWeights: 'Layer::WeightNormalisation') -> "void":
        """
        setNormaliseWeights(Layer self, Layer::WeightNormalisation _normaliseWeights)

        Parameters
        ----------
        _normaliseWeights: enum Layer::WeightNormalisation

        """
        return _feedforward_closedloop_learning.Layer_setNormaliseWeights(self, _normaliseWeights)


    def setDebugInfo(self, layerIndex: 'int') -> "void":
        """
        setDebugInfo(Layer self, int layerIndex)

        Parameters
        ----------
        layerIndex: int

        """
        return _feedforward_closedloop_learning.Layer_setDebugInfo(self, layerIndex)


    def setStep(self, step: 'long') -> "void":
        """
        setStep(Layer self, long step)

        Parameters
        ----------
        step: long

        """
        return _feedforward_closedloop_learning.Layer_setStep(self, step)


    def getWeightDistanceFromInitialWeights(self) -> "double":
        """
        getWeightDistanceFromInitialWeights(Layer self) -> double

        Parameters
        ----------
        self: Layer *

        """
        return _feedforward_closedloop_learning.Layer_getWeightDistanceFromInitialWeights(self)


    def doNormaliseWeights(self) -> "void":
        """
        doNormaliseWeights(Layer self)

        Parameters
        ----------
        self: Layer *

        """
        return _feedforward_closedloop_learning.Layer_doNormaliseWeights(self)


    def setUseThreads(self, _useThreads: 'int') -> "void":
        """
        setUseThreads(Layer self, int _useThreads)

        Parameters
        ----------
        _useThreads: int

        """
        return _feedforward_closedloop_learning.Layer_setUseThreads(self, _useThreads)


    def saveWeightMatrix(self, filename: 'char *') -> "int":
        """
        saveWeightMatrix(Layer self, char * filename) -> int

        Parameters
        ----------
        filename: char *

        """
        return _feedforward_closedloop_learning.Layer_saveWeightMatrix(self, filename)

Layer_swigregister = _feedforward_closedloop_learning.Layer_swigregister
Layer_swigregister(Layer)

class Neuron(_object):
    """Proxy of C++ Neuron class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Neuron, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Neuron, name)
    __repr__ = _swig_repr

    def __init__(self, _nInputs: 'int', _nFilters: 'int'=0, _minT: 'double'=0, _maxT: 'double'=0):
        """
        __init__(Neuron self, int _nInputs, int _nFilters=0, double _minT=0, double _maxT=0) -> Neuron

        Parameters
        ----------
        _nInputs: int
        _nFilters: int
        _minT: double
        _maxT: double

        __init__(Neuron self, int _nInputs, int _nFilters=0, double _minT=0) -> Neuron

        Parameters
        ----------
        _nInputs: int
        _nFilters: int
        _minT: double

        __init__(Neuron self, int _nInputs, int _nFilters=0) -> Neuron

        Parameters
        ----------
        _nInputs: int
        _nFilters: int

        __init__(Neuron self, int _nInputs) -> Neuron

        Parameters
        ----------
        _nInputs: int

        """
        this = _feedforward_closedloop_learning.new_Neuron(_nInputs, _nFilters, _minT, _maxT)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _feedforward_closedloop_learning.delete_Neuron
    __del__ = lambda self: None

    def calcOutput(self) -> "void":
        """
        calcOutput(Neuron self)

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_calcOutput(self)


    def calcOutputThread(object: 'void *') -> "void *":
        """
        calcOutputThread(void * object) -> void *

        Parameters
        ----------
        object: void *

        """
        return _feedforward_closedloop_learning.Neuron_calcOutputThread(object)

    calcOutputThread = staticmethod(calcOutputThread)

    def doLearning(self) -> "void":
        """
        doLearning(Neuron self)

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_doLearning(self)


    def doLearningThread(object: 'void *') -> "void *":
        """
        doLearningThread(void * object) -> void *

        Parameters
        ----------
        object: void *

        """
        return _feedforward_closedloop_learning.Neuron_doLearningThread(object)

    doLearningThread = staticmethod(doLearningThread)

    def doMaxDet(self) -> "void":
        """
        doMaxDet(Neuron self)

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_doMaxDet(self)


    def doMaxDetThread(object: 'void *') -> "void *":
        """
        doMaxDetThread(void * object) -> void *

        Parameters
        ----------
        object: void *

        """
        return _feedforward_closedloop_learning.Neuron_doMaxDetThread(object)

    doMaxDetThread = staticmethod(doMaxDetThread)
    MAX_OUTPUT_RANDOM = _feedforward_closedloop_learning.Neuron_MAX_OUTPUT_RANDOM
    MAX_WEIGHT_RANDOM = _feedforward_closedloop_learning.Neuron_MAX_WEIGHT_RANDOM
    MAX_OUTPUT_CONST = _feedforward_closedloop_learning.Neuron_MAX_OUTPUT_CONST
    CONST_WEIGHTS = _feedforward_closedloop_learning.Neuron_CONST_WEIGHTS

    def initWeights(self, *args) -> "void":
        """
        initWeights(Neuron self, double _max=1, int initBias=1, Neuron::WeightInitMethod _wm)

        Parameters
        ----------
        _max: double
        initBias: int
        _wm: enum Neuron::WeightInitMethod

        initWeights(Neuron self, double _max=1, int initBias=1)

        Parameters
        ----------
        _max: double
        initBias: int

        initWeights(Neuron self, double _max=1)

        Parameters
        ----------
        _max: double

        initWeights(Neuron self)

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_initWeights(self, *args)

    LINEAR = _feedforward_closedloop_learning.Neuron_LINEAR
    TANH = _feedforward_closedloop_learning.Neuron_TANH
    RELU = _feedforward_closedloop_learning.Neuron_RELU
    REMAXLU = _feedforward_closedloop_learning.Neuron_REMAXLU
    TANHLIMIT = _feedforward_closedloop_learning.Neuron_TANHLIMIT

    def setActivationFunction(self, _activationFunction: 'Neuron::ActivationFunction') -> "void":
        """
        setActivationFunction(Neuron self, Neuron::ActivationFunction _activationFunction)

        Parameters
        ----------
        _activationFunction: enum Neuron::ActivationFunction

        """
        return _feedforward_closedloop_learning.Neuron_setActivationFunction(self, _activationFunction)


    def dActivation(self) -> "double":
        """
        dActivation(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_dActivation(self)


    def getMinWeightValue(self) -> "double":
        """
        getMinWeightValue(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getMinWeightValue(self)


    def getMaxWeightValue(self) -> "double":
        """
        getMaxWeightValue(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getMaxWeightValue(self)


    def getWeightDistanceFromInitialWeights(self) -> "double":
        """
        getWeightDistanceFromInitialWeights(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getWeightDistanceFromInitialWeights(self)


    def getOutput(self) -> "double":
        """
        getOutput(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getOutput(self)


    def getSum(self) -> "double":
        """
        getSum(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getSum(self)


    def getFilterOutput(self, _index: 'int', _filter: 'int'=0) -> "double":
        """
        getFilterOutput(Neuron self, int _index, int _filter=0) -> double

        Parameters
        ----------
        _index: int
        _filter: int

        getFilterOutput(Neuron self, int _index) -> double

        Parameters
        ----------
        _index: int

        """
        return _feedforward_closedloop_learning.Neuron_getFilterOutput(self, _index, _filter)


    def getWeight(self, _index: 'int', _filter: 'int'=0) -> "double":
        """
        getWeight(Neuron self, int _index, int _filter=0) -> double

        Parameters
        ----------
        _index: int
        _filter: int

        getWeight(Neuron self, int _index) -> double

        Parameters
        ----------
        _index: int

        """
        return _feedforward_closedloop_learning.Neuron_getWeight(self, _index, _filter)


    def setWeight(self, _index: 'int', _weight: 'double', _filter: 'int'=0) -> "void":
        """
        setWeight(Neuron self, int _index, double _weight, int _filter=0)

        Parameters
        ----------
        _index: int
        _weight: double
        _filter: int

        setWeight(Neuron self, int _index, double _weight)

        Parameters
        ----------
        _index: int
        _weight: double

        """
        return _feedforward_closedloop_learning.Neuron_setWeight(self, _index, _weight, _filter)


    def setError(self, _error: 'double') -> "void":
        """
        setError(Neuron self, double _error)

        Parameters
        ----------
        _error: double

        """
        return _feedforward_closedloop_learning.Neuron_setError(self, _error)


    def getError(self) -> "double":
        """
        getError(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getError(self)


    def setInput(self, _index: 'int', _value: 'double') -> "void":
        """
        setInput(Neuron self, int _index, double _value)

        Parameters
        ----------
        _index: int
        _value: double

        """
        return _feedforward_closedloop_learning.Neuron_setInput(self, _index, _value)


    def getInput(self, _index: 'int') -> "double":
        """
        getInput(Neuron self, int _index) -> double

        Parameters
        ----------
        _index: int

        """
        return _feedforward_closedloop_learning.Neuron_getInput(self, _index)


    def getBiasWeight(self) -> "double":
        """
        getBiasWeight(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getBiasWeight(self)


    def setBiasWeight(self, _biasweight: 'double') -> "void":
        """
        setBiasWeight(Neuron self, double _biasweight)

        Parameters
        ----------
        _biasweight: double

        """
        return _feedforward_closedloop_learning.Neuron_setBiasWeight(self, _biasweight)


    def setBias(self, _bias: 'double') -> "void":
        """
        setBias(Neuron self, double _bias)

        Parameters
        ----------
        _bias: double

        """
        return _feedforward_closedloop_learning.Neuron_setBias(self, _bias)


    def setLearningRate(self, _learningrate: 'double') -> "void":
        """
        setLearningRate(Neuron self, double _learningrate)

        Parameters
        ----------
        _learningrate: double

        """
        return _feedforward_closedloop_learning.Neuron_setLearningRate(self, _learningrate)


    def setMomentum(self, _momentum: 'double') -> "void":
        """
        setMomentum(Neuron self, double _momentum)

        Parameters
        ----------
        _momentum: double

        """
        return _feedforward_closedloop_learning.Neuron_setMomentum(self, _momentum)


    def setDecay(self, _decay: 'double') -> "void":
        """
        setDecay(Neuron self, double _decay)

        Parameters
        ----------
        _decay: double

        """
        return _feedforward_closedloop_learning.Neuron_setDecay(self, _decay)


    def getDecay(self) -> "double":
        """
        getDecay(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getDecay(self)


    def setUseDerivative(self, _useDerivative: 'int') -> "void":
        """
        setUseDerivative(Neuron self, int _useDerivative)

        Parameters
        ----------
        _useDerivative: int

        """
        return _feedforward_closedloop_learning.Neuron_setUseDerivative(self, _useDerivative)


    def getNinputs(self) -> "int":
        """
        getNinputs(Neuron self) -> int

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getNinputs(self)


    def getNfilters(self) -> "int":
        """
        getNfilters(Neuron self) -> int

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getNfilters(self)


    def getAvgWeight(self, _input: 'int') -> "double":
        """
        getAvgWeight(Neuron self, int _input) -> double

        Parameters
        ----------
        _input: int

        """
        return _feedforward_closedloop_learning.Neuron_getAvgWeight(self, _input)


    def getAvgWeightChange(self, *args) -> "double":
        """
        getAvgWeightChange(Neuron self, int _input) -> double

        Parameters
        ----------
        _input: int

        getAvgWeightChange(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getAvgWeightChange(self, *args)


    def setGeometry(self, _width: 'int', _height: 'int') -> "void":
        """
        setGeometry(Neuron self, int _width, int _height)

        Parameters
        ----------
        _width: int
        _height: int

        """
        return _feedforward_closedloop_learning.Neuron_setGeometry(self, _width, _height)


    def setMask(self, *args) -> "void":
        """
        setMask(Neuron self, int x, int y, unsigned char c)

        Parameters
        ----------
        x: int
        y: int
        c: unsigned char

        setMask(Neuron self, unsigned char c)

        Parameters
        ----------
        c: unsigned char

        """
        return _feedforward_closedloop_learning.Neuron_setMask(self, *args)


    def getMask(self, *args) -> "unsigned char":
        """
        getMask(Neuron self, int x, int y) -> unsigned char

        Parameters
        ----------
        x: int
        y: int

        getMask(Neuron self, int index) -> unsigned char

        Parameters
        ----------
        index: int

        """
        return _feedforward_closedloop_learning.Neuron_getMask(self, *args)


    def getSumOfSquaredWeightVector(self) -> "double":
        """
        getSumOfSquaredWeightVector(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getSumOfSquaredWeightVector(self)


    def getEuclideanNormOfWeightVector(self) -> "double":
        """
        getEuclideanNormOfWeightVector(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getEuclideanNormOfWeightVector(self)


    def getManhattanNormOfWeightVector(self) -> "double":
        """
        getManhattanNormOfWeightVector(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getManhattanNormOfWeightVector(self)


    def getInfinityNormOfWeightVector(self) -> "double":
        """
        getInfinityNormOfWeightVector(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getInfinityNormOfWeightVector(self)


    def getAverageOfWeightVector(self) -> "double":
        """
        getAverageOfWeightVector(Neuron self) -> double

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_getAverageOfWeightVector(self)


    def normaliseWeights(self, norm: 'double') -> "void":
        """
        normaliseWeights(Neuron self, double norm)

        Parameters
        ----------
        norm: double

        """
        return _feedforward_closedloop_learning.Neuron_normaliseWeights(self, norm)


    def saveInitialWeights(self) -> "void":
        """
        saveInitialWeights(Neuron self)

        Parameters
        ----------
        self: Neuron *

        """
        return _feedforward_closedloop_learning.Neuron_saveInitialWeights(self)


    def setDebugInfo(self, _layerIndex: 'int', _neuronIndex: 'int') -> "void":
        """
        setDebugInfo(Neuron self, int _layerIndex, int _neuronIndex)

        Parameters
        ----------
        _layerIndex: int
        _neuronIndex: int

        """
        return _feedforward_closedloop_learning.Neuron_setDebugInfo(self, _layerIndex, _neuronIndex)


    def setStep(self, _step: 'long') -> "void":
        """
        setStep(Neuron self, long _step)

        Parameters
        ----------
        _step: long

        """
        return _feedforward_closedloop_learning.Neuron_setStep(self, _step)

Neuron_swigregister = _feedforward_closedloop_learning.Neuron_swigregister
Neuron_swigregister(Neuron)

def Neuron_calcOutputThread(object: 'void *') -> "void *":
    """
    Neuron_calcOutputThread(void * object) -> void *

    Parameters
    ----------
    object: void *

    """
    return _feedforward_closedloop_learning.Neuron_calcOutputThread(object)

def Neuron_doLearningThread(object: 'void *') -> "void *":
    """
    Neuron_doLearningThread(void * object) -> void *

    Parameters
    ----------
    object: void *

    """
    return _feedforward_closedloop_learning.Neuron_doLearningThread(object)

def Neuron_doMaxDetThread(object: 'void *') -> "void *":
    """
    Neuron_doMaxDetThread(void * object) -> void *

    Parameters
    ----------
    object: void *

    """
    return _feedforward_closedloop_learning.Neuron_doMaxDetThread(object)

# This file is compatible with both classic and new-style classes.


