import yaml
import os
import re
import subprocess


def yaml_gfm_to_tex(input_filename, context, output_file):
    '''
    This function uses Pandoc to convert our Github flavored markdown into
    latex.  We then alter this latex and insert a title, headers, etc. based on
    the yaml front matter.  A lot of the code in this module is fragile because
    it depends on the precise formatting of the Latex document generated by
    Pandoc, but it should work well enough for now.
    '''
    with open(input_filename, 'r') as input_file:
        input_text = input_file.read()
    markdown, front_matter = _extract_yaml_front_matter(input_text)
    tex = _convert_with_pandoc(markdown)
    tex_lines = tex.split('\n')

    add_margins(tex_lines, front_matter, context)
    add_title_and_toc(tex_lines, front_matter, context)
    add_header_and_footer(tex_lines, front_matter, context)
    add_section_numbers(tex_lines, front_matter, context)
    convert_svgs_to_pdfs(tex_lines, front_matter, context)

    output_file.write('\n'.join(tex_lines))


def _extract_yaml_front_matter(raw_string):
    parts = raw_string.split('---\n')
    if len(parts) < 3:
        raise ValueError('Invalid YAML front matter')
    front_matter_string = parts[1]
    template_string = '---\n'.join(parts[2:])
    try:
        front_matter = yaml.load(front_matter_string)
    except yaml.YAMLError as e:
        raise ValueError('Invalid YAML front matter; improperly formatted YAML: {}'.format(e))
    return template_string, front_matter


def _convert_with_pandoc(markdown):
    p = subprocess.run(
        ['pandoc', '-f', 'gfm', '-t', 'latex', '--standalone',
            '-V', 'urlcolor=blue', '-V', 'linkcolor=black'],
        input=markdown,
        encoding='utf-8',
        stdout=subprocess.PIPE,
        universal_newlines=True
    )
    if p.returncode != 0:
        raise ValueError('Pandoc failed to convert markdown to latex')
    else:
        return p.stdout


def add_title_and_toc(tex_lines, front_matter, context):
    begin_document_index = tex_lines.index(r'\begin{document}')
    _insert_liness(tex_lines, begin_document_index + 1, [
        r'\maketitle',
        r'\thispagestyle{empty}',
        r'\tableofcontents',
        r'\pagebreak',
    ])
    _insert_liness(tex_lines, begin_document_index, [
        r'\title{' + front_matter['title'] + r' \\ ',
        r'\large ' + front_matter['id'] + ', Rev. ' + str(front_matter['revision']) + '}',
        r'\date{\today}',
        r'\author{' + front_matter['manufacturer_name'] + '}',
    ])


def add_header_and_footer(tex_lines, front_matter, context):
    begin_document_index = tex_lines.index(r'\begin{document}')
    _insert_liness(tex_lines, begin_document_index + 1, [
        r'\thispagestyle{empty}',
    ])
    _insert_liness(tex_lines, begin_document_index, [
        r'\usepackage{fancyhdr}',
        r'\usepackage{lastpage}',
        r'\pagestyle{fancy}',
        r'\lhead{' + front_matter['title'] + '}',
        r'\rhead{' + front_matter['id'] + ', Rev. ' + str(front_matter['revision']) + '}',
        r'\cfoot{Page \thepage\ of \pageref{LastPage}}',
    ])


def add_section_numbers(tex_lines, front_matter, context):
    counter_index = tex_lines.index(r'\setcounter{secnumdepth}{0}')
    del tex_lines[counter_index]


def add_margins(tex_lines, front_matter, context):
    document_class_index = tex_lines.index(r'\documentclass[]{article}')
    tex_lines.insert(document_class_index + 1, r'\usepackage[margin=1.25in]{geometry}')


def _insert_liness(existing, index, new_lines):
    for line in reversed(new_lines):
        existing.insert(index, line)


def convert_svgs_to_pdfs(tex_lines, front_matter, context):
    svg_pattern = re.compile(r'^\\includegraphics{\.\./(?P<svg_path>.*\.svg)}$')
    for index, line in enumerate(tex_lines):
        match = svg_pattern.search(line)
        if match:
            svg_path = match.group('svg_path')
            svg_directory, svg_filename = os.path.split(svg_path)
            filename, _ = os.path.splitext(svg_filename)
            pdf_directory = os.path.join(os.path.join('./tmp/', svg_directory))
            pdf_path = os.path.join(pdf_directory, filename + '.pdf')
            os.makedirs(pdf_directory, exist_ok=True)
            svg_to_pdf(svg_path, pdf_path)
            tex_lines[index] = r'\includegraphics[width=0.95\textwidth]{' + pdf_path + '}'


def svg_to_pdf(svg_filename, pdf_filename):
    from svglib.svglib import svg2rlg
    from reportlab.graphics import renderPDF
    drawing = svg2rlg(svg_filename)
    renderPDF.drawToFile(drawing, pdf_filename)
