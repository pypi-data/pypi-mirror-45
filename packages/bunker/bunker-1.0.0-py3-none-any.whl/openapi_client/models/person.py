# coding: utf-8

"""
    Bunker OpenAPI Specification

    An OpenAPI specification for Bunker Service  # noqa: E501

    OpenAPI spec version: 0.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Person(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'email': 'str',
        'gender': 'str',
        'dob': 'date',
        'telephone': 'str',
        'mobile': 'str',
        'id': 'str',
        'created_at': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'name': 'name',
        'email': 'email',
        'gender': 'gender',
        'dob': 'dob',
        'telephone': 'telephone',
        'mobile': 'mobile',
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, name=None, email=None, gender=None, dob=None, telephone=None, mobile=None, id=None, created_at=None, updated_at=None):  # noqa: E501
        """Person - a model defined in OpenAPI"""  # noqa: E501

        self._name = None
        self._email = None
        self._gender = None
        self._dob = None
        self._telephone = None
        self._mobile = None
        self._id = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if gender is not None:
            self.gender = gender
        if dob is not None:
            self.dob = dob
        if telephone is not None:
            self.telephone = telephone
        if mobile is not None:
            self.mobile = mobile
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this Person.  # noqa: E501

        The full name of the person  # noqa: E501

        :return: The name of this Person.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.

        The full name of the person  # noqa: E501

        :param name: The name of this Person.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this Person.  # noqa: E501

        Primary email  # noqa: E501

        :return: The email of this Person.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Person.

        Primary email  # noqa: E501

        :param email: The email of this Person.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def gender(self):
        """Gets the gender of this Person.  # noqa: E501

        It should be either 'male' or 'female'  # noqa: E501

        :return: The gender of this Person.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Person.

        It should be either 'male' or 'female'  # noqa: E501

        :param gender: The gender of this Person.  # noqa: E501
        :type: str
        """
        allowed_values = ["male", "female"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def dob(self):
        """Gets the dob of this Person.  # noqa: E501

        The date of birth  # noqa: E501

        :return: The dob of this Person.  # noqa: E501
        :rtype: date
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this Person.

        The date of birth  # noqa: E501

        :param dob: The dob of this Person.  # noqa: E501
        :type: date
        """

        self._dob = dob

    @property
    def telephone(self):
        """Gets the telephone of this Person.  # noqa: E501

        Primary telephone number  # noqa: E501

        :return: The telephone of this Person.  # noqa: E501
        :rtype: str
        """
        return self._telephone

    @telephone.setter
    def telephone(self, telephone):
        """Sets the telephone of this Person.

        Primary telephone number  # noqa: E501

        :param telephone: The telephone of this Person.  # noqa: E501
        :type: str
        """

        self._telephone = telephone

    @property
    def mobile(self):
        """Gets the mobile of this Person.  # noqa: E501

        Primary mobile number  # noqa: E501

        :return: The mobile of this Person.  # noqa: E501
        :rtype: str
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Person.

        Primary mobile number  # noqa: E501

        :param mobile: The mobile of this Person.  # noqa: E501
        :type: str
        """

        self._mobile = mobile

    @property
    def id(self):
        """Gets the id of this Person.  # noqa: E501

        (read-only) The unique identifier for a person  # noqa: E501

        :return: The id of this Person.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Person.

        (read-only) The unique identifier for a person  # noqa: E501

        :param id: The id of this Person.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Person.  # noqa: E501

        (read-only) The date and time at which the person was created  # noqa: E501

        :return: The created_at of this Person.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Person.

        (read-only) The date and time at which the person was created  # noqa: E501

        :param created_at: The created_at of this Person.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Person.  # noqa: E501

        (read-only) The date and time at which the person was updated  # noqa: E501

        :return: The updated_at of this Person.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Person.

        (read-only) The date and time at which the person was updated  # noqa: E501

        :param updated_at: The updated_at of this Person.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Person):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
