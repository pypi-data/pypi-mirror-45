# coding: utf-8

"""
    Bunker OpenAPI Specification

    An OpenAPI specification for Bunker Service  # noqa: E501

    OpenAPI spec version: 0.1.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class BunkerApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_person(self, **kwargs):  # noqa: E501
        """create_person  # noqa: E501

        Creates a new user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_person(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Person person: The user to create
        :return: Person
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_person_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_person_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_person_with_http_info(self, **kwargs):  # noqa: E501
        """create_person  # noqa: E501

        Creates a new user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_person_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Person person: The user to create
        :return: Person
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'person' in local_var_params:
            body_params = local_var_params['person']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Person',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_document(self, person_id, document_id, **kwargs):  # noqa: E501
        """delete_document  # noqa: E501

        Deletes a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_document(person_id, document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str document_id: ID of a document (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_document_with_http_info(person_id, document_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_document_with_http_info(person_id, document_id, **kwargs)  # noqa: E501
            return data

    def delete_document_with_http_info(self, person_id, document_id, **kwargs):  # noqa: E501
        """delete_document  # noqa: E501

        Deletes a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_document_with_http_info(person_id, document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str document_id: ID of a document (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'document_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_document" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `delete_document`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if ('document_id' not in local_var_params or
                local_var_params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `delete_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501
        if 'document_id' in local_var_params:
            path_params['document_id'] = local_var_params['document_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}/documents/{document_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_face(self, person_id, face_id, **kwargs):  # noqa: E501
        """delete_face  # noqa: E501

        Deletes a face  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_face(person_id, face_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str face_id: ID of a face (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_face_with_http_info(person_id, face_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_face_with_http_info(person_id, face_id, **kwargs)  # noqa: E501
            return data

    def delete_face_with_http_info(self, person_id, face_id, **kwargs):  # noqa: E501
        """delete_face  # noqa: E501

        Deletes a face  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_face_with_http_info(person_id, face_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str face_id: ID of a face (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'face_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_face" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `delete_face`")  # noqa: E501
        # verify the required parameter 'face_id' is set
        if ('face_id' not in local_var_params or
                local_var_params['face_id'] is None):
            raise ValueError("Missing the required parameter `face_id` when calling `delete_face`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501
        if 'face_id' in local_var_params:
            path_params['face_id'] = local_var_params['face_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}/faces/{face_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_person(self, person_id, **kwargs):  # noqa: E501
        """delete_person  # noqa: E501

        Deletes a person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_person(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_person_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_person_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def delete_person_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """delete_person  # noqa: E501

        Deletes a person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_person_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `delete_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_scan(self, person_id, scan_id, **kwargs):  # noqa: E501
        """delete_scan  # noqa: E501

        Deletes a Scan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scan(person_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str scan_id: ID of a scan (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_scan_with_http_info(person_id, scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_scan_with_http_info(person_id, scan_id, **kwargs)  # noqa: E501
            return data

    def delete_scan_with_http_info(self, person_id, scan_id, **kwargs):  # noqa: E501
        """delete_scan  # noqa: E501

        Deletes a Scan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_scan_with_http_info(person_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str scan_id: ID of a scan (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'scan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `delete_scan`")  # noqa: E501
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in local_var_params or
                local_var_params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `delete_scan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501
        if 'scan_id' in local_var_params:
            path_params['scan_id'] = local_var_params['scan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}/scans/{scan_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_document(self, person_id, document_id, **kwargs):  # noqa: E501
        """get_document  # noqa: E501

        Gets a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document(person_id, document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str document_id: ID of a document (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_document_with_http_info(person_id, document_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_with_http_info(person_id, document_id, **kwargs)  # noqa: E501
            return data

    def get_document_with_http_info(self, person_id, document_id, **kwargs):  # noqa: E501
        """get_document  # noqa: E501

        Gets a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_with_http_info(person_id, document_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str document_id: ID of a document (required)
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'document_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `get_document`")  # noqa: E501
        # verify the required parameter 'document_id' is set
        if ('document_id' not in local_var_params or
                local_var_params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `get_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501
        if 'document_id' in local_var_params:
            path_params['document_id'] = local_var_params['document_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}/documents/{document_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_face(self, person_id, face_id, **kwargs):  # noqa: E501
        """get_face  # noqa: E501

        Gets a face  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_face(person_id, face_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str face_id: ID of a face (required)
        :return: Face
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_face_with_http_info(person_id, face_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_face_with_http_info(person_id, face_id, **kwargs)  # noqa: E501
            return data

    def get_face_with_http_info(self, person_id, face_id, **kwargs):  # noqa: E501
        """get_face  # noqa: E501

        Gets a face  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_face_with_http_info(person_id, face_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str face_id: ID of a face (required)
        :return: Face
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'face_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_face" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `get_face`")  # noqa: E501
        # verify the required parameter 'face_id' is set
        if ('face_id' not in local_var_params or
                local_var_params['face_id'] is None):
            raise ValueError("Missing the required parameter `face_id` when calling `get_face`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501
        if 'face_id' in local_var_params:
            path_params['face_id'] = local_var_params['face_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}/faces/{face_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Face',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_person(self, person_id, **kwargs):  # noqa: E501
        """get_person  # noqa: E501

        Gets a person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_person(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :return: Person
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_person_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_person_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def get_person_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """get_person  # noqa: E501

        Gets a person  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_person_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :return: Person
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_person" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `get_person`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Person',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scan(self, person_id, scan_id, **kwargs):  # noqa: E501
        """get_scan  # noqa: E501

        Gets a scan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scan(person_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str scan_id: ID of a scan (required)
        :return: Scan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_scan_with_http_info(person_id, scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scan_with_http_info(person_id, scan_id, **kwargs)  # noqa: E501
            return data

    def get_scan_with_http_info(self, person_id, scan_id, **kwargs):  # noqa: E501
        """get_scan  # noqa: E501

        Gets a scan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_scan_with_http_info(person_id, scan_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param str scan_id: ID of a scan (required)
        :return: Scan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'scan_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `get_scan`")  # noqa: E501
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in local_var_params or
                local_var_params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `get_scan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501
        if 'scan_id' in local_var_params:
            path_params['scan_id'] = local_var_params['scan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}/scans/{scan_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def request_scan(self, person_id, **kwargs):  # noqa: E501
        """request_scan  # noqa: E501

        Requests a Person Scan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_scan(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param Scan scan: The scan to be executed
        :return: Scan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.request_scan_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.request_scan_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def request_scan_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """request_scan  # noqa: E501

        Requests a Person Scan  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.request_scan_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param Scan scan: The scan to be executed
        :return: Scan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'scan']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method request_scan" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `request_scan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'scan' in local_var_params:
            body_params = local_var_params['scan']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}/scans/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scan',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_document(self, person_id, **kwargs):  # noqa: E501
        """upload_document  # noqa: E501

        Uploads a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_document(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param Document document: The document to upload
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_document_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_document_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def upload_document_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """upload_document  # noqa: E501

        Uploads a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_document_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param Document document: The document to upload
        :return: Document
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'document']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_document" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `upload_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'document' in local_var_params:
            body_params = local_var_params['document']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}/documents/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Document',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_face(self, person_id, **kwargs):  # noqa: E501
        """upload_face  # noqa: E501

        Upload a face photo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_face(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param Face face: The face to upload
        :return: Face
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.upload_face_with_http_info(person_id, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_face_with_http_info(person_id, **kwargs)  # noqa: E501
            return data

    def upload_face_with_http_info(self, person_id, **kwargs):  # noqa: E501
        """upload_face  # noqa: E501

        Upload a face photo  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_face_with_http_info(person_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str person_id: ID of a person (required)
        :param Face face: The face to upload
        :return: Face
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['person_id', 'face']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_face" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'person_id' is set
        if ('person_id' not in local_var_params or
                local_var_params['person_id'] is None):
            raise ValueError("Missing the required parameter `person_id` when calling `upload_face`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'person_id' in local_var_params:
            path_params['person_id'] = local_var_params['person_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'face' in local_var_params:
            body_params = local_var_params['face']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/persons/{person_id}/faces/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Face',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
