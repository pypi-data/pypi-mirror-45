# coding: utf-8

"""
    Bunker OpenAPI Specification

    An OpenAPI specification for Bunker Service  # noqa: E501

    OpenAPI spec version: 0.1.1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Scan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'str',
        'operation': 'str',
        'id': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'result': 'str'
    }

    attribute_map = {
        'type': 'type',
        'operation': 'operation',
        'id': 'id',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'result': 'result'
    }

    def __init__(self, type=None, operation=None, id=None, created_at=None, updated_at=None, result=None):  # noqa: E501
        """Scan - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._operation = None
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._result = None
        self.discriminator = None

        self.type = type
        self.operation = operation
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if result is not None:
            self.result = result

    @property
    def type(self):
        """Gets the type of this Scan.  # noqa: E501

        The type of scan  # noqa: E501

        :return: The type of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Scan.

        The type of scan  # noqa: E501

        :param type: The type of this Scan.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["document", "facial_similarity"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def operation(self):
        """Gets the operation of this Scan.  # noqa: E501

        What kind of operation from the current scan  # noqa: E501

        :return: The operation of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Scan.

        What kind of operation from the current scan  # noqa: E501

        :param operation: The operation of this Scan.  # noqa: E501
        :type: str
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501
        allowed_values = ["data_extraction", "visual_authenticity", "image_integrity", "face_comparison"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def id(self):
        """Gets the id of this Scan.  # noqa: E501

        (read-only) The unique identifier for the scan  # noqa: E501

        :return: The id of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Scan.

        (read-only) The unique identifier for the scan  # noqa: E501

        :param id: The id of this Scan.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Scan.  # noqa: E501

        (read-only) The date and time at which the scan was initiated  # noqa: E501

        :return: The created_at of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Scan.

        (read-only) The date and time at which the scan was initiated  # noqa: E501

        :param created_at: The created_at of this Scan.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Scan.  # noqa: E501

        (read-only) The date and time at which the scan was updated  # noqa: E501

        :return: The updated_at of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Scan.

        (read-only) The date and time at which the scan was updated  # noqa: E501

        :param updated_at: The updated_at of this Scan.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def result(self):
        """Gets the result of this Scan.  # noqa: E501

        (read-only) Identifier of the object to be verified  # noqa: E501

        :return: The result of this Scan.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Scan.

        (read-only) Identifier of the object to be verified  # noqa: E501

        :param result: The result of this Scan.  # noqa: E501
        :type: str
        """
        allowed_values = ["passed", "denied", "check", "problem"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Scan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
