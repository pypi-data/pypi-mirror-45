Metadata-Version: 2.1
Name: scratchrelaxtv
Version: 0.1.3
Summary: Terraform developer tool to extract variables and create variables.tf files.
Home-page: https://github.com/YakDriver/scratchrelaxtv
Author: YakDriver
Author-email: projects@plus3it.com
License: Apache Software License 2.0
Description: ![scratch relax tv](https://github.com/YakDriver/scratchrelaxtv/raw/master/assets/srt.gif "Extract HCL Vars")
        
        Terraform developer tool to extract variables and create `variables.tf` files.
        
        
        ## simply
        
        ```
        pip install scratchrelaxtv
        ```
        
        In a directory with a `main.tf` file, run *scratchrelaxtv*:
        
        ```console
        $ ls
        main.tf
        $ scratchrelaxtv
        $ ls
        main.tf			variables.tf
        ```
        
        ## details
        
        ### variables.tf
        
        By default, it looks for `main.tf` and will keep variables in the resulting `variables.tf` in the order found in the `main.tf`. If variables are included more than once, they will only be listed once in the resulting `variables.tf`. If you do not `--force` overwriting, *scratchrelaxtv* will create new `variables.tf` files with each run: `variables.1.tf`, `variables.2.tf` and so on.
        
        ### modstub.tf
        
        *scratchrelaxtv* can also be used to generate a module usage stub. By default, it looks for `variables.tf` and will keep variables in the resulting `modstub.tf` in the order found in the `variables.tf`. If variables are included more than once, they will only be listed once in the resulting `modstub.tf`. If you do not `--force` overwriting, *scratchrelaxtv* will create new `modstub.tf` files with each run: `modstub.1.tf`, `modstub.2.tf` and so on.
        
        *scratchrelaxtv* includes help:
        
        ```console
        $ scratchrelaxtv --help
        usage: scratchrelaxtv [-h] [-i INPUT] [-o OUTPUT] [-f] [-m] [-n MODNAME]
                              [-a | -d]
        
        optional arguments:
          -h, --help            show this help message and exit
          -i INPUT, --input INPUT
                                file to extract vars from
          -o OUTPUT, --output OUTPUT
                                file to write extracted vars to
          -f, --force           overwrite existing out file
          -m, --modstub         create module usage stub
          -n MODNAME, --modname MODNAME
                                name to use in module stub
          -a, --asc             sort output variables in ascending order
          -d, --desc            sort output variables in descending order
        ```
        
        # CHANGE LOG
        
        ## 0.1.3 - 2019.04.17
        
        * Add module stub capability
        
        ## 0.1.2 - 2019.04.17
        
        * Add simple docs
        
        ## 0.1.1 - 2019.04.16
        
        * Initial working version
        
        ## 0.1.0 - 2019.04.15
        
        * Initial release!
        
Platform: Linux
Platform: Windows
Platform: Darwin
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: POSIX :: Linux
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy
Classifier: Topic :: Utilities
Description-Content-Type: text/markdown
