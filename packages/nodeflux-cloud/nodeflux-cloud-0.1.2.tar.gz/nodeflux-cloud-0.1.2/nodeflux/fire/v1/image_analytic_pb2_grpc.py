# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from nodeflux.fire.v1 import image_analytic_pb2 as nodeflux_dot_fire_dot_v1_dot_image__analytic__pb2


class ImageAnalyticStub(object):
  """The ImageAnalytic service performs Nodeflux FIRE analytics over
  client images. Supports synchronous and asynchronous service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.BatchImageAnalytic = channel.unary_unary(
        '/nodeflux.fire.v1.ImageAnalytic/BatchImageAnalytic',
        request_serializer=nodeflux_dot_fire_dot_v1_dot_image__analytic__pb2.BatchImageAnalyticRequest.SerializeToString,
        response_deserializer=nodeflux_dot_fire_dot_v1_dot_image__analytic__pb2.BatchImageAnalyticResponse.FromString,
        )


class ImageAnalyticServicer(object):
  """The ImageAnalytic service performs Nodeflux FIRE analytics over
  client images. Supports synchronous and asynchronous service.
  """

  def BatchImageAnalytic(self, request, context):
    """Run image analytics for a batch of image
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ImageAnalyticServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'BatchImageAnalytic': grpc.unary_unary_rpc_method_handler(
          servicer.BatchImageAnalytic,
          request_deserializer=nodeflux_dot_fire_dot_v1_dot_image__analytic__pb2.BatchImageAnalyticRequest.FromString,
          response_serializer=nodeflux_dot_fire_dot_v1_dot_image__analytic__pb2.BatchImageAnalyticResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'nodeflux.fire.v1.ImageAnalytic', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
