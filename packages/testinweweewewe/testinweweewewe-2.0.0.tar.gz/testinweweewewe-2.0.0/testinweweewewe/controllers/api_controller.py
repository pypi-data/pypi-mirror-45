# -*- coding: utf-8 -*-

"""
    testinweweewewe

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

from testinweweewewe.api_helper import APIHelper
from testinweweewewe.configuration import Configuration
from testinweweewewe.controllers.base_controller import BaseController
from testinweweewewe.http.auth.o_auth_2 import OAuth2
from testinweweewewe.models.send_sms_response import SendSMSResponse
from testinweweewewe.models.authentication_response import AuthenticationResponse
from testinweweewewe.models.get_message_response import GetMessageResponse
from testinweweewewe.models.get_message_status_response import GetMessageStatusResponse

class APIController(BaseController):

    """A Controller to access Endpoints in the testinweweewewe API."""


    def create_send_sms(self,
                        content_type,
                        body):
        """Does a POST request to /v1/sms/messages.

        The Send SMS method sends an SMS message to a single Australian mobile
        phone number. A unique identifier (messageId) returned in the
        response, which may be used to query for the delivery status of the
        message.

        Args:
            content_type (string): TODO: type description here. Example: 
            body (SendSMSToBodyObject): TODO: type description here. Example:
                
        Returns:
            SendSMSResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1/sms/messages'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json',
            'Content-Type': content_type
        }

        # Prepare and execute request
        _request = self.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, SendSMSResponse.from_dictionary)

    def get_authentication(self,
                           client_id,
                           client_secret,
                           grant_type=None,
                           scope=None):
        """Does a GET request to /v1/oauth/token.

        To get an OAuth 2.0 Authentication token, pass through your Consumer
        Key and Consumer Secret that you received when you registered for the
        SMS API key. The grant_type should be left as ?client_credentials? and
        the scope as ?SMS?. The token will expire in one hour.

        Args:
            client_id (string): client's id
            client_secret (string): client's secret
            grant_type (string, optional): value set by default
            scope (string, optional): value set by default

        Returns:
            AuthenticationResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1/oauth/token'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_parameters = {
            'client_id': client_id,
            'client_secret': client_secret,
            'grant_type': grant_type,
            'scope': scope
        }
        _query_builder = APIHelper.append_url_with_query_parameters(_query_builder,
            _query_parameters, Configuration.array_serialization)
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, AuthenticationResponse.from_dictionary)

    def get_message_response(self,
                             message_id):
        """Does a GET request to /v1/sms/messages/{MESSAGE_ID}/response.

        The recipients of your SMS messages can send a reply which you can
        retrieve using the Get Message Response method. Pass through the
        unique identifier (messageId) returned as returned in the response
        from the Send SMS method and you will receive the reply and the
        timestamp.

        Args:
            message_id (string): TODO: type description here. Example: 

        Returns:
            GetMessageResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1/sms/messages/{MESSAGE_ID}/response'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, { 
            'MESSAGE_ID': message_id
        })
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetMessageResponse.from_dictionary)

    def get_message_status(self):
        """Does a GET request to /v1/sms/messages/$MESSAGE_ID.

        Use the unique identifier (messageId) returned as returned in the
        response from the Send SMS method to get the status.

        Returns:
            GetMessageStatusResponse: Response from the API. 

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/v1/sms/messages/$MESSAGE_ID'
        _query_builder = Configuration.base_uri
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'accept': 'application/json'
        }

        # Prepare and execute request
        _request = self.http_client.get(_query_url, headers=_headers)
        OAuth2.apply(_request)
        _context = self.execute_request(_request)
        self.validate_response(_context)

        # Return appropriate type
        return APIHelper.json_deserialize(_context.response.raw_body, GetMessageStatusResponse.from_dictionary)
