# -*- coding: utf-8 -*-

"""
    testinweweewewe

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
"""

import jsonpickle
import dateutil.parser
from .controller_test_base import ControllerTestBase
from ..test_helper import TestHelper
from testinweweewewe.api_helper import APIHelper
from testinweweewewe.models.send_sms_to_body_object import SendSMSToBodyObject


class APIControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(APIControllerTests, cls).setUpClass()
        cls.controller = cls.api_client.client

    # The Send SMS method sends an SMS message to a single Australian mobile phone number. A unique identifier (messageId) returned in the response, which may be used to query for the delivery status of the message.
    def test_send_sms_1(self):
        # Parameters for the API call
        content_type = 'application/json'
        body = APIHelper.json_deserialize('{"to":"","body":""}', SendSMSToBodyObject.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_send_sms(content_type, body)

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "messageId": ""}', self.response_catcher.response.raw_body)


    # Use the unique identifier (messageId) returned as returned in the response from the Send SMS method to get the status.
    def test_get_message_status_1(self):

        # Perform the API call through the SDK function
        result = self.controller.get_message_status()

        # Test response code
        self.assertEquals(self.response_catcher.response.status_code, 200)

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = None

        self.assertTrue(TestHelper.match_headers(expected_headers, self.response_catcher.response.headers))

        
        # Test whether the captured response is as we expected
        self.assertIsNotNone(result)
        self.assertEqual('{  "to": "",  "receivedTimestamp": "",  "sentTimestamp": "",  "status": ""}', self.response_catcher.response.raw_body)


