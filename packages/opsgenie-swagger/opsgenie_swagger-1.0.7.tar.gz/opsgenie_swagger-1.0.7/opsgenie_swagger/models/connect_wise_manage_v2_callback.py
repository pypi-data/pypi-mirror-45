# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.action_mapping import ActionMapping  # noqa: F401,E501
from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.bidirectional_callback_new import BidirectionalCallbackNew  # noqa: F401,E501


class ConnectWiseManageV2Callback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'public_key': 'str',
        'private_key': 'str',
        'login_company': 'str',
        'company_name': 'str',
        'cwm_url': 'str',
        'company_id': 'str',
        'board_name': 'str',
        'board_id': 'int'
    }

    attribute_map = {
        'public_key': 'publicKey',
        'private_key': 'privateKey',
        'login_company': 'loginCompany',
        'company_name': 'companyName',
        'cwm_url': 'cwmUrl',
        'company_id': 'companyId',
        'board_name': 'boardName',
        'board_id': 'boardId'
    }

    def __init__(self, public_key=None, private_key=None, login_company=None, company_name=None, cwm_url=None, company_id=None, board_name=None, board_id=None):  # noqa: E501
        """ConnectWiseManageV2Callback - a model defined in Swagger"""  # noqa: E501

        self._public_key = None
        self._private_key = None
        self._login_company = None
        self._company_name = None
        self._cwm_url = None
        self._company_id = None
        self._board_name = None
        self._board_id = None
        self.discriminator = None

        if public_key is not None:
            self.public_key = public_key
        if private_key is not None:
            self.private_key = private_key
        if login_company is not None:
            self.login_company = login_company
        if company_name is not None:
            self.company_name = company_name
        if cwm_url is not None:
            self.cwm_url = cwm_url
        if company_id is not None:
            self.company_id = company_id
        if board_name is not None:
            self.board_name = board_name
        if board_id is not None:
            self.board_id = board_id

    @property
    def public_key(self):
        """Gets the public_key of this ConnectWiseManageV2Callback.  # noqa: E501


        :return: The public_key of this ConnectWiseManageV2Callback.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this ConnectWiseManageV2Callback.


        :param public_key: The public_key of this ConnectWiseManageV2Callback.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def private_key(self):
        """Gets the private_key of this ConnectWiseManageV2Callback.  # noqa: E501


        :return: The private_key of this ConnectWiseManageV2Callback.  # noqa: E501
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this ConnectWiseManageV2Callback.


        :param private_key: The private_key of this ConnectWiseManageV2Callback.  # noqa: E501
        :type: str
        """

        self._private_key = private_key

    @property
    def login_company(self):
        """Gets the login_company of this ConnectWiseManageV2Callback.  # noqa: E501


        :return: The login_company of this ConnectWiseManageV2Callback.  # noqa: E501
        :rtype: str
        """
        return self._login_company

    @login_company.setter
    def login_company(self, login_company):
        """Sets the login_company of this ConnectWiseManageV2Callback.


        :param login_company: The login_company of this ConnectWiseManageV2Callback.  # noqa: E501
        :type: str
        """

        self._login_company = login_company

    @property
    def company_name(self):
        """Gets the company_name of this ConnectWiseManageV2Callback.  # noqa: E501


        :return: The company_name of this ConnectWiseManageV2Callback.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this ConnectWiseManageV2Callback.


        :param company_name: The company_name of this ConnectWiseManageV2Callback.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def cwm_url(self):
        """Gets the cwm_url of this ConnectWiseManageV2Callback.  # noqa: E501


        :return: The cwm_url of this ConnectWiseManageV2Callback.  # noqa: E501
        :rtype: str
        """
        return self._cwm_url

    @cwm_url.setter
    def cwm_url(self, cwm_url):
        """Sets the cwm_url of this ConnectWiseManageV2Callback.


        :param cwm_url: The cwm_url of this ConnectWiseManageV2Callback.  # noqa: E501
        :type: str
        """

        self._cwm_url = cwm_url

    @property
    def company_id(self):
        """Gets the company_id of this ConnectWiseManageV2Callback.  # noqa: E501


        :return: The company_id of this ConnectWiseManageV2Callback.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ConnectWiseManageV2Callback.


        :param company_id: The company_id of this ConnectWiseManageV2Callback.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def board_name(self):
        """Gets the board_name of this ConnectWiseManageV2Callback.  # noqa: E501


        :return: The board_name of this ConnectWiseManageV2Callback.  # noqa: E501
        :rtype: str
        """
        return self._board_name

    @board_name.setter
    def board_name(self, board_name):
        """Sets the board_name of this ConnectWiseManageV2Callback.


        :param board_name: The board_name of this ConnectWiseManageV2Callback.  # noqa: E501
        :type: str
        """

        self._board_name = board_name

    @property
    def board_id(self):
        """Gets the board_id of this ConnectWiseManageV2Callback.  # noqa: E501


        :return: The board_id of this ConnectWiseManageV2Callback.  # noqa: E501
        :rtype: int
        """
        return self._board_id

    @board_id.setter
    def board_id(self, board_id):
        """Sets the board_id of this ConnectWiseManageV2Callback.


        :param board_id: The board_id of this ConnectWiseManageV2Callback.  # noqa: E501
        :type: int
        """

        self._board_id = board_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConnectWiseManageV2Callback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
