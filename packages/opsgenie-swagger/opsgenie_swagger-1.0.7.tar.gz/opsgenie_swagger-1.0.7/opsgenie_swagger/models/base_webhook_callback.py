# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.action_mapping import ActionMapping  # noqa: F401,E501
from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.outgoing_callback_new import OutgoingCallbackNew  # noqa: F401,E501


class BaseWebhookCallback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'headers': 'dict(str, str)',
        'add_alert_details': 'bool',
        'add_alert_description': 'bool',
        'base_webhook_callback_type': 'str'
    }

    attribute_map = {
        'url': 'url',
        'headers': 'headers',
        'add_alert_details': 'addAlertDetails',
        'add_alert_description': 'addAlertDescription',
        'base_webhook_callback_type': 'base-webhook-callback-type'
    }

    def __init__(self, url=None, headers=None, add_alert_details=None, add_alert_description=None, base_webhook_callback_type=None):  # noqa: E501
        """BaseWebhookCallback - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._headers = None
        self._add_alert_details = None
        self._add_alert_description = None
        self._base_webhook_callback_type = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if headers is not None:
            self.headers = headers
        if add_alert_details is not None:
            self.add_alert_details = add_alert_details
        if add_alert_description is not None:
            self.add_alert_description = add_alert_description
        if base_webhook_callback_type is not None:
            self.base_webhook_callback_type = base_webhook_callback_type

    @property
    def url(self):
        """Gets the url of this BaseWebhookCallback.  # noqa: E501


        :return: The url of this BaseWebhookCallback.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this BaseWebhookCallback.


        :param url: The url of this BaseWebhookCallback.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def headers(self):
        """Gets the headers of this BaseWebhookCallback.  # noqa: E501


        :return: The headers of this BaseWebhookCallback.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this BaseWebhookCallback.


        :param headers: The headers of this BaseWebhookCallback.  # noqa: E501
        :type: dict(str, str)
        """

        self._headers = headers

    @property
    def add_alert_details(self):
        """Gets the add_alert_details of this BaseWebhookCallback.  # noqa: E501


        :return: The add_alert_details of this BaseWebhookCallback.  # noqa: E501
        :rtype: bool
        """
        return self._add_alert_details

    @add_alert_details.setter
    def add_alert_details(self, add_alert_details):
        """Sets the add_alert_details of this BaseWebhookCallback.


        :param add_alert_details: The add_alert_details of this BaseWebhookCallback.  # noqa: E501
        :type: bool
        """

        self._add_alert_details = add_alert_details

    @property
    def add_alert_description(self):
        """Gets the add_alert_description of this BaseWebhookCallback.  # noqa: E501


        :return: The add_alert_description of this BaseWebhookCallback.  # noqa: E501
        :rtype: bool
        """
        return self._add_alert_description

    @add_alert_description.setter
    def add_alert_description(self, add_alert_description):
        """Sets the add_alert_description of this BaseWebhookCallback.


        :param add_alert_description: The add_alert_description of this BaseWebhookCallback.  # noqa: E501
        :type: bool
        """

        self._add_alert_description = add_alert_description

    @property
    def base_webhook_callback_type(self):
        """Gets the base_webhook_callback_type of this BaseWebhookCallback.  # noqa: E501


        :return: The base_webhook_callback_type of this BaseWebhookCallback.  # noqa: E501
        :rtype: str
        """
        return self._base_webhook_callback_type

    @base_webhook_callback_type.setter
    def base_webhook_callback_type(self, base_webhook_callback_type):
        """Sets the base_webhook_callback_type of this BaseWebhookCallback.


        :param base_webhook_callback_type: The base_webhook_callback_type of this BaseWebhookCallback.  # noqa: E501
        :type: str
        """
        allowed_values = ["flock-callback", "kore-callback", "moxtra-callback", "ring-central-glip-callback", "statusy-callback", "webhook-callback"]  # noqa: E501
        if base_webhook_callback_type not in allowed_values:
            raise ValueError(
                "Invalid value for `base_webhook_callback_type` ({0}), must be one of {1}"  # noqa: E501
                .format(base_webhook_callback_type, allowed_values)
            )

        self._base_webhook_callback_type = base_webhook_callback_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BaseWebhookCallback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
