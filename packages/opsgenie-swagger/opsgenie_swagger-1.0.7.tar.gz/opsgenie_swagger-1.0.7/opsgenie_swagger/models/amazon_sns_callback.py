# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.action_mapping import ActionMapping  # noqa: F401,E501
from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.outgoing_callback_new import OutgoingCallbackNew  # noqa: F401,E501


class AmazonSnsCallback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'topic_arn': 'str',
        'region': 'str',
        'new_conf_type': 'bool'
    }

    attribute_map = {
        'topic_arn': 'topicArn',
        'region': 'region',
        'new_conf_type': 'newConfType'
    }

    def __init__(self, topic_arn=None, region=None, new_conf_type=None):  # noqa: E501
        """AmazonSnsCallback - a model defined in Swagger"""  # noqa: E501

        self._topic_arn = None
        self._region = None
        self._new_conf_type = None
        self.discriminator = None

        if topic_arn is not None:
            self.topic_arn = topic_arn
        if region is not None:
            self.region = region
        if new_conf_type is not None:
            self.new_conf_type = new_conf_type

    @property
    def topic_arn(self):
        """Gets the topic_arn of this AmazonSnsCallback.  # noqa: E501


        :return: The topic_arn of this AmazonSnsCallback.  # noqa: E501
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this AmazonSnsCallback.


        :param topic_arn: The topic_arn of this AmazonSnsCallback.  # noqa: E501
        :type: str
        """

        self._topic_arn = topic_arn

    @property
    def region(self):
        """Gets the region of this AmazonSnsCallback.  # noqa: E501


        :return: The region of this AmazonSnsCallback.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AmazonSnsCallback.


        :param region: The region of this AmazonSnsCallback.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def new_conf_type(self):
        """Gets the new_conf_type of this AmazonSnsCallback.  # noqa: E501


        :return: The new_conf_type of this AmazonSnsCallback.  # noqa: E501
        :rtype: bool
        """
        return self._new_conf_type

    @new_conf_type.setter
    def new_conf_type(self, new_conf_type):
        """Sets the new_conf_type of this AmazonSnsCallback.


        :param new_conf_type: The new_conf_type of this AmazonSnsCallback.  # noqa: E501
        :type: bool
        """

        self._new_conf_type = new_conf_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AmazonSnsCallback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
