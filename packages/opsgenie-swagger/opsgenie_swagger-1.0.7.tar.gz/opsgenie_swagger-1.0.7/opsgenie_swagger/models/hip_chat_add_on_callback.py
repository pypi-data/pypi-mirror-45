# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.bidirectional_callback import BidirectionalCallback  # noqa: F401,E501


class HipChatAddOnCallback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notify': 'bool',
        'group_name': 'str',
        'host_url': 'str',
        'use_collapsed_messages': 'bool'
    }

    attribute_map = {
        'notify': 'notify',
        'group_name': 'groupName',
        'host_url': 'hostUrl',
        'use_collapsed_messages': 'useCollapsedMessages'
    }

    def __init__(self, notify=None, group_name=None, host_url=None, use_collapsed_messages=None):  # noqa: E501
        """HipChatAddOnCallback - a model defined in Swagger"""  # noqa: E501

        self._notify = None
        self._group_name = None
        self._host_url = None
        self._use_collapsed_messages = None
        self.discriminator = None

        if notify is not None:
            self.notify = notify
        if group_name is not None:
            self.group_name = group_name
        if host_url is not None:
            self.host_url = host_url
        if use_collapsed_messages is not None:
            self.use_collapsed_messages = use_collapsed_messages

    @property
    def notify(self):
        """Gets the notify of this HipChatAddOnCallback.  # noqa: E501


        :return: The notify of this HipChatAddOnCallback.  # noqa: E501
        :rtype: bool
        """
        return self._notify

    @notify.setter
    def notify(self, notify):
        """Sets the notify of this HipChatAddOnCallback.


        :param notify: The notify of this HipChatAddOnCallback.  # noqa: E501
        :type: bool
        """

        self._notify = notify

    @property
    def group_name(self):
        """Gets the group_name of this HipChatAddOnCallback.  # noqa: E501


        :return: The group_name of this HipChatAddOnCallback.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this HipChatAddOnCallback.


        :param group_name: The group_name of this HipChatAddOnCallback.  # noqa: E501
        :type: str
        """

        self._group_name = group_name

    @property
    def host_url(self):
        """Gets the host_url of this HipChatAddOnCallback.  # noqa: E501


        :return: The host_url of this HipChatAddOnCallback.  # noqa: E501
        :rtype: str
        """
        return self._host_url

    @host_url.setter
    def host_url(self, host_url):
        """Sets the host_url of this HipChatAddOnCallback.


        :param host_url: The host_url of this HipChatAddOnCallback.  # noqa: E501
        :type: str
        """

        self._host_url = host_url

    @property
    def use_collapsed_messages(self):
        """Gets the use_collapsed_messages of this HipChatAddOnCallback.  # noqa: E501


        :return: The use_collapsed_messages of this HipChatAddOnCallback.  # noqa: E501
        :rtype: bool
        """
        return self._use_collapsed_messages

    @use_collapsed_messages.setter
    def use_collapsed_messages(self, use_collapsed_messages):
        """Sets the use_collapsed_messages of this HipChatAddOnCallback.


        :param use_collapsed_messages: The use_collapsed_messages of this HipChatAddOnCallback.  # noqa: E501
        :type: bool
        """

        self._use_collapsed_messages = use_collapsed_messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HipChatAddOnCallback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
