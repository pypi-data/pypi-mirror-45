# coding: utf-8

"""
    OpsGenie REST API

    OpsGenie OpenAPI Specification  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from opsgenie_swagger.models.alert_filter import AlertFilter  # noqa: F401,E501
from opsgenie_swagger.models.bidirectional_callback import BidirectionalCallback  # noqa: F401,E501


class SlackAppCallback(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'channel': 'str',
        'team_name': 'str',
        'send_description': 'bool',
        'send_routed_teams': 'bool',
        'send_tags': 'bool'
    }

    attribute_map = {
        'channel': 'channel',
        'team_name': 'teamName',
        'send_description': 'sendDescription',
        'send_routed_teams': 'sendRoutedTeams',
        'send_tags': 'sendTags'
    }

    def __init__(self, channel=None, team_name=None, send_description=None, send_routed_teams=None, send_tags=None):  # noqa: E501
        """SlackAppCallback - a model defined in Swagger"""  # noqa: E501

        self._channel = None
        self._team_name = None
        self._send_description = None
        self._send_routed_teams = None
        self._send_tags = None
        self.discriminator = None

        if channel is not None:
            self.channel = channel
        if team_name is not None:
            self.team_name = team_name
        if send_description is not None:
            self.send_description = send_description
        if send_routed_teams is not None:
            self.send_routed_teams = send_routed_teams
        if send_tags is not None:
            self.send_tags = send_tags

    @property
    def channel(self):
        """Gets the channel of this SlackAppCallback.  # noqa: E501


        :return: The channel of this SlackAppCallback.  # noqa: E501
        :rtype: str
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this SlackAppCallback.


        :param channel: The channel of this SlackAppCallback.  # noqa: E501
        :type: str
        """

        self._channel = channel

    @property
    def team_name(self):
        """Gets the team_name of this SlackAppCallback.  # noqa: E501


        :return: The team_name of this SlackAppCallback.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this SlackAppCallback.


        :param team_name: The team_name of this SlackAppCallback.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def send_description(self):
        """Gets the send_description of this SlackAppCallback.  # noqa: E501


        :return: The send_description of this SlackAppCallback.  # noqa: E501
        :rtype: bool
        """
        return self._send_description

    @send_description.setter
    def send_description(self, send_description):
        """Sets the send_description of this SlackAppCallback.


        :param send_description: The send_description of this SlackAppCallback.  # noqa: E501
        :type: bool
        """

        self._send_description = send_description

    @property
    def send_routed_teams(self):
        """Gets the send_routed_teams of this SlackAppCallback.  # noqa: E501


        :return: The send_routed_teams of this SlackAppCallback.  # noqa: E501
        :rtype: bool
        """
        return self._send_routed_teams

    @send_routed_teams.setter
    def send_routed_teams(self, send_routed_teams):
        """Sets the send_routed_teams of this SlackAppCallback.


        :param send_routed_teams: The send_routed_teams of this SlackAppCallback.  # noqa: E501
        :type: bool
        """

        self._send_routed_teams = send_routed_teams

    @property
    def send_tags(self):
        """Gets the send_tags of this SlackAppCallback.  # noqa: E501


        :return: The send_tags of this SlackAppCallback.  # noqa: E501
        :rtype: bool
        """
        return self._send_tags

    @send_tags.setter
    def send_tags(self, send_tags):
        """Sets the send_tags of this SlackAppCallback.


        :param send_tags: The send_tags of this SlackAppCallback.  # noqa: E501
        :type: bool
        """

        self._send_tags = send_tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SlackAppCallback):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
